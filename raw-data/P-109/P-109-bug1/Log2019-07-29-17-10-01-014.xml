<Events startTimestamp="1564434601014" logVersion="0.11.0.201504031625" osName="Windows 10" osVersion="10.0" lineSeparator="\r\n" numMonitors="1" monitorBounds="[0, 0, 1920, 1080]">
  <Command __id="0" _type="ShellBoundsCommand" bounds="[-8, -8, 1936, 1056]" timestamp="5" />
  <Command __id="1" _type="FileOpenCommand" docASTNodeCount="260" docActiveCodeLength="2374" docExpressionCount="151" docLength="3681" projectName="MineSweeper" timestamp="19">
    <filePath><![CDATA[C:\Users\Eye-tracking\git\MineSweeper-Experiment\src\logic\MineSweeper.java]]></filePath>
    <snapshot><![CDATA[/*
BUG REPORT #1
When you start the MineSweeper program, if you click on the New Game button, it will crash.
*/

package logic;
import javax.swing.JOptionPane;
import javax.swing.UIManager;

import presentation.CustomMenu;
import presentation.MineSweeperGui;

/**
 * Main launcher class for MineSweeper, containing all the menus and general
 * prompts
 *
 * @author  KnightMiner
 */

public class MineSweeper {
    // currently running instance of the game
    private static MineSweeperGui gui;

    /**
     * Primary way to boot the game
     * @param args  Default args (unused)
     */
    
    public static void main(String[] args) {
        // High DPI stuff
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        }
        catch(Exception e) {
            e.printStackTrace();
        }

        // load the help panels
        // this has a side effect of loading the icons for the pieces
        Help.load();

        // start the game on easy
        newGame(Difficulty.EASY);
    }

    /**
     * Creates a new MineSweeper game with one of three default sizes or custom
     * @param difficulty Game difficulty
     */
    
    public static void newGame(Difficulty difficulty) {
        // difficulty switch
        MineSweeperBoard board = null;
        switch(difficulty) {
            case EASY:
                board = new MineSweeperBoard(9, 9, 10, 0);
                break;
            case NORMAL:
                board = new MineSweeperBoard(16, 16, 40, 1);
                break;
            case HARD:
                board = new MineSweeperBoard(30, 16, 99, 3);
                break;
            case CUSTOM:
                board = customGame();
                break;
        }

        startGame(board);
    }

    /**
     * Creates a new game with the custom size
     * @return  A board of the custom size
     */
    
    public static MineSweeperBoard customGame() {
        CustomMenu menu = new CustomMenu();

        int result = JOptionPane.showConfirmDialog(null, menu,
                "Custom", JOptionPane.OK_CANCEL_OPTION,
                JOptionPane.PLAIN_MESSAGE);

        // if they pressed OK
        if(result == JOptionPane.OK_OPTION) {
            return menu.createBoard();
        }
        else {
            return null;
        }
    }

    /**
     * Starts a new game with the specified board
     * @param board  Game board to start
     */
    
    public static void startGame(MineSweeperBoard board) {
        // must be a valid board
        if(board != null) {
            // remove the current gui and define the new one
            if(gui != null) {
                gui.dispose();
            }

            // create a new instance
            gui = new MineSweeperGui(board);
        }
    }

    /**
     * List of buttons for the GUI
     */
    
    public enum Difficulty {
        /** Easy game */
        EASY("Easy"),
        /** Normal game */
        NORMAL("Normal"),
        /** Hard game */
        HARD("Expert"),
        /** Custom size and mines from the GUI */
        CUSTOM("Custom");

        // data
        private String label;

        /**
         * Default constructor
         * @param  Button label
         */
        
        Difficulty(String label) {
            this.label = label;
        }

        /**
         * Gets the label for the difficulty
         * @return  Difficulty name
         */
        
        public String getLabel() {
            return label;
        }
    }
}
]]></snapshot>
  </Command>
  <Command __id="2" _type="SelectTextCommand" caretOffset="63" docEnd="164" docOffset="164" docStart="141" end="63" start="40" timestamp="440" />
  <Command __id="3" _type="MoveCaretCommand" caretOffset="13" docOffset="17" timestamp="50217" />
  <Command __id="4" _type="MoveCaretCommand" caretOffset="628" docOffset="740" timestamp="62145" />
  <Command __id="5" _type="MoveCaretCommand" caretOffset="888" docOffset="1000" timestamp="66370" />
  <Command __id="6" _type="FileOpenCommand" docASTNodeCount="1774" docActiveCodeLength="10622" docExpressionCount="1044" docLength="19648" projectName="MineSweeper" timestamp="93990">
    <filePath><![CDATA[C:\Users\Eye-tracking\git\MineSweeper-Experiment\src\logic\MineSweeperBoard.java]]></filePath>
    <snapshot><![CDATA[package logic;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.*;

import util.Piece;
import util.Space;

/**
 * Contains all the visible pieces in the MineSweeper game
 * 
 * @author KnightMiner
 */

public class MineSweeperBoard implements Serializable {

	/**
	 * Random number generator used to create game seeds Minefields use a sepparate
	 * object created using a specific seed
	 */
	
	public static final Random RANDOM = new Random();

	// resizable
	private transient Queue<Space> update;

	// board dimensions
	private int width, height;
	private MineGenerator data = new MineGenerator();

	private int flagCount;

	// board data
	private Piece[][] pieces;
	private boolean[][] mines;
	private boolean gameOver;
	private boolean victory;

	// determines if the first click happened yet
	private boolean firstClick;

	// determines if we have used our one cheat
	private int cheatsAllowed;
	private int cheats = 0;

	// board seed
	private long seed;

	/**
	 * Creates a new minesweaper board with the specified dimensions
	 * 
	 * @param width     Width of the board
	 * @param height    Height of the board
	 * @param mineCount Total mines
	 * @param cheats    Cheats allowed
	 */
	
	public MineSweeperBoard(int width, int height, int mineCount, int cheats) {
		this.width = width;
		this.height = height;

		this.pieces = new Piece[height][width];
		this.mines = new boolean[height][width];

		// sanity check in case the GUI fails to correct the number
		this.data.mineCount = Math.min(mineCount, width * height - 9);
		this.cheatsAllowed = this.cheats = cheats;

		update = new LinkedList<>();
	}

	/**
	 * Creates a new minesweaper board with the specified dimensions
	 * 
	 * @param width     Width of the board
	 * @param height    Height of the board
	 * @param mineCount Total mines
	 */
	
	public MineSweeperBoard(int width, int height, int mineCount) {
		this(width, height, mineCount, 1);
	}

	/* Main logic */

	/**
	 * Populates the board with mines with a random seed
	 * 
	 * @param space Space clicked
	 */
	
	public void generateMines(Space space) {
		generateMines(RANDOM.nextLong(), space);
	}

	/**
	 * Populates the board with mines
	 * 
	 * @param seed    Seed to generate mines. Two fields with the same size and seed
	 *                will have the same mines locations
	 * @param clicked space clicked when generating the mines
	 */
	
	protected void generateMines(long seed, Space clicked) {
		// store the current seed for saving games
		this.seed = seed;

		// no mines? no work
		if (data.mineCount == 0) {
			return;
		}

		// list of spaces we can still place a mine at
		List<Space> remainingSpaces = new ArrayList<>(Arrays.asList(getAllSpaces()));

		// if we clicked somewhere, remove all nearby spaces
		if (clicked != null) {
			// remove all unclickable spaces
			final int x = clicked.getX(), y = clicked.getY();
			remainingSpaces.removeIf((space) -> {
				return (y - 1) <= space.getY() && space.getY() <= (y + 1) && (x - 1) <= space.getX()
						&& space.getX() <= (x + 1);
			});
		}

		// random object seeded so results can be controlled
		Random random = new Random(seed);

		// place mines
		this.mines = new boolean[height][width];
		for (int i = 0; i < data.mineCount; i++) {
			// just get the linear location of the next mine and place it
			int mine = random.nextInt(remainingSpaces.size());
			Space space = remainingSpaces.get(mine);
			mines[space.getY()][space.getX()] = true;
			remainingSpaces.remove(mine);
		}
	}

	/**
	 * Creates a new game with the same dimensions
	 */
	
	public void newGame() {
		// first, regenerate the mines
		this.mines = new boolean[height][width];

		// next, clear game specific data
		resetData();

		// then mark all spaces for a rendering update
		for (Space space : getAllSpaces()) {
			markUpdate(space);
		}
	}

	/**
	 * Restarts the current game
	 */
	
	public void restart() {
		// if we have not clicked yet, do nothing
		// we don't have a seed to restart from
		if (!firstClick) {
			return;
		}

		// reset any relevant data
		resetData();

		// but assume we already clicked so the mines don't change
		firstClick = true;

		// and mark all spaces for an update
		for (Space space : getAllSpaces()) {
			markUpdate(space);
		}
	}

	/**
	 * Saves the board to a binary file
	 * 
	 * @param filename Location of the game
	 */
	
	public void saveGame(String filename) {
		// TODO: better saving logic
		try {
			FileOutputStream file = new FileOutputStream(filename + ".bin");
			ObjectOutputStream stream = new ObjectOutputStream(file);
			stream.writeObject(this);
			stream.flush();
			stream.close();
		} catch (IOException e) {
		}
	}

	/**
	 * Load the board from a binary file
	 * 
	 * @param filename Location of the game
	 * @return The board, or null if invalid
	 */
	
	public static MineSweeperBoard loadGame(String filename) {
		try {
			FileInputStream file = new FileInputStream(filename + ".bin");
			ObjectInputStream stream = new ObjectInputStream(file);
			MineSweeperBoard board = (MineSweeperBoard) stream.readObject();
			stream.close();
			return board;
		} catch (IOException | ClassNotFoundException e) {
			e.printStackTrace();
			return null;
		}
	}

	/**
	 * Resets generic data
	 */
	
	private void resetData() {
		this.pieces = new Piece[height][width];
		gameOver = false;
		firstClick = false;
		cheats = cheatsAllowed;
		flagCount = 0;
		victory = false;
	}

	/**
	 * Ends the game with a loss
	 * 
	 * @param clicked Location clicked causing the loss
	 * @return Mine clicked
	 */
	
	public void loseGame(Space clicked) {
		// set the game to over
		gameOver = true;

		showMines(clicked, false);
	}

	/**
	 * Checks if the game has been won, and sets the appropiate statuses
	 */
	
	public void checkVictory() {
		// check all spaces
		for (Space space : getAllSpaces()) {

			// only spaces without mines need to be checked, we don't care about
			// flags or marks on mine spaces
			if (!isMine(space)) {
				// if the piece is unclicked or not a number, we failed
				Piece piece = getPiece(space);
				if (piece == null || !piece.isNumber()) {
					return;
				}
			}
		}

		// made it through that? we won
		victory = true;
		gameOver = true;

		showMines(null, true);
	}

	/**
	 * Shows all the mines on the board
	 * 
	 * @param space   Space that was clicked
	 * @param victory Determines if the game was won or lost
	 */
	
	private void showMines(Space clicked, boolean victory) {
		// set the mine color based on victory
		Piece mine = victory ? Piece.MINE_GREEN : Piece.MINE;

		// set the clicked space to red
		if (clicked != null && isMine(clicked)) {
			setPiece(clicked, Piece.MINE_RED);
		}

		// show mines on the board
		for (Space space : getAllSpaces()) {
			if (space.equals(clicked)) {
				continue;
			}
			Piece piece = getPiece(space);
			if (isMine(space)) {
				// but only on empty or marks
				if (piece == null || piece.isMark()) {
					setPiece(space, mine);
				}
			} else {
				// if the space has a flag but no mine, mark it as such
				if (piece == Piece.FLAG) {
					setPiece(space, Piece.FLAG_NOT);
				}
			}
		}
	}

	/* Clicking */

	/**
	 * Handle standard game clicks
	 * 
	 * @param space  Space clicked
	 * @param action Type of click
	 */
	
	public void handleClick(Space space, ClickAction action) {
		// stop playing when the game is over
		if (gameOver) {
			return;
		}
		// simply passes it along to the dedicated function
		switch (action) {
		case DEFAULT:
			handleDefaultClick(space);
			break;
		case FLAG:
			handleFlagClick(space);
			break;
		case MARK:
			handleMarkClick(space);
			break;
		case CHEAT:
			handleCheatClick(space);
			break;
		}
	}

	/**
	 * Space clicking core, does the actual clicking action
	 * 
	 * @param space Space clicked
	 */
	
	private void clickSpace(Space space) {
		// if the space is not replaceable, stop now
		// called here so we don't click flags as they are mines
		if (!isReplaceable(space)) {
			return;
		}

		// if the space is a mine, we lose
		if (isMine(space)) {
			loseGame(space);
		}

		// otherwise do a normal click
		else {
			// sets the piece to the number of surrounding mines
			Piece newPiece = getNumber(space);
			setPiece(space, newPiece);

			// if the piece is 0, update surrounding pieces as none of them are mines
			// this won't eternally recur since this space is no longer clickable
			if (newPiece == Piece.N0) {
				for (Space neighbor : getNeighbors(space)) {
					clickSpace(neighbor);
				}
			}
		}
	}

	/**
	 * Default clicks, clicks a space and displays a number or loses the game
	 * 
	 * @param space Space clicked
	 */
	
	private void handleDefaultClick(Space space) {
		// first click should generate the minefield
		if (!firstClick) {
			firstClick(space);
		}

		// if the space cannot be replaced then stop here
		// as we run this function on every click
		if (isNumber(space)) {
			// if the number of flags around this space is the same as the number
			Space[] neighbors = getNeighbors(space);

			// count the flags around the piece
			int flags = 0;
			for (Space neighbor : neighbors) {
				if (getPiece(neighbor) == Piece.FLAG) {
					flags++;
				}
			}

			// same number of flags as the piece number?
			if (flags == getPiece(space).getNumber()) {
				// click all the spaces. This is a risky move if a flag is wrong
				for (Space neighbor : neighbors) {
					clickSpace(neighbor);
				}
			}
		}
		// otherwise if not a number, just click the space
		else {
			clickSpace(space);
		}

		// check just once at the end of clicking
		checkVictory();
	}

	/**
	 * Handle the first click in the game. This click will generate the minefield as
	 * it cannot be on a mine
	 * 
	 * @param space Space clicked
	 */
	
	private void firstClick(Space space) {
		generateMines(space);
		firstClick = true;
	}

	/**
	 * Flag clicks, essentially click once to add
	 * 
	 * @param space Space clicked
	 */
	
	private void handleFlagClick(Space space) {
		// if already a flag, set a mark
		Piece piece = getPiece(space);
		if (piece == Piece.FLAG) {
			setPiece(space, Piece.MARK_RED);
			flagCount--;
		}
		// remove marks
		else if (piece != null && piece.isMark()) {
			setPiece(space, null);
		}
		// otherwise if we can add one
		else if (isReplaceable(space)) {
			if(flagCount < data.mineCount) {
				setPiece(space, Piece.FLAG);
				flagCount++;
			}
		}
	}

	/**
	 * Mark clicks, changes the color of a mark
	 * 
	 * @param space Space clicked
	 */
	
	private void handleMarkClick(Space space) {
		// tobble the mark
		Piece piece = getPiece(space);
		if (piece == Piece.MARK_RED) {
			setPiece(space, Piece.MARK_GREEN);
		}
		// remove marks
		else if (piece == Piece.MARK_GREEN) {
			setPiece(space, Piece.MARK_BLUE);
		}
		// otherwise if we can add one
		else if (piece == Piece.MARK_BLUE) {
			setPiece(space, Piece.MARK_RED);
		}

		// if its a flag, remove it
		else if (piece == Piece.FLAG) {
			setPiece(space, Piece.MARK_RED);
			flagCount--;
		}

		// essentially all that is left here is null, but still
		else if (isReplaceable(space)) {
			setPiece(space, Piece.MARK_RED);
		}
	}

	/**
	 * Cheat clicks, click a space and it will show a "ghost" bomb if one exists
	 * 
	 * @param space Space clicked
	 */
	
	private void handleCheatClick(Space space) {
		// already ran, don't run again
		if (!canCheat()) {
			return;
		}

		// no mines if we have not clicked
		if (!firstClick) {
			// you cheated for the first click, useless move as now we don't care
			// about click protection
			firstClick(null);
		}

		// only marks and empty spaces can be cheated, to save accidental clicks
		Piece piece = getPiece(space);
		if (piece != null && !piece.isMark()) {
			return;
		}

		// if its a mine, show that
		if (isMine(space)) {
			setPiece(space, Piece.MINE_GREEN);
		}
		// otherwise click the space as we know its safe
		else {
			clickSpace(space);
		}

		// use a cheat
		cheats--;

		// need to check, since it could be the last click
		checkVictory();
	}

	/* Helper functions */

	/**
	 * Gets a list of all spaces
	 * 
	 * @return a list of all spaces
	 */
	
	public Space[] getAllSpaces() {
		Space[] spaces = new Space[width * height];

		// loop through all spaces, adding them to an array
		int i = 0;
		for (int y = 0; y < height; y++) {
			for (int x = 0; x < width; x++) {
				spaces[i] = new Space(x, y);
				i++;
			}
		}

		return spaces;
	}

	/**
	 * Helper function to get the coordinates of all 8 neighbors to the space Note
	 * that some may be invalid spaces
	 * 
	 * @param space Space around which to get neighbors
	 * @return an array of spaces of the 8 neighbors, or less on edges
	 */
	
	public Space[] getNeighbors(Space space) {
		// if not valid, return no neighbors
		if (!isValid(space)) {
			return new Space[0];
		}

		// array cannot be bigger than 8
		Space[] neighbors = new Space[8];
		int x = space.getX();
		int y = space.getY();

		// 2D loop from x - 1, y - 1 up to x + 1, y + 1
		int neighborCount = 0;
		for (int i = -1; i <= 1; i++) {
			for (int j = -1; j <= 1; j++) {
				// skip offset of 0,0 as that is the input space
				if (i == 0 && j == 0) {
					continue;
				}

				// make sure the space is valid before returning it
				Space neighbor = new Space(x + i, y + j);
				if (isValid(neighbor)) {
					neighbors[neighborCount] = neighbor;
					neighborCount++;
				}
			}
		}

		return neighbors;
	}

	/**
	 * Marks a space as needing update by the graphics display
	 * 
	 * @param space space needing an update
	 */
	
	public void markUpdate(Space space) {
		if (!update.contains(space)) {
			update.add(space);
		}
	}

	/**
	 * Returns the number to display on the space after clicking it Does not take
	 * bombs on this space into account, check isMine() first
	 * 
	 * @param space Space to check
	 * @return The number of bombs around this space
	 */
	
	public Piece getNumber(Space space) {
		// no space? no return
		if (!isValid(space)) {
			return null;
		}

		int count = 0;
		// check all the neighbors for a bomb
		for (Space neighbor : getNeighbors(space)) {
			// if they have one, add to the running total
			if (isMine(neighbor)) {
				count++;
			}
		}

		// return the specific piece
		return Piece.fromNumber(count);
	}

	/* Getters, setters, and basic return logic */

	/**
	 * Gets the piece on the specified space
	 * 
	 * @param space Space to check for a piece
	 * @return the piece on the specified space
	 */
	
	public Piece getPiece(Space space) {
		// invalid gets null
		if (!isValid(space)) {
			return null;
		}

		// otherwise go with the contained piece
		return pieces[space.getY()][space.getX()];
	}

	/**
	 * Placed a piece on a space
	 * 
	 * @param space Space to place the piece
	 * @param piece Piece to place on the space
	 */
	
	public void setPiece(Space space, Piece piece) {
		// must be valid
		if (isValid(space)) {
			pieces[space.getY()][space.getX()] = piece;
			markUpdate(space);
		}
	}

	/**
	 * Determines if a space contains a bomb
	 * 
	 * @param space Space to check
	 * @return True if the space contains a bomb
	 */
	
	public boolean isMine(Space space) {
		// not a valid space?
		if (!isValid(space)) {
			return false;
		}

		return mines[space.getY()][space.getX()];
	}

	/**
	 * Determines if a space appears enabled, or pressed up
	 * 
	 * @param space Space to check
	 * @return True if the space appears enabled
	 */
	
	public boolean isEnabled(Space space) {
		if (!isValid(space)) {
			return false;
		}

		Piece piece = getPiece(space);

		// if the space is empty, it pops up
		if (piece == null) {
			return true;
		}

		// otherwise go based on the contained value
		return piece.isEnabled();
	}

	/**
	 * Determines if the contents of a space can be replaced
	 * 
	 * @param space Space clicked
	 */
	
	private boolean isReplaceable(Space space) {
		// invalid spaces are always false
		if (!isValid(space)) {
			return false;
		}

		Piece piece = getPiece(space);

		// if the space is empty, it can be clicked
		if (piece == null) {
			return true;
		}

		// otherwise go based on the contained value
		return piece.isReplaceable();
	}

	/**
	 * Determines if the space is a number
	 * 
	 * @param space Space clicked
	 */
	
	private boolean isNumber(Space space) {
		// invalid spaces are always false
		if (!isValid(space)) {
			return false;
		}

		Piece piece = getPiece(space);

		// if the space is empty, it is not a number
		if (piece == null) {
			return false;
		}

		// otherwise go based on the contained value
		return piece.isNumber();
	}

	/* Data */

	/**
	 * Gets the width of the board
	 * 
	 * @return The width of the board
	 */
	
	public int getWidth() {
		return width;
	}

	/**
	 * Gets the height of the board
	 * 
	 * @return The height of the board
	 */
	
	public int getHeight() {
		return height;
	}

	/**
	 * Gets the number of mines left on the board
	 * 
	 * @return number of mines remaining
	 */
	
	public int getRemainingMines() {
		return data.mineCount - flagCount;
	}

	/**
	 * Checks if the player has used their cheat
	 * 
	 * @return if the player has used their cheat
	 */
	
	public boolean canCheat() {
		return cheats > 0;
	}

	/**
	 * Checks how many cheats the player has left
	 * 
	 * @return remaining cheats
	 */
	
	public int getCheats() {
		return cheats;
	}

	/**
	 * Checks if the game ended
	 * 
	 * @return true if the game ended
	 */
	
	public boolean gameOver() {
		return gameOver;
	}

	/**
	 * Checks if the player won the game
	 * 
	 * @return true if the player won the game
	 */
	
	public boolean hasWon() {
		return victory;
	}

	/**
	 * Checks if a space is within the bounds of this board
	 * 
	 * @param space Space to check
	 * @return true if the space is within this board
	 */
	
	public boolean isValid(Space space) {
		// no space?
		if (space == null) {
			return false;
		}

		// first, check if the space is entirely invalid
		if (space.getX() < 0 || space.getY() < 0) {
			return false;
		}

		// next, check if this is outside of this board
		if (space.getY() >= height || space.getX() >= width) {
			return false;
		}

		// fits in both? return true then
		return true;
	}

	/**
	 * Gets a list of spaces pending updates to update the button displays
	 * 
	 * @return a list of spaces needing an update
	 */
	
	public Queue<Space> getUpdates() {
		return update;
	}

	/**
	 * Actions that can be performed on click. Used by buttons to pass along a
	 * constant rather than a list of modifiers.
	 */
	
	public enum ClickAction {
		/** Normal click */
		DEFAULT,
		/** Placing a flag or mark */
		FLAG,
		/** Placing a mark of different colors */
		MARK,
		/** Safely clicking a mine */
		CHEAT;
	}
}
]]></snapshot>
  </Command>
  <Command __id="7" _type="MoveCaretCommand" caretOffset="0" docOffset="0" timestamp="94512" />
  <Command __id="8" _type="FileOpenCommand" docASTNodeCount="260" docActiveCodeLength="2374" docExpressionCount="151" docLength="3681" projectName="MineSweeper" timestamp="103759">
    <filePath><![CDATA[C:\Users\Eye-tracking\git\MineSweeper-Experiment\src\logic\MineSweeper.java]]></filePath>
  </Command>
  <Command __id="9" _type="MoveCaretCommand" caretOffset="888" docOffset="1000" timestamp="103803" />
  <Command __id="10" _type="FileOpenCommand" docASTNodeCount="1774" docActiveCodeLength="10622" docExpressionCount="1044" docLength="19648" projectName="MineSweeper" timestamp="108367">
    <filePath><![CDATA[C:\Users\Eye-tracking\git\MineSweeper-Experiment\src\logic\MineSweeperBoard.java]]></filePath>
  </Command>
  <Command __id="11" _type="MoveCaretCommand" caretOffset="0" docOffset="0" timestamp="108404" />
  <Command __id="12" _type="MoveCaretCommand" caretOffset="367" docOffset="687" timestamp="114265" />
  <Command __id="13" _type="FileOpenCommand" docASTNodeCount="43" docActiveCodeLength="235" docExpressionCount="27" docLength="235" projectName="MineSweeper" timestamp="130541">
    <filePath><![CDATA[C:\Users\Eye-tracking\git\MineSweeper-Experiment\src\logic\MineGenerator.java]]></filePath>
    <snapshot><![CDATA[package logic;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;

import util.Space;

public class MineGenerator {
	public int mineCount;

	public MineGenerator() {
	}
}]]></snapshot>
  </Command>
  <Command __id="14" _type="MoveCaretCommand" caretOffset="0" docOffset="0" timestamp="130607" />
  <Command __id="15" _type="FileOpenCommand" docASTNodeCount="1774" docActiveCodeLength="10622" docExpressionCount="1044" docLength="19648" projectName="MineSweeper" timestamp="134342">
    <filePath><![CDATA[C:\Users\Eye-tracking\git\MineSweeper-Experiment\src\logic\MineSweeperBoard.java]]></filePath>
  </Command>
  <Command __id="16" _type="MoveCaretCommand" caretOffset="367" docOffset="687" timestamp="134506" />
  <Command __id="17" _type="MoveCaretCommand" caretOffset="1049" docOffset="1541" timestamp="154305" />
  <Command __id="18" _type="FileOpenCommand" docASTNodeCount="1297" docActiveCodeLength="11112" docExpressionCount="863" docLength="13984" projectName="MineSweeper" timestamp="212901">
    <filePath><![CDATA[C:\Users\Eye-tracking\git\MineSweeper-Experiment\src\presentation\MineSweeperGui.java]]></filePath>
    <snapshot><![CDATA[package presentation;
import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import java.io.File;
import java.net.URL;
import java.util.Queue;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;

import logic.Help;
import logic.MineSweeper;
import logic.MineSweeperBoard;
import util.Space;

/**
 * Main GUI object for Minesweeper games. Called when gameplay is ready
 *
 * @author  KnightMiner
 */

public class MineSweeperGui extends JFrame implements ActionListener {
    // data
    private MineSweeperBoard board;

    // states
    private boolean isCheating;

    // buttons and labels
    private JLabel mines;
    private MineButton[][] buttons;

    private JButton buttonNewGame;
    private JButton buttonCheat;

    // menus
    private JMenuBar bar;
    private JMenu menuMineSweeper;

    private JMenu menuNewGame;
    private JMenuItem buttonRestart;
    private JMenuItem buttonSave;
    private JMenuItem buttonLoad;
    private JMenuItem buttonExit;

    private JMenu menuHelp;
    private JMenuItem buttonRules;
    private JMenuItem buttonMenu;
    private JMenuItem buttonDifficulty;

    /**
     * Makes a new minesweaper window
     * @param board  Input board, the display will take the size and pieces on the board
     */
    
    public MineSweeperGui(MineSweeperBoard board) {
        this.setTitle("MineSweeper");
        this.board = board;

        // construct the top menu
        bar = new JMenuBar();
        setJMenuBar(bar);

        // miscelanous actions
        menuMineSweeper = new JMenu("MineSweeper");
        bar.add(menuMineSweeper);

        // new game menu
        menuNewGame = new JMenu("New Game");
        menuMineSweeper.add(menuNewGame);

        // add all difficulties
        for(MineSweeper.Difficulty difficulty : MineSweeper.Difficulty.values()) {
            DifficultyButton button = new DifficultyButton(difficulty);
            menuNewGame.add(button);
        }


        // restarts the current game
        buttonRestart = new JMenuItem("Restart");
        buttonRestart.addActionListener(this);
        menuMineSweeper.add(buttonRestart);

        // saves the current game
        buttonSave = new JMenuItem("Save game");
        buttonSave.addActionListener(this);
        menuMineSweeper.add(buttonSave);

        // loads a new game from a file
        buttonLoad = new JMenuItem("Load game");
        buttonLoad.addActionListener(this);
        menuMineSweeper.add(buttonLoad);

        // exits the game
        menuMineSweeper.addSeparator();
        buttonExit = new JMenuItem("Exit");
        buttonExit.addActionListener(this);
        menuMineSweeper.add(buttonExit);

        // help menu
        menuHelp = new JMenu("Help");
        bar.add(menuHelp);

        // shows the rules
        buttonRules = new JMenuItem("Rules");
        buttonRules.addActionListener(this);
        menuHelp.add(buttonRules);

        // shows help about the menu
        buttonMenu = new JMenuItem("Menus");
        buttonMenu.addActionListener(this);
        menuHelp.add(buttonMenu);

        // shows available difficulties
        buttonDifficulty = new JMenuItem("Difficulties");
        buttonDifficulty.addActionListener(this);
        menuHelp.add(buttonDifficulty);


        // GUI Layout

        // gives use four regions and a center
        Container pane = getContentPane();
        pane.setLayout(new BorderLayout());


        // new game with same dimensions
        buttonNewGame = new JButton("New game");
        buttonNewGame.addActionListener(this);

        // remaining mines display
        mines = new JLabel("Mines", SwingConstants.CENTER);
        updateMines();

        // top row of the board
        Container top = new Container();
        top.setLayout(new GridLayout(1, 3));
        top.add(mines);
        top.add(buttonNewGame);


        // cheating, skip if 0 cheats to start
        if(board.canCheat()) {
            buttonCheat = new JButton();
            updateCheat();
            buttonCheat.addActionListener(this);
            top.add(buttonCheat);
        } else {
            top.add(new JLabel(""));
        }

        top.setPreferredSize(new Dimension(20, top.getFontMetrics(buttonNewGame.getFont()).getHeight() * 2));

        pane.add(top, BorderLayout.NORTH);


        // main button grid
        Container minesContainer = new Container();
        int width2 = board.getWidth();
        int height2 = board.getHeight();
        minesContainer.setLayout(new GridLayout(height2, width2));
        buttons = new MineButton[height2][width2];

        // and add them all
        for(int y = 0; y < height2; y++) {
            for(int x = 0; x < width2; x++) {
                // add buttons, and store them
                buttons[y][x] = new MineButton(this, board, new Space(x, y));
                minesContainer.add(buttons[y][x]);
            }
        }

        pane.add(minesContainer, BorderLayout.CENTER);


        // sizes, we need them for the top bar
        int width = board.getWidth() * 40;
        int height = board.getHeight() * 40 + 100;

        setSize(width, height);
        setVisible(true);

        // eventually I will replace this with an event that fires a prompt
        // basically, allow the user to save their game before quitting
        setDefaultCloseOperation(EXIT_ON_CLOSE);
    }

    /**
     * Gets a MineButton at the specified location
     * @param space  Location of the button
     * @return  the button at the location
     */
    
    public MineButton getButton(Space space) {
        if(!board.isValid(space)) {
            return null;
        }
        return buttons[space.getY()][space.getX()];
    }

    /**
     * Updates all spaces pending update to display their current value
     */
    
    public void updateSpaces() {
        Queue<Space> queue = board.getUpdates();
        while(!queue.isEmpty()) {
            Space space = queue.poll();
            MineButton update = getButton(space);
            if(update != null) {
                update.updatePiece();
            }
        }

        updateMines();
    }

    /**
     * Updates the mines display
     */
    
    public void updateMines() {
        mines.setText(String.format("Mines: %d", board.getRemainingMines()));
    }

    /**
     * Sets the cheat status
     * @param cheat  Whether the user is in cheat mode
     */
    
    private void setCheating(boolean cheat) {
        // and change the button text
        if(cheat) {
            buttonCheat.setText("Cancel cheat");
            isCheating = true;
        }
        // otherwise, run general cheating code
        else {
            updateCheat();
        }
    }

    /**
     * Sets the cheat button to used
     */
    
    public void updateCheat() {
        // if we can cheat, set the label
        if(board.canCheat()) {
            buttonCheat.setText("Cheats: " + board.getCheats());
            buttonCheat.setEnabled(true);
        }
        // otherwise, set the out of cheats label
        else {
            buttonCheat.setText("Out of cheats");
            buttonCheat.setEnabled(false);
        }
        isCheating = false;
    }

    /**
     * Sets the cheat button to used
     */
    
    public void resetButtons() {
        buttonNewGame.setText("New game");

        updateCheat();
        updateSpaces();
    }

    /**
     * Sets the winning text
     * @param victory  Whether the player won
     */
    
    public void gameOver(boolean victory) {
        if(victory) {
            buttonNewGame.setText("You Win!");
        }
        else {
            buttonNewGame.setText("You Lose");
        }
    }

    /**
     * Checks if the cheat button is active
     * @return  true if the cheat button is active
     */
    
    public boolean isCheating() {
        return isCheating;
    }

    /**
     * Called when the 'X' button is pressed on the window
     * @param e  Event the button is called with
     */
    
    public void windowClosing(WindowEvent e) {
        // simply run the menu
        //this.menu();
    }

    /**
     * Handles all single instance buttons
     * @param e  Calling event
     */
    
    @Override
    public void actionPerformed(ActionEvent e) {
        Object button = e.getSource();

        // restart the current game
        if(button == buttonNewGame) {
            // make the board new
            board.newGame();

            // and clear game data
            resetButtons();
            return;
        }

        // restart the current game
        if(button == buttonRestart) {
            // make the board new
            board.restart();

            // and clear game data
            resetButtons();
            return;
        }

        // saves the game
        if(button == buttonSave) {
            String filename = JOptionPane.showInputDialog(this,
                    "Enter filename to save game",
                    "MineSweeper - Save game",
                    JOptionPane.QUESTION_MESSAGE
                    );

            // user canceled
            if(filename == null || filename.equals("")) {
                return;
            }

            // if it exists, prompt to continue
            if(new File(filename + ".bin").exists()) {
                int result = JOptionPane.showConfirmDialog(this,
                        "Save game " + filename + " already exists, overwrite?",
                        "MineSweeper - Save game",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.ERROR_MESSAGE
                        );

                if(result != JOptionPane.YES_OPTION) {
                    return;
                }
            }

            board.saveGame(filename);
        }

        // loads the game
        if(button == buttonLoad) {
            String filename = JOptionPane.showInputDialog(this,
                    "Enter filename to load game",
                    "MineSweeper - Load game",
                    JOptionPane.QUESTION_MESSAGE
                    );

            // user canceled
            if(filename == null || filename.equals("")) {
                return;
            }

            // if it exists, prompt to continue
            if(new File(filename + ".bin").exists()) {
                MineSweeperBoard board = MineSweeperBoard.loadGame(filename);
                if(board != null) {
                    MineSweeper.startGame(board);
                }
                // did not load right
                else {
                    JOptionPane.showMessageDialog(this,
                            "Error reading save game " + filename,
                            "MineSweeper - Load game",
                            JOptionPane.ERROR_MESSAGE
                            );
                }
            }
            else {
                // file does not exist
                JOptionPane.showMessageDialog(this,
                        "Saved game " + filename + " does not exist",
                        "MineSweeper - Load game",
                        JOptionPane.ERROR_MESSAGE
                        );
            }
        }

        // cheat button
        if(button == buttonCheat) {
            // no cheating too many times
            if(!board.canCheat()) {
                return;
            }

            // toggle cheating
            setCheating(!isCheating);
            return;
        }

        // cheat button
        if(button == buttonExit) {
            this.dispose();
            return;
        }


        /* Help */

        // rules
        if(button == buttonRules) {
            Help.showRules(this);
        }

        // menus
        if(button == buttonMenu) {
            Help.menuHelp(this);
        }

        // rules
        if(button == buttonDifficulty) {
            Help.difficultyHelp(this);
        }
    }

    /**
     * Returns an ImageIcon, or null if the path was invalid.
     * @author  Larry Vail
     * @param  path  Icon path
     * @param  description  Basic description of the icon
     * @return  Returns the icon at the path, or null if the path is invalid
     */
    
    protected ImageIcon createImageIcon(String path, String description) {
        URL imgURL = getClass().getResource(path);
        if (imgURL != null) {
            return new ImageIcon(imgURL, description);
        } else {
            System.err.println("Couldn't find file: " + path);
            return null;
        }
    }

    /**
     * Common code for difficulty buttons
     */
    
    private class DifficultyButton extends JMenuItem implements ActionListener {
        // data
        private MineSweeper.Difficulty difficulty;

        public DifficultyButton(MineSweeper.Difficulty difficulty) {
            super(difficulty.getLabel());

            this.difficulty = difficulty;
            this.addActionListener(this);
        }

        /**
         * Called when the button is clicked
         */
        
        @Override
        public void actionPerformed(ActionEvent e) {
            MineSweeper.newGame(difficulty);
        }
    }
}
]]></snapshot>
  </Command>
  <Command __id="19" _type="MoveCaretCommand" caretOffset="0" docOffset="0" timestamp="213012" />
  <Command __id="20" _type="FileOpenCommand" docASTNodeCount="260" docActiveCodeLength="2374" docExpressionCount="151" docLength="3681" projectName="MineSweeper" timestamp="226774">
    <filePath><![CDATA[C:\Users\Eye-tracking\git\MineSweeper-Experiment\src\logic\MineSweeper.java]]></filePath>
  </Command>
  <Command __id="21" _type="MoveCaretCommand" caretOffset="888" docOffset="1000" timestamp="226812" />
  <Command __id="22" _type="FileOpenCommand" docASTNodeCount="1297" docActiveCodeLength="11112" docExpressionCount="863" docLength="13984" projectName="MineSweeper" timestamp="228458">
    <filePath><![CDATA[C:\Users\Eye-tracking\git\MineSweeper-Experiment\src\presentation\MineSweeperGui.java]]></filePath>
  </Command>
  <Command __id="23" _type="MoveCaretCommand" caretOffset="0" docOffset="0" timestamp="228497" />
  <Command __id="24" _type="RunCommand" kind="Create" projectName="MineSweeper" timestamp="234112" type="Run" />
  <Command __id="25" _type="MoveCaretCommand" caretOffset="1309" docOffset="2097" timestamp="271257" />
  <Command __id="26" _type="MoveCaretCommand" caretOffset="1250" docOffset="2038" timestamp="275129" />
  <Command __id="27" _type="MoveCaretCommand" caretOffset="1749" docOffset="2537" timestamp="289753" />
  <Command __id="28" _type="RunCommand" kind="Create" projectName="MineSweeper" timestamp="293116" type="Run" />
  <Command __id="29" _type="RunCommand" exitValue="0" kind="Terminate" projectName="MineSweeper" timestamp="304609" type="Run" />
  <Command __id="30" _type="RunCommand" kind="Create" projectName="MineSweeper" timestamp="308001" type="Run" />
  <Command __id="31" _type="EclipseCommand" commandID="org.eclipse.search.ui.openSearchDialog" timestamp="321604" />
  <Command __id="32" _type="EclipseCommand" commandID="org.eclipse.search.ui.openSearchDialog" timestamp="330617" />
  <Command __id="33" _type="RunCommand" exitValue="0" kind="Terminate" projectName="MineSweeper" timestamp="350491" type="Run" />
  <Command __id="34" _type="SelectTextCommand" caretOffset="3232" docEnd="4058" docOffset="4020" docStart="4020" end="3270" start="3232" timestamp="405234" />
  <Command __id="35" _type="CopyCommand" timestamp="405719" />
  <Command __id="36" _type="MoveCaretCommand" caretOffset="2518" docOffset="3306" timestamp="412978" />
  <Command __id="37" _type="MoveCaretCommand" caretOffset="1101" docOffset="1889" timestamp="424801" />
  <Command __id="39" _type="FindCommand" caseSensitive="false" forward="true" matchWord="false" offset="1889" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="430694" wrapSearch="true">
    <searchString><![CDATA[help]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="40" _type="MoveCaretCommand" caretOffset="1278" docOffset="2066" timestamp="463632" />
  <Command __id="41" _type="SelectTextCommand" caretOffset="3232" docEnd="4058" docOffset="4020" docStart="4020" end="3270" start="3232" timestamp="471514" />
  <Command __id="42" _type="CopyCommand" timestamp="475095" />
  <Command __id="43" _type="MoveCaretCommand" caretOffset="1334" docOffset="2122" timestamp="480169" />
  <DocumentChange __id="44" _type="Insert" docASTNodeCount="1297" docActiveCodeLength="11122" docExpressionCount="863" docLength="13994" length="10" offset="2122" timestamp="481305">
    <text><![CDATA[
        ]]></text>
  </DocumentChange>
  <Command __id="45" _type="InsertStringCommand" timestamp="481322">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="46" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" timestamp="481773" />
  <DocumentChange __id="47" _type="Insert" docASTNodeCount="1297" docActiveCodeLength="11122" docExpressionCount="863" docLength="13994" length="38" offset="2122" timestamp="482382">
    <text><![CDATA[buttonNewGame.addActionListener(this);]]></text>
  </DocumentChange>
  <Command __id="48" _type="PasteCommand" timestamp="482391" />
  <Command __id="49" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" timestamp="486280" />
  <Command __id="50" _type="RunCommand" kind="Create" projectName="MineSweeper" timestamp="487767" type="Run" />
  <Command __id="51" _type="RunCommand" exitValue="1" kind="Terminate" projectName="MineSweeper" timestamp="489193" type="Run" />
  <Command __id="52" _type="RunCommand" exitValue="0" kind="Terminate" projectName="MineSweeper" timestamp="490224" type="Run" />
  <Command __id="53" _type="RunCommand" kind="Create" projectName="MineSweeper" timestamp="498169" type="Run" />
  <Command __id="54" _type="RunCommand" exitValue="1" kind="Terminate" projectName="MineSweeper" timestamp="499595" type="Run" />
  <Command __id="55" _type="SelectTextCommand" caretOffset="1334" docEnd="2160" docOffset="2122" docStart="2122" end="1372" start="1334" timestamp="509345" />
  <Command __id="56" _type="MoveCaretCommand" caretOffset="1417" docOffset="2205" timestamp="509777" />
  <Command __id="57" _type="MoveCaretCommand" caretOffset="1252" docOffset="2040" timestamp="524209" />
  <Command __id="58" _type="SelectTextCommand" caretOffset="1326" docEnd="2160" docOffset="2114" docStart="2114" end="1372" start="1326" timestamp="527041" />
  <DocumentChange __id="59" _type="Delete" docASTNodeCount="1297" docActiveCodeLength="11112" docExpressionCount="863" docLength="13984" endLine="81" length="48" offset="2112" repeat="2" startLine="80" timestamp="528132" timestamp2="528343">
    <text><![CDATA[
        buttonNewGame.addActionListener(this);]]></text>
  </DocumentChange>
  <Command __id="60" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" repeat="2" timestamp="528136" timestamp2="528347" />
  <Command __id="63" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" timestamp="529182" />
  <Command __id="64" _type="RunCommand" kind="Create" projectName="MineSweeper" timestamp="530554" type="Run" />
  <Command __id="65" _type="RunCommand" exitValue="0" kind="Terminate" projectName="MineSweeper" timestamp="543387" type="Run" />
  <Command __id="66" _type="FileOpenCommand" docASTNodeCount="578" docActiveCodeLength="4045" docExpressionCount="391" docLength="4555" projectName="MineSweeper" timestamp="550651">
    <filePath><![CDATA[C:\Users\Eye-tracking\git\MineSweeper-Experiment\src\presentation\CustomMenu.java]]></filePath>
    <snapshot><![CDATA[package presentation;

import java.awt.Container;
import java.awt.GridLayout;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.text.ParseException;
import java.util.function.IntSupplier;

import javax.swing.JFormattedTextField;
import javax.swing.JFormattedTextField.AbstractFormatter;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSlider;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import logic.MineSweeperBoard;

/**
 * Core panel for the custom game menu
 * <br>
 * Generally only one instance exists
 *
 * @author  KnightMiner
 */

public class CustomMenu extends JPanel implements ChangeListener, KeyListener {
    // data
    private JSlider width, height;
    private JFormattedTextField fieldMines, fieldCheats;
    private IntSupplier maxMines, maxCheats;

    /**
     * Default constructor
     */
    
    public CustomMenu() {
        // start with an empty spot
        setLayout(new GridLayout(6, 1));

        // next, create the sliders
        width = new Slider();
        height = new Slider();

        // then add them with the labels
        add(new JLabel("Width", JLabel.CENTER));
        width.addChangeListener(this);
        add(width);
        add(new JLabel("Height", JLabel.CENTER));
        height.addChangeListener(this);
        add(height);

        Container c = new Container();
        c.setLayout(new GridLayout(2, 2));
        c.add(new JLabel("Mines"));
        c.add(new JLabel("Cheats"));

        maxMines = () -> width.getValue() * height.getValue() - 9;
        Formatter format = new Formatter(maxMines);
        fieldMines = new JFormattedTextField(format);
        fieldMines.addKeyListener(this);
        fieldMines.setValue(10);
        c.add(fieldMines);

        maxCheats = () -> (int)Math.sqrt(width.getValue() * height.getValue());
        format = new Formatter(maxCheats);
        fieldCheats = new JFormattedTextField(format);
        fieldMines.addKeyListener(this);
        fieldCheats.setValue(1);
        c.add(fieldCheats);
        add(c);
    }

    /**
     * Gets the color result
     * @return  the color result
     */
    
    public MineSweeperBoard createBoard() {
        int mines = Integer.parseInt(fieldMines.getText());
        int cheats = Integer.parseInt(fieldCheats.getText());
        return new MineSweeperBoard(width.getValue(), height.getValue(), mines, cheats);
    }

    @Override
    public void stateChanged(ChangeEvent event) {
        if(((JSlider)event.getSource()).getValueIsAdjusting()) {
            return;
        }
        int max = maxMines.getAsInt();
        if((Integer)fieldMines.getValue() > max) {
            fieldMines.setValue(max);
        }
        max = maxCheats.getAsInt();
        if((Integer)fieldCheats.getValue() > max) {
            fieldCheats.setValue(max);
        }
    }

    @Override
    public void keyPressed(KeyEvent event) {}

    @Override
    public void keyReleased(KeyEvent event) {}

    @Override
    public void keyTyped(KeyEvent event) {
        // only numeric allowed
        char c = event.getKeyChar();
        if(c < '0' || c > '9') {
            event.consume();
        }
    }

    /**
     * Sets data used by both sliders
     */
    
    private class Slider extends JSlider {
        
        /**
         * General constructor
         */
        
        public Slider() {
            super(JSlider.HORIZONTAL, 5, 50, 10);

            this.setMajorTickSpacing(5);
            this.setMinorTickSpacing(1);
            this.setPaintTicks(true);
            this.setPaintLabels(true);
        }
    }

    private class Formatter extends AbstractFormatter {
        private IntSupplier max;
        public Formatter(IntSupplier max) {
            this.max = max;
        }

        @Override
        public Object stringToValue(String str) throws ParseException {
            // never need more than 4 characters
            int max = this.max.getAsInt();
            if(str.matches("[0-9]{5,}")) {
                return max;
            }
            // parse the value
            return Math.min(Integer.parseInt(str), max);
        }

        @Override
        public String valueToString(Object i) throws ParseException {
            if(i == null) {
                return "";
            }
            return i.toString();
        }
    }
}
]]></snapshot>
  </Command>
  <Command __id="67" _type="MoveCaretCommand" caretOffset="0" docOffset="0" timestamp="550727" />
  <Command __id="68" _type="FileOpenCommand" docASTNodeCount="425" docActiveCodeLength="3365" docExpressionCount="283" docLength="5048" projectName="MineSweeper" timestamp="553575">
    <filePath><![CDATA[C:\Users\Eye-tracking\git\MineSweeper-Experiment\src\presentation\MineButton.java]]></filePath>
    <snapshot><![CDATA[package presentation;
import java.awt.Graphics;
import java.awt.Insets;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;

import javax.swing.JButton;
import javax.swing.SwingUtilities;

import logic.MineSweeperBoard;
import util.Piece;
import util.Space;

/**
 * Custom buttons used for the main gameplay spaces, to allow accessing both
 * the board and location from the action listener
 * 
 * @author  KnightMiner
 */

public class MineButton extends JButton implements MouseListener {
    private MineSweeperGui gui;
    private MineSweeperBoard board;
    private Space space;

    // determines if the mouse is over this button
    boolean inArea;

    /**
     * Creates a new button
     * @param gui    GUI object containing the button
     * @param board  Board object containing the space
     * @param space  Location of the button on the board
     */
    
    public MineButton(MineSweeperGui gui, MineSweeperBoard board, Space space) {
        // data storage
        this.gui = gui;
        this.board = board;
        this.space = space;

        // fix odd spacing around the image
        this.setMargin(new Insets(0,0,0,0));

        // mouse listener so we can track right clicks and click the numbers
        this.addMouseListener(this);

        // stop the button from having the ugly selected boarder
        this.setFocusable(false);

        // when loading a game, display it immeditelly
        this.updatePiece();
    }

    /**
     * Draws the button with its icon
     */
    
    @Override
    public void paint(Graphics g) {
        super.paint(g);

        // safety
        if(board == null) {
            return;
        }

        // determine what we are drawing
        Piece piece = board.getPiece(space);
        if(piece != null && piece.getIcon() != null) {
            // calculate the position of the icon

            // dimensions should be square
            int size = Math.min(getWidth(), getHeight()) / 2;

            // and centered
            g.drawImage(piece.getIcon(),
                    (getWidth() - size) / 2,
                    (getHeight() - size) / 2,
                    size,
                    size,
                    null, null);
        }
    }

    /**
     * Returns the space this button represents
     * @return  The space this button represents
     */
    
    public Space getSpace() {
        return space;
    }

    /**
     * Returns the text displayed on the button
     * @return  The icon to display on this button
     */
    
    public void updatePiece() {
        if(board == null) {
            return;
        }

        setEnabled(board.isEnabled(space));

        repaint();
    }


    /**
     * Called when the mouse enters the area
     */
    
    @Override
    public void mouseEntered(MouseEvent e) {
        inArea = true;
    }

    /**
     * Called when the mouse exits the area
     */
    
    @Override
    public void mouseExited(MouseEvent e) {
        inArea = false;
    }

    /**
     * Called when the mouse is released
     */
    
    @Override
    public void mouseReleased(MouseEvent e) {
        // needs to still be in the component to click
        if(!inArea) {
            return;
        }

        // first, determine the click type
        MineSweeperBoard.ClickAction action = null;

        // shift click: toggle mark
        // left click: normal click
        if(SwingUtilities.isLeftMouseButton(e)) {
            // cheat button was pressed, so cheat click
            if(gui.isCheating()) {
                action = MineSweeperBoard.ClickAction.CHEAT;
            }
            // otherwise default click
            else {
                action = MineSweeperBoard.ClickAction.DEFAULT;
            }
        }
        // right clicks for flags
        else if(SwingUtilities.isRightMouseButton(e)) {
            // shift toggles the mark color
            if (e.isShiftDown()) {
                action = MineSweeperBoard.ClickAction.MARK;
            }
            // not shift does flags
            else {
                action = MineSweeperBoard.ClickAction.FLAG;
            }
        }


        // if we have an action (no middle click), click it
        if(action != null) {
            board.handleClick(this.getSpace(), action);

            // update spaces on the board
            gui.updateSpaces();

            // if we are out of cheats, mark that
            if(action == MineSweeperBoard.ClickAction.CHEAT) {
                gui.updateCheat();
            }
        }

        // set the win status if relevant
        if(board.gameOver()) {
            gui.gameOver(board.hasWon());
        }
    }

    // Required by the interface, but unused
    @Override
    public void mousePressed(MouseEvent e) {}
    
    @Override
    public void mouseClicked(MouseEvent e) {}

}
]]></snapshot>
  </Command>
  <Command __id="69" _type="MoveCaretCommand" caretOffset="0" docOffset="0" timestamp="553709" />
  <Command __id="70" _type="FileOpenCommand" docASTNodeCount="578" docActiveCodeLength="4045" docExpressionCount="391" docLength="4555" projectName="MineSweeper" timestamp="554920">
    <filePath><![CDATA[C:\Users\Eye-tracking\git\MineSweeper-Experiment\src\presentation\CustomMenu.java]]></filePath>
  </Command>
  <Command __id="71" _type="MoveCaretCommand" caretOffset="0" docOffset="0" timestamp="554975" />
  <Command __id="72" _type="FileOpenCommand" docASTNodeCount="1297" docActiveCodeLength="11112" docExpressionCount="863" docLength="13984" projectName="MineSweeper" timestamp="555984">
    <filePath><![CDATA[C:\Users\Eye-tracking\git\MineSweeper-Experiment\src\presentation\MineSweeperGui.java]]></filePath>
  </Command>
  <Command __id="73" _type="MoveCaretCommand" caretOffset="1324" docOffset="2112" timestamp="556057" />
  <Command __id="74" _type="FileOpenCommand" docASTNodeCount="1297" docActiveCodeLength="11112" docExpressionCount="863" docLength="13984" projectName="MineSweeper" timestamp="582302">
    <filePath><![CDATA[C:\Users\Eye-tracking\git\MineSweeper-Experiment\src\presentation\MineSweeperGui.java]]></filePath>
  </Command>
  <Command __id="75" _type="MoveCaretCommand" caretOffset="1252" docOffset="2040" timestamp="582358" />
  <Command __id="76" _type="FileOpenCommand" docASTNodeCount="425" docActiveCodeLength="3365" docExpressionCount="283" docLength="5048" projectName="MineSweeper" timestamp="586883">
    <filePath><![CDATA[C:\Users\Eye-tracking\git\MineSweeper-Experiment\src\presentation\MineButton.java]]></filePath>
  </Command>
  <Command __id="77" _type="MoveCaretCommand" caretOffset="0" docOffset="0" timestamp="586992" />
  <Command __id="78" _type="FileOpenCommand" docASTNodeCount="43" docActiveCodeLength="235" docExpressionCount="27" docLength="235" projectName="MineSweeper" timestamp="593776">
    <filePath><![CDATA[C:\Users\Eye-tracking\git\MineSweeper-Experiment\src\logic\MineGenerator.java]]></filePath>
  </Command>
  <Command __id="79" _type="MoveCaretCommand" caretOffset="0" docOffset="0" timestamp="593848" />
  <Command __id="80" _type="FileOpenCommand" docASTNodeCount="260" docActiveCodeLength="2374" docExpressionCount="151" docLength="3681" projectName="MineSweeper" timestamp="595240">
    <filePath><![CDATA[C:\Users\Eye-tracking\git\MineSweeper-Experiment\src\logic\MineSweeper.java]]></filePath>
  </Command>
  <Command __id="81" _type="MoveCaretCommand" caretOffset="888" docOffset="1000" timestamp="595303" />
  <Command __id="82" _type="FileOpenCommand" docASTNodeCount="1774" docActiveCodeLength="10622" docExpressionCount="1044" docLength="19648" projectName="MineSweeper" timestamp="603154">
    <filePath><![CDATA[C:\Users\Eye-tracking\git\MineSweeper-Experiment\src\logic\MineSweeperBoard.java]]></filePath>
  </Command>
  <Command __id="83" _type="MoveCaretCommand" caretOffset="1049" docOffset="1541" timestamp="603212" />
  <Command __id="84" _type="FileOpenCommand" docASTNodeCount="578" docActiveCodeLength="4045" docExpressionCount="391" docLength="4555" projectName="MineSweeper" timestamp="629336">
    <filePath><![CDATA[C:\Users\Eye-tracking\git\MineSweeper-Experiment\src\presentation\CustomMenu.java]]></filePath>
  </Command>
  <Command __id="85" _type="MoveCaretCommand" caretOffset="0" docOffset="0" timestamp="629423" />
  <Command __id="86" _type="FileOpenCommand" docASTNodeCount="1297" docActiveCodeLength="11112" docExpressionCount="863" docLength="13984" projectName="MineSweeper" timestamp="632763">
    <filePath><![CDATA[C:\Users\Eye-tracking\git\MineSweeper-Experiment\src\presentation\MineSweeperGui.java]]></filePath>
  </Command>
  <Command __id="87" _type="MoveCaretCommand" caretOffset="1252" docOffset="2040" timestamp="632825" />
  <Command __id="88" _type="MoveCaretCommand" caretOffset="1162" docOffset="1950" timestamp="640370" />
  <Command __id="89" _type="MoveCaretCommand" caretOffset="1242" docOffset="2030" timestamp="655865" />
  <Command __id="90" _type="RunCommand" kind="Create" projectName="MineSweeper" timestamp="681641" type="Run" />
  <Command __id="91" _type="MoveCaretCommand" caretOffset="1182" docOffset="1970" timestamp="691195" />
  <Command __id="92" _type="MoveCaretCommand" caretOffset="3128" docOffset="3916" timestamp="727529" />
  <Command __id="93" _type="MoveCaretCommand" caretOffset="3172" docOffset="3960" timestamp="753961" />
  <Command __id="94" _type="RunCommand" exitValue="0" kind="Terminate" projectName="MineSweeper" timestamp="757337" type="Run" />
  <Command __id="95" _type="RunCommand" kind="Create" projectName="MineSweeper" timestamp="758608" type="Run" />
  <Command __id="96" _type="MoveCaretCommand" caretOffset="3270" docOffset="4058" timestamp="778449" />
  <DocumentChange __id="97" _type="Insert" docASTNodeCount="1297" docActiveCodeLength="11122" docExpressionCount="863" docLength="13994" length="10" offset="4058" timestamp="778606">
    <text><![CDATA[
        ]]></text>
  </DocumentChange>
  <Command __id="98" _type="InsertStringCommand" timestamp="778611">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="99" _type="InsertStringCommand" timestamp="778611">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="100" _type="Insert" docASTNodeCount="1297" docActiveCodeLength="11132" docExpressionCount="863" docLength="14004" length="10" offset="4068" timestamp="778766">
    <text><![CDATA[
        ]]></text>
  </DocumentChange>
  <Command __id="101" _type="InsertStringCommand" timestamp="778771">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="102" _type="InsertStringCommand" timestamp="778771">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="103" _type="SelectTextCommand" caretOffset="3180" docEnd="4010" docOffset="3968" docStart="3968" end="3222" start="3180" timestamp="796010" />
  <Command __id="104" _type="SelectTextCommand" caretOffset="3183" docEnd="4058" docOffset="3971" docStart="3971" end="3270" start="3183" timestamp="799704" />
  <Command __id="105" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.SELECT_COLUMN_PREVIOUS" repeat="2" timestamp="800891" timestamp2="800891" />
  <Command __id="107" _type="CopyCommand" timestamp="801612" />
  <Command __id="108" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" repeat="6" timestamp="801869" timestamp2="802890" />
  <DocumentChange __id="114" _type="Insert" docASTNodeCount="1297" docActiveCodeLength="11142" docExpressionCount="863" docLength="14014" length="10" offset="4078" timestamp="803572">
    <text><![CDATA[
        ]]></text>
  </DocumentChange>
  <Command __id="115" _type="InsertStringCommand" timestamp="803577">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="116" _type="InsertStringCommand" timestamp="803577">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="117" _type="Insert" docASTNodeCount="1297" docActiveCodeLength="11152" docExpressionCount="863" docLength="14024" length="10" offset="4088" timestamp="804012">
    <text><![CDATA[
        ]]></text>
  </DocumentChange>
  <Command __id="118" _type="InsertStringCommand" timestamp="804023">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="119" _type="InsertStringCommand" timestamp="804023">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="120" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" repeat="2" timestamp="804347" timestamp2="804347" />
  <DocumentChange __id="122" _type="Insert" docASTNodeCount="1297" docActiveCodeLength="11152" docExpressionCount="863" docLength="14030" length="6" offset="4088" repeat="6" timestamp="804858" timestamp2="805554">
    <text><![CDATA[//test]]></text>
  </DocumentChange>
  <Command __id="123" _type="InsertStringCommand" repeat="12" timestamp="804860" timestamp2="805557">
    <data><![CDATA[////tteesstt]]></data>
  </Command>
  <DocumentChange __id="140" _type="Insert" docASTNodeCount="1297" docActiveCodeLength="11162" docExpressionCount="863" docLength="14040" length="10" offset="4094" timestamp="806124">
    <text><![CDATA[
        ]]></text>
  </DocumentChange>
  <Command __id="141" _type="InsertStringCommand" timestamp="806128">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="142" _type="InsertStringCommand" timestamp="806128">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="143" _type="Insert" docASTNodeCount="1297" docActiveCodeLength="11162" docExpressionCount="863" docLength="14040" length="88" offset="4104" timestamp="806429">
    <text><![CDATA[buttonNewGame = new JButton("New game");
        buttonNewGame.addActionListener(this);]]></text>
  </DocumentChange>
  <Command __id="144" _type="PasteCommand" timestamp="806435" />
  <Command __id="145" _type="SelectTextCommand" caretOffset="3345" docEnd="4141" docOffset="4133" docStart="4133" end="3353" start="3345" timestamp="809498" />
  <DocumentChange __id="146" _type="Delete" docASTNodeCount="1309" docActiveCodeLength="11242" docExpressionCount="872" docLength="14120" endLine="144" length="8" offset="4133" startLine="144" timestamp="810186">
    <text><![CDATA[New game]]></text>
  </DocumentChange>
  <Command __id="147" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" repeat="2" timestamp="810188" timestamp2="810188" />
  <DocumentChange __id="149" _type="Insert" docASTNodeCount="1309" docActiveCodeLength="11246" docExpressionCount="872" docLength="14124" length="4" offset="4133" repeat="4" timestamp="810299" timestamp2="810723">
    <text><![CDATA[test]]></text>
  </DocumentChange>
  <Command __id="150" _type="InsertStringCommand" repeat="8" timestamp="810302" timestamp2="810726">
    <data><![CDATA[tteesstt]]></data>
  </Command>
  <Command __id="161" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" timestamp="811373" />
  <Command __id="162" _type="RunCommand" kind="Create" projectName="MineSweeper" timestamp="813614" type="Run" />
  <Command __id="163" _type="RunCommand" exitValue="0" kind="Terminate" projectName="MineSweeper" timestamp="832813" type="Run" />
  <Command __id="164" _type="SelectTextCommand" caretOffset="3299" docEnd="4188" docOffset="4087" docStart="4087" end="3400" start="3299" timestamp="835010" />
  <DocumentChange __id="165" _type="Delete" docASTNodeCount="1297" docActiveCodeLength="11132" docExpressionCount="863" docLength="14004" endLine="145" length="120" offset="4068" repeat="18" startLine="141" timestamp="835771" timestamp2="840108">
    <text><![CDATA[
        
        //test
        buttonNewGame = new JButton("test");
        buttonNewGame.addActionListener(this);]]></text>
  </DocumentChange>
  <Command __id="166" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" repeat="36" timestamp="835777" timestamp2="840112" />
  <DocumentChange __id="219" _type="Delete" docASTNodeCount="1297" docActiveCodeLength="11122" docExpressionCount="863" docLength="13994" endLine="141" length="10" offset="4058" repeat="9" startLine="140" timestamp="842219" timestamp2="843978">
    <text><![CDATA[
        ]]></text>
  </DocumentChange>
  <Command __id="220" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" repeat="18" timestamp="842222" timestamp2="843982" />
  <Command __id="246" _type="FileOpenCommand" docASTNodeCount="425" docActiveCodeLength="3365" docExpressionCount="283" docLength="5048" projectName="MineSweeper" timestamp="848008">
    <filePath><![CDATA[C:\Users\Eye-tracking\git\MineSweeper-Experiment\src\presentation\MineButton.java]]></filePath>
  </Command>
  <Command __id="247" _type="MoveCaretCommand" caretOffset="0" docOffset="0" timestamp="848074" />
  <Command __id="248" _type="MoveCaretCommand" caretOffset="490" docOffset="1524" timestamp="849641" />
  <Command __id="249" _type="FileOpenCommand" docASTNodeCount="578" docActiveCodeLength="4045" docExpressionCount="391" docLength="4555" projectName="MineSweeper" timestamp="853145">
    <filePath><![CDATA[C:\Users\Eye-tracking\git\MineSweeper-Experiment\src\presentation\CustomMenu.java]]></filePath>
  </Command>
  <Command __id="250" _type="MoveCaretCommand" caretOffset="0" docOffset="0" timestamp="853208" />
  <Command __id="251" _type="FileOpenCommand" docASTNodeCount="260" docActiveCodeLength="2374" docExpressionCount="151" docLength="3681" projectName="MineSweeper" timestamp="858227">
    <filePath><![CDATA[C:\Users\Eye-tracking\git\MineSweeper-Experiment\src\logic\MineSweeper.java]]></filePath>
  </Command>
  <Command __id="252" _type="MoveCaretCommand" caretOffset="888" docOffset="1000" timestamp="858294" />
  <Command __id="253" _type="FileOpenCommand" docASTNodeCount="1774" docActiveCodeLength="10622" docExpressionCount="1044" docLength="19648" projectName="MineSweeper" timestamp="863114">
    <filePath><![CDATA[C:\Users\Eye-tracking\git\MineSweeper-Experiment\src\logic\MineSweeperBoard.java]]></filePath>
  </Command>
  <Command __id="254" _type="MoveCaretCommand" caretOffset="1049" docOffset="1541" timestamp="863155" />
  <Command __id="255" _type="FileOpenCommand" docASTNodeCount="260" docActiveCodeLength="2374" docExpressionCount="151" docLength="3681" projectName="MineSweeper" timestamp="864531">
    <filePath><![CDATA[C:\Users\Eye-tracking\git\MineSweeper-Experiment\src\logic\MineSweeper.java]]></filePath>
  </Command>
  <Command __id="256" _type="MoveCaretCommand" caretOffset="888" docOffset="1000" timestamp="864606" />
  <Command __id="257" _type="FileOpenCommand" docASTNodeCount="1297" docActiveCodeLength="11122" docExpressionCount="863" docLength="13994" projectName="MineSweeper" timestamp="865483">
    <filePath><![CDATA[C:\Users\Eye-tracking\git\MineSweeper-Experiment\src\presentation\MineSweeperGui.java]]></filePath>
  </Command>
  <Command __id="258" _type="MoveCaretCommand" caretOffset="3270" docOffset="4058" timestamp="865520" />
  <Command __id="259" _type="FileOpenCommand" docASTNodeCount="260" docActiveCodeLength="2374" docExpressionCount="151" docLength="3681" projectName="MineSweeper" timestamp="868854">
    <filePath><![CDATA[C:\Users\Eye-tracking\git\MineSweeper-Experiment\src\logic\MineSweeper.java]]></filePath>
  </Command>
  <Command __id="260" _type="MoveCaretCommand" caretOffset="888" docOffset="1000" timestamp="868887" />
  <Command __id="261" _type="FileOpenCommand" docASTNodeCount="1297" docActiveCodeLength="11122" docExpressionCount="863" docLength="13994" projectName="MineSweeper" timestamp="870388">
    <filePath><![CDATA[C:\Users\Eye-tracking\git\MineSweeper-Experiment\src\presentation\MineSweeperGui.java]]></filePath>
  </Command>
  <Command __id="262" _type="MoveCaretCommand" caretOffset="3270" docOffset="4058" timestamp="870423" />
  <Command __id="263" _type="EclipseCommand" commandID="org.eclipse.search.ui.openSearchDialog" timestamp="892166" />
  <Command __id="265" _type="SelectTextCommand" caretOffset="1288" docEnd="2086" docOffset="2076" docStart="2076" end="1298" start="1288" timestamp="989816" />
  <Command __id="266" _type="SelectTextCommand" caretOffset="1288" docEnd="2087" docOffset="2076" docStart="2076" end="1299" start="1288" timestamp="992473" />
  <Command __id="267" _type="CopyCommand" timestamp="994879" />
  <Command __id="268" _type="SelectTextCommand" caretOffset="3569" docEnd="4370" docOffset="4357" docStart="4357" end="3582" start="3569" timestamp="1008201" />
  <DocumentChange __id="269" _type="Replace" docASTNodeCount="1297" docActiveCodeLength="11120" docExpressionCount="863" docLength="13992" endLine="151" insertionLength="11" int_docASTNodeCount="1296" int_docActiveCodeLength="11109" int_docExpressionCount="862" int_docLength="13981" length="13" offset="4357" startLine="151" timestamp="1008757">
    <deletedText><![CDATA[buttonNewGame]]></deletedText>
    <insertedText><![CDATA[menuNewGame]]></insertedText>
  </DocumentChange>
  <Command __id="270" _type="PasteCommand" timestamp="1008764" />
  <Command __id="271" _type="RunCommand" kind="Create" projectName="MineSweeper" timestamp="1013428" type="Run" />
  <Command __id="272" _type="RunCommand" exitValue="0" kind="Terminate" projectName="MineSweeper" timestamp="1021742" type="Run" />
  <DocumentChange __id="273" _type="Replace" docASTNodeCount="1297" docActiveCodeLength="11122" docExpressionCount="863" docLength="13994" endLine="151" insertionLength="13" int_docASTNodeCount="1296" int_docActiveCodeLength="11109" int_docExpressionCount="862" int_docLength="13981" length="11" offset="4357" startLine="151" timestamp="1022715">
    <deletedText><![CDATA[menuNewGame]]></deletedText>
    <insertedText><![CDATA[buttonNewGame]]></insertedText>
  </DocumentChange>
  <Command __id="274" _type="UndoCommand" timestamp="1022726" />
  <Command __id="275" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" timestamp="1023263" />
  <Command __id="276" _type="FileOpenCommand" docASTNodeCount="43" docActiveCodeLength="235" docExpressionCount="27" docLength="235" projectName="MineSweeper" timestamp="1045896">
    <filePath><![CDATA[C:\Users\Eye-tracking\git\MineSweeper-Experiment\src\logic\MineGenerator.java]]></filePath>
  </Command>
  <Command __id="277" _type="MoveCaretCommand" caretOffset="0" docOffset="0" timestamp="1045959" />
  <Command __id="278" _type="FileOpenCommand" docASTNodeCount="1297" docActiveCodeLength="11122" docExpressionCount="863" docLength="13994" projectName="MineSweeper" timestamp="1048283">
    <filePath><![CDATA[C:\Users\Eye-tracking\git\MineSweeper-Experiment\src\presentation\MineSweeperGui.java]]></filePath>
  </Command>
  <Command __id="279" _type="SelectTextCommand" caretOffset="3582" docEnd="4370" docOffset="4370" docStart="4357" end="3582" start="3569" timestamp="1048338" />
  <Command __id="280" _type="FileOpenCommand" docASTNodeCount="578" docActiveCodeLength="4045" docExpressionCount="391" docLength="4555" projectName="MineSweeper" timestamp="1049392">
    <filePath><![CDATA[C:\Users\Eye-tracking\git\MineSweeper-Experiment\src\presentation\CustomMenu.java]]></filePath>
  </Command>
  <Command __id="281" _type="MoveCaretCommand" caretOffset="0" docOffset="0" timestamp="1049427" />
  <Command __id="282" _type="FileOpenCommand" docASTNodeCount="260" docActiveCodeLength="2374" docExpressionCount="151" docLength="3681" projectName="MineSweeper" timestamp="1051074">
    <filePath><![CDATA[C:\Users\Eye-tracking\git\MineSweeper-Experiment\src\logic\MineSweeper.java]]></filePath>
  </Command>
  <Command __id="283" _type="MoveCaretCommand" caretOffset="888" docOffset="1000" timestamp="1051111" />
  <Command __id="284" _type="FileOpenCommand" docASTNodeCount="1297" docActiveCodeLength="11122" docExpressionCount="863" docLength="13994" projectName="MineSweeper" timestamp="1063356">
    <filePath><![CDATA[C:\Users\Eye-tracking\git\MineSweeper-Experiment\src\presentation\MineSweeperGui.java]]></filePath>
  </Command>
  <Command __id="285" _type="SelectTextCommand" caretOffset="3582" docEnd="4370" docOffset="4370" docStart="4357" end="3582" start="3569" timestamp="1063397" />
  <Command __id="286" _type="FileOpenCommand" docASTNodeCount="425" docActiveCodeLength="3365" docExpressionCount="283" docLength="5048" projectName="MineSweeper" timestamp="1064425">
    <filePath><![CDATA[C:\Users\Eye-tracking\git\MineSweeper-Experiment\src\presentation\MineButton.java]]></filePath>
  </Command>
  <Command __id="287" _type="MoveCaretCommand" caretOffset="490" docOffset="1524" timestamp="1064460" />
  <Command __id="288" _type="MoveCaretCommand" caretOffset="130" docOffset="461" timestamp="1072072" />
  <Command __id="289" _type="FileOpenCommand" docASTNodeCount="578" docActiveCodeLength="4045" docExpressionCount="391" docLength="4555" projectName="MineSweeper" timestamp="1079585">
    <filePath><![CDATA[C:\Users\Eye-tracking\git\MineSweeper-Experiment\src\presentation\CustomMenu.java]]></filePath>
  </Command>
  <Command __id="290" _type="MoveCaretCommand" caretOffset="0" docOffset="0" timestamp="1079624" />
  <Command __id="291" _type="FileOpenCommand" docASTNodeCount="425" docActiveCodeLength="3365" docExpressionCount="283" docLength="5048" projectName="MineSweeper" timestamp="1086241">
    <filePath><![CDATA[C:\Users\Eye-tracking\git\MineSweeper-Experiment\src\presentation\MineButton.java]]></filePath>
  </Command>
  <Command __id="292" _type="MoveCaretCommand" caretOffset="130" docOffset="461" timestamp="1086280" />
  <Command __id="293" _type="RunCommand" kind="Create" projectName="MineSweeper" timestamp="1128389" type="Run" />
  <Command __id="294" _type="FileOpenCommand" docASTNodeCount="260" docActiveCodeLength="2374" docExpressionCount="151" docLength="3681" projectName="MineSweeper" timestamp="1131119">
    <filePath><![CDATA[C:\Users\Eye-tracking\git\MineSweeper-Experiment\src\logic\MineSweeper.java]]></filePath>
  </Command>
  <Command __id="295" _type="MoveCaretCommand" caretOffset="888" docOffset="1000" timestamp="1131176" />
  <Command __id="296" _type="FileOpenCommand" docASTNodeCount="1297" docActiveCodeLength="11122" docExpressionCount="863" docLength="13994" projectName="MineSweeper" timestamp="1132734">
    <filePath><![CDATA[C:\Users\Eye-tracking\git\MineSweeper-Experiment\src\presentation\MineSweeperGui.java]]></filePath>
  </Command>
  <Command __id="297" _type="SelectTextCommand" caretOffset="3582" docEnd="4370" docOffset="4370" docStart="4357" end="3582" start="3569" timestamp="1132768" />
  <Command __id="298" _type="RunCommand" exitValue="0" kind="Terminate" projectName="MineSweeper" timestamp="1136697" type="Run" />
  <Command __id="299" _type="RunCommand" exitValue="0" kind="Terminate" projectName="MineSweeper" timestamp="1138495" type="Run" />
  <Command __id="300" _type="RunCommand" kind="Create" projectName="MineSweeper" timestamp="1139925" type="Run" />
  <Command __id="301" _type="FileOpenCommand" docASTNodeCount="260" docActiveCodeLength="2374" docExpressionCount="151" docLength="3681" projectName="MineSweeper" timestamp="1172760">
    <filePath><![CDATA[C:\Users\Eye-tracking\git\MineSweeper-Experiment\src\logic\MineSweeper.java]]></filePath>
  </Command>
  <Command __id="302" _type="MoveCaretCommand" caretOffset="888" docOffset="1000" timestamp="1172847" />
  <Command __id="303" _type="FileOpenCommand" docASTNodeCount="1297" docActiveCodeLength="11122" docExpressionCount="863" docLength="13994" projectName="MineSweeper" timestamp="1189813">
    <filePath><![CDATA[C:\Users\Eye-tracking\git\MineSweeper-Experiment\src\presentation\MineSweeperGui.java]]></filePath>
  </Command>
  <Command __id="304" _type="SelectTextCommand" caretOffset="3582" docEnd="4370" docOffset="4370" docStart="4357" end="3582" start="3569" timestamp="1189847" />
  <Command __id="305" _type="MoveCaretCommand" caretOffset="3239" docOffset="4027" timestamp="1192585" />
  <Command __id="306" _type="MoveCaretCommand" caretOffset="3584" docOffset="4372" timestamp="1196770" />
  <Command __id="307" _type="MoveCaretCommand" caretOffset="3270" docOffset="4058" timestamp="1215553" />
  <DocumentChange __id="308" _type="Insert" docASTNodeCount="1297" docActiveCodeLength="11132" docExpressionCount="863" docLength="14004" length="10" offset="4058" timestamp="1221735">
    <text><![CDATA[
        ]]></text>
  </DocumentChange>
  <Command __id="309" _type="InsertStringCommand" timestamp="1221740">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="310" _type="InsertStringCommand" timestamp="1221740">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="311" _type="Insert" docASTNodeCount="1299" docActiveCodeLength="11147" docExpressionCount="863" docLength="14019" length="15" offset="4068" repeat="15" timestamp="1222363" timestamp2="1226362">
    <text><![CDATA[updateNewgameIO]]></text>
  </DocumentChange>
  <Command __id="312" _type="InsertStringCommand" repeat="30" timestamp="1222365" timestamp2="1226365">
    <data><![CDATA[uuppddaatteeNNeewwggaammeeIIOO]]></data>
  </Command>
  <DocumentChange __id="356" _type="Delete" docASTNodeCount="1299" docActiveCodeLength="11141" docExpressionCount="863" docLength="14013" endLine="141" length="6" offset="4077" repeat="6" startLine="141" timestamp="1226635" timestamp2="1227794">
    <text><![CDATA[gameIO]]></text>
  </DocumentChange>
  <Command __id="357" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" repeat="12" timestamp="1226636" timestamp2="1227795" />
  <DocumentChange __id="374" _type="Insert" docASTNodeCount="833" docActiveCodeLength="11149" docExpressionCount="521" docLength="14021" length="8" offset="4077" repeat="6" timestamp="1228372" timestamp2="1230455">
    <text><![CDATA[Gmae()'']]></text>
  </DocumentChange>
  <Command __id="375" _type="InsertStringCommand" repeat="14" timestamp="1228373" timestamp2="1230457">
    <data><![CDATA[GGmmaaee(())'']]></data>
  </Command>
  <DocumentChange __id="394" _type="Delete" docASTNodeCount="1299" docActiveCodeLength="11142" docExpressionCount="863" docLength="14014" endLine="141" length="7" offset="4078" repeat="7" startLine="141" timestamp="1230848" timestamp2="1231835">
    <text><![CDATA[mae()'']]></text>
  </DocumentChange>
  <Command __id="396" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" repeat="12" timestamp="1230856" timestamp2="1231837" />
  <DocumentChange __id="413" _type="Insert" docASTNodeCount="1301" docActiveCodeLength="11145" docExpressionCount="865" docLength="14017" length="3" offset="4078" repeat="3" timestamp="1232090" timestamp2="1232505">
    <text><![CDATA[a,e]]></text>
  </DocumentChange>
  <Command __id="414" _type="InsertStringCommand" repeat="6" timestamp="1232094" timestamp2="1232507">
    <data><![CDATA[aa,,ee]]></data>
  </Command>
  <DocumentChange __id="422" _type="Delete" docASTNodeCount="1299" docActiveCodeLength="11143" docExpressionCount="863" docLength="14015" endLine="141" length="2" offset="4079" repeat="2" startLine="141" timestamp="1232715" timestamp2="1232867">
    <text><![CDATA[,e]]></text>
  </DocumentChange>
  <Command __id="423" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" repeat="4" timestamp="1232717" timestamp2="1232868" />
  <DocumentChange __id="428" _type="Insert" docASTNodeCount="1300" docActiveCodeLength="11148" docExpressionCount="865" docLength="14020" length="5" offset="4079" repeat="4" timestamp="1233083" timestamp2="1234547">
    <text><![CDATA[me();]]></text>
  </DocumentChange>
  <Command __id="429" _type="InsertStringCommand" repeat="10" timestamp="1233085" timestamp2="1234550">
    <data><![CDATA[mmee(());;]]></data>
  </Command>
  <Command __id="442" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" timestamp="1235025" />
  <Command __id="443" _type="MoveCaretCommand" caretOffset="3242" docOffset="4030" timestamp="1238850" />
  <Command __id="444" _type="SelectTextCommand" caretOffset="3280" docEnd="4084" docOffset="4068" docStart="4068" end="3296" start="3280" timestamp="1240209" />
  <DocumentChange __id="445" _type="Delete" docASTNodeCount="1297" docActiveCodeLength="11132" docExpressionCount="863" docLength="14004" endLine="141" length="16" offset="4068" startLine="141" timestamp="1240794">
    <text><![CDATA[updateNewGame();]]></text>
  </DocumentChange>
  <Command __id="446" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" repeat="2" timestamp="1240799" timestamp2="1240799" />
  <Command __id="448" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.open.editor" timestamp="1246015" />
  <Command __id="449" _type="MoveCaretCommand" caretOffset="3243" docOffset="4031" timestamp="1248075" />
  <Command __id="450" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.search.declarations.in.project" timestamp="1256025" />
  <Command __id="451" _type="ShellBoundsCommand" bounds="[-8, -8, 1936, 1056]" timestamp="1303841" />
</Events>
