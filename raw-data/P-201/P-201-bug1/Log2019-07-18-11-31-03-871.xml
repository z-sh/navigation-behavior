<Events startTimestamp="1563463863871" logVersion="0.11.0.201504031625" osName="Windows 10" osVersion="10.0" lineSeparator="\r\n" numMonitors="1" monitorBounds="[0, 0, 1920, 1080]">
  <Command __id="0" _type="ShellBoundsCommand" bounds="[-8, -8, 1936, 1056]" timestamp="6" />
  <Command __id="1" _type="FileOpenCommand" docASTNodeCount="1808" docActiveCodeLength="10824" docExpressionCount="1076" docLength="19941" projectName="MineSweeper" timestamp="30">
    <filePath><![CDATA[C:\Users\Eye-tracking\git\MineSweeper-Experiment\src\logic\MineSweeperBoard.java]]></filePath>
    <snapshot><![CDATA[package logic;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.*;

import util.Piece;
import util.Space;

/**
 * Contains all the visible pieces in the MineSweeper game
 * 
 * @author KnightMiner
 */

public class MineSweeperBoard implements Serializable {

	/**
	 * Random number generator used to create game seeds Minefields use a sepparate
	 * object created using a specific seed
	 */
	
	public static final Random RANDOM = new Random();

	// resizable
	private transient Queue<Space> update;

	// board dimensions
	private int width, height;
	private MineGenerator data = new MineGenerator();

	private int flagCount;

	// board data
	private Piece[][] pieces;
	private boolean[][] mines;
	private boolean gameOver;
	private boolean victory;

	// determines if the first click happened yet
	private boolean firstClick;

	// determines if we have used our one cheat
	private int cheatsAllowed;
	private int cheats = 0;

	// board seed
	private long seed;

	/**
	 * Creates a new minesweaper board with the specified dimensions
	 * 
	 * @param width     Width of the board
	 * @param height    Height of the board
	 * @param mineCount Total mines
	 * @param cheats    Cheats allowed
	 */
	
	public MineSweeperBoard(int width, int height, int mineCount, int cheats) {
		this.width = width;
		this.height = height;

		this.pieces = new Piece[height][width];
		this.mines = new boolean[height][width];

		// sanity check in case the GUI fails to correct the number
		
		System.out.println("Initial mineCount " + Math.min(mineCount, width * height - 9));
		this.data.mineCount = Math.min(mineCount, width * height - 9); // This looks super suspect!
		this.cheatsAllowed = this.cheats = cheats;

		update = new LinkedList<>();
	}

	/**
	 * Creates a new minesweaper board with the specified dimensions
	 * 
	 * @param width     Width of the board
	 * @param height    Height of the board
	 * @param mineCount Total mines
	 */
	
	public MineSweeperBoard(int width, int height, int mineCount) {
		this(width, height, mineCount, 1);
	}

	/* Main logic */

	/**
	 * Populates the board with mines with a random seed
	 * 
	 * @param space Space clicked
	 */
	
	public void generateMines(Space space) {
		generateMines(RANDOM.nextLong(), space);
	}

	/**
	 * Populates the board with mines
	 * 
	 * @param seed    Seed to generate mines. Two fields with the same size and seed
	 *                will have the same mines locations
	 * @param clicked space clicked when generating the mines
	 */
	
	protected void generateMines(long seed, Space clicked) {
		// store the current seed for saving games
		this.seed = seed;

		// no mines? no work
		if (data.mineCount == 0) {
			return;
		}

		// list of spaces we can still place a mine at
		List<Space> remainingSpaces = new ArrayList<>(Arrays.asList(getAllSpaces()));

		// if we clicked somewhere, remove all nearby spaces
		if (clicked != null) {
			// remove all unclickable spaces
			final int x = clicked.getX(), y = clicked.getY();
			remainingSpaces.removeIf((space) -> {
				return (y - 1) <= space.getY() && space.getY() <= (y + 1) && (x - 1) <= space.getX()
						&& space.getX() <= (x + 1);
			});
		}

		// random object seeded so results can be controlled
		Random random = new Random(seed);

		// place mines
		this.mines = new boolean[height][width];
		for (int i = 0; i < data.mineCount; i++) {
			// just get the linear location of the next mine and place it
			int mine = random.nextInt(remainingSpaces.size());
			Space space = remainingSpaces.get(mine);
			System.out.println("adding mine to " + mine + " " + space.getX() + ", " + space.getY());
			mines[space.getY()][space.getX()] = true;
			
			// You just chose a mine, remove it from the list of remaining:
			remainingSpaces.remove(mine);
			

		}
	}

	/**
	 * Creates a new game with the same dimensions
	 */
	
	public void newGame() {
		// first, regenerate the mines
		this.mines = new boolean[height][width];

		// next, clear game specific data
		resetData();

		// then mark all spaces for a rendering update
		for (Space space : getAllSpaces()) {
			markUpdate(space);
		}
	}

	/**
	 * Restarts the current game
	 */
	
	public void restart() {
		// if we have not clicked yet, do nothing
		// we don't have a seed to restart from
		if (!firstClick) {
			return;
		}

		// reset any relevant data
		resetData();

		// but assume we already clicked so the mines don't change
		firstClick = true;

		// and mark all spaces for an update
		for (Space space : getAllSpaces()) {
			markUpdate(space);
		}
	}

	/**
	 * Saves the board to a binary file
	 * 
	 * @param filename Location of the game
	 */
	
	public void saveGame(String filename) {
		// TODO: better saving logic
		try {
			FileOutputStream file = new FileOutputStream(filename + ".bin");
			ObjectOutputStream stream = new ObjectOutputStream(file);
			stream.writeObject(this);
			stream.flush();
			stream.close();
		} catch (IOException e) {
		}
	}

	/**
	 * Load the board from a binary file
	 * 
	 * @param filename Location of the game
	 * @return The board, or null if invalid
	 */
	
	public static MineSweeperBoard loadGame(String filename) {
		try {
			FileInputStream file = new FileInputStream(filename + ".bin");
			ObjectInputStream stream = new ObjectInputStream(file);
			MineSweeperBoard board = (MineSweeperBoard) stream.readObject();
			stream.close();
			return board;
		} catch (IOException | ClassNotFoundException e) {
			e.printStackTrace();
			return null;
		}
	}

	/**
	 * Resets generic data
	 */
	
	private void resetData() {
		this.pieces = new Piece[height][width];
		gameOver = false;
		firstClick = false;
		cheats = cheatsAllowed;
		flagCount = 0;
		victory = false;
	}

	/**
	 * Ends the game with a loss
	 * 
	 * @param clicked Location clicked causing the loss
	 * @return Mine clicked
	 */
	
	public void loseGame(Space clicked) {
		// set the game to over
		gameOver = true;

		showMines(clicked, false);
	}

	/**
	 * Checks if the game has been won, and sets the appropiate statuses
	 */
	
	public void checkVictory() {
		// check all spaces
		for (Space space : getAllSpaces()) {

			// only spaces without mines need to be checked, we don't care about
			// flags or marks on mine spaces
			if (!isMine(space)) {
				// if the piece is unclicked or not a number, we failed
				Piece piece = getPiece(space);
				if (piece == null || !piece.isNumber()) {
					return;
				}
			}
		}

		// made it through that? we won
		victory = true;
		gameOver = true;

		showMines(null, true);
	}

	/**
	 * Shows all the mines on the board
	 * 
	 * @param space   Space that was clicked
	 * @param victory Determines if the game was won or lost
	 */
	
	private void showMines(Space clicked, boolean victory) {
		// set the mine color based on victory
		Piece mine = victory ? Piece.MINE_GREEN : Piece.MINE;

		// set the clicked space to red
		if (clicked != null && isMine(clicked)) {
			setPiece(clicked, Piece.MINE_RED);
		}

		// show mines on the board
		for (Space space : getAllSpaces()) {
			if (space.equals(clicked)) {
				continue;
			}
			Piece piece = getPiece(space);
			if (isMine(space)) {
				// but only on empty or marks
				if (piece == null || piece.isMark()) {
					setPiece(space, mine);
				}
			} else {
				// if the space has a flag but no mine, mark it as such
				if (piece == Piece.FLAG) {
					setPiece(space, Piece.FLAG_NOT);
				}
			}
		}
	}

	/* Clicking */

	/**
	 * Handle standard game clicks
	 * 
	 * @param space  Space clicked
	 * @param action Type of click
	 */
	
	public void handleClick(Space space, ClickAction action) {
		// stop playing when the game is over
		if (gameOver) {
			return;
		}
		// simply passes it along to the dedicated function
		switch (action) {
		case DEFAULT:
			handleDefaultClick(space);
			break;
		case FLAG:
			handleFlagClick(space);
			break;
		case MARK:
			handleMarkClick(space);
			break;
		case CHEAT:
			handleCheatClick(space);
			break;
		}
	}

	/**
	 * Space clicking core, does the actual clicking action
	 * 
	 * @param space Space clicked
	 */
	
	private void clickSpace(Space space) {
		// if the space is not replaceable, stop now
		// called here so we don't click flags as they are mines
		if (!isReplaceable(space)) {
			return;
		}

		// if the space is a mine, we lose
		if (isMine(space)) {
			loseGame(space);
		}

		// otherwise do a normal click
		else {
			// sets the piece to the number of surrounding mines
			Piece newPiece = getNumber(space);
			setPiece(space, newPiece);

			// if the piece is 0, update surrounding pieces as none of them are mines
			// this won't eternally recur since this space is no longer clickable
			if (newPiece == Piece.N0) {
				for (Space neighbor : getNeighbors(space)) {
					clickSpace(neighbor);
				}
			}
		}
	}

	/**
	 * Default clicks, clicks a space and displays a number or loses the game
	 * 
	 * @param space Space clicked
	 */
	
	private void handleDefaultClick(Space space) {
		// first click should generate the minefield
		if (!firstClick) {
			firstClick(space);
		}

		// if the space cannot be replaced then stop here
		// as we run this function on every click
		if (isNumber(space)) {
			// if the number of flags around this space is the same as the number
			Space[] neighbors = getNeighbors(space);

			// count the flags around the piece
			int flags = 0;
			for (Space neighbor : neighbors) {
				if (getPiece(neighbor) == Piece.FLAG) {
					flags++;
				}
			}

			// same number of flags as the piece number?
			if (flags == getPiece(space).getNumber()) {
				// click all the spaces. This is a risky move if a flag is wrong
				for (Space neighbor : neighbors) {
					clickSpace(neighbor);
				}
			}
		}
		// otherwise if not a number, just click the space
		else {
			clickSpace(space);
		}

		// check just once at the end of clicking
		checkVictory();
	}

	/**
	 * Handle the first click in the game. This click will generate the minefield as
	 * it cannot be on a mine
	 * 
	 * @param space Space clicked
	 */
	
	private void firstClick(Space space) {
		generateMines(space);
		firstClick = true;
	}

	/**
	 * Flag clicks, essentially click once to add
	 * 
	 * @param space Space clicked
	 */
	
	private void handleFlagClick(Space space) {
		// if already a flag, set a mark
		Piece piece = getPiece(space);
		if (piece == Piece.FLAG) {
			setPiece(space, Piece.MARK_RED);
			flagCount--;
		}
		// remove marks
		else if (piece != null && piece.isMark()) {
			setPiece(space, null);
		}
		// otherwise if we can add one
		else if (isReplaceable(space)) {
			if(flagCount < data.mineCount) {
				setPiece(space, Piece.FLAG);
				flagCount++;
			}
		}
	}

	/**
	 * Mark clicks, changes the color of a mark
	 * 
	 * @param space Space clicked
	 */
	
	private void handleMarkClick(Space space) {
		// tobble the mark
		Piece piece = getPiece(space);
		if (piece == Piece.MARK_RED) {
			setPiece(space, Piece.MARK_GREEN);
		}
		// remove marks
		else if (piece == Piece.MARK_GREEN) {
			setPiece(space, Piece.MARK_BLUE);
		}
		// otherwise if we can add one
		else if (piece == Piece.MARK_BLUE) {
			setPiece(space, Piece.MARK_RED);
		}

		// if its a flag, remove it
		else if (piece == Piece.FLAG) {
			setPiece(space, Piece.MARK_RED);
			flagCount--;
		}

		// essentially all that is left here is null, but still
		else if (isReplaceable(space)) {
			setPiece(space, Piece.MARK_RED);
		}
	}

	/**
	 * Cheat clicks, click a space and it will show a "ghost" bomb if one exists
	 * 
	 * @param space Space clicked
	 */
	
	private void handleCheatClick(Space space) {
		// already ran, don't run again
		if (!canCheat()) {
			return;
		}

		// no mines if we have not clicked
		if (!firstClick) {
			// you cheated for the first click, useless move as now we don't care
			// about click protection
			firstClick(null);
		}

		// only marks and empty spaces can be cheated, to save accidental clicks
		Piece piece = getPiece(space);
		if (piece != null && !piece.isMark()) {
			return;
		}

		// if its a mine, show that
		if (isMine(space)) {
			setPiece(space, Piece.MINE_GREEN);
		}
		// otherwise click the space as we know its safe
		else {
			clickSpace(space);
		}

		// use a cheat
		cheats--;

		// need to check, since it could be the last click
		checkVictory();
	}

	/* Helper functions */

	/**
	 * Gets a list of all spaces
	 * 
	 * @return a list of all spaces
	 */
	
	public Space[] getAllSpaces() {
		Space[] spaces = new Space[width * height];

		// loop through all spaces, adding them to an array
		int i = 0;
		for (int y = 0; y < height; y++) {
			for (int x = 0; x < width; x++) {
				spaces[i] = new Space(x, y);
				i++;
			}
		}

		return spaces;
	}

	/**
	 * Helper function to get the coordinates of all 8 neighbors to the space Note
	 * that some may be invalid spaces
	 * 
	 * @param space Space around which to get neighbors
	 * @return an array of spaces of the 8 neighbors, or less on edges
	 */
	
	public Space[] getNeighbors(Space space) {
		// if not valid, return no neighbors
		if (!isValid(space)) {
			return new Space[0];
		}

		// array cannot be bigger than 8
		Space[] neighbors = new Space[8];
		int x = space.getX();
		int y = space.getY();

		// 2D loop from x - 1, y - 1 up to x + 1, y + 1
		int neighborCount = 0;
		for (int i = -1; i <= 1; i++) {
			for (int j = -1; j <= 1; j++) {
				// skip offset of 0,0 as that is the input space
				if (i == 0 && j == 0) {
					continue;
				}

				// make sure the space is valid before returning it
				Space neighbor = new Space(x + i, y + j);
				if (isValid(neighbor)) {
					neighbors[neighborCount] = neighbor;
					neighborCount++;
				}
			}
		}

		return neighbors;
	}

	/**
	 * Marks a space as needing update by the graphics display
	 * 
	 * @param space space needing an update
	 */
	
	public void markUpdate(Space space) {
		if (!update.contains(space)) {
			update.add(space);
		}
	}

	/**
	 * Returns the number to display on the space after clicking it Does not take
	 * bombs on this space into account, check isMine() first
	 * 
	 * @param space Space to check
	 * @return The number of bombs around this space
	 */
	
	public Piece getNumber(Space space) {
		// no space? no return
		if (!isValid(space)) {
			return null;
		}

		int count = 0;
		// check all the neighbors for a bomb
		for (Space neighbor : getNeighbors(space)) {
			// if they have one, add to the running total
			if (isMine(neighbor)) {
				count++;
			}
		}

		// return the specific piece
		return Piece.fromNumber(count);
	}

	/* Getters, setters, and basic return logic */

	/**
	 * Gets the piece on the specified space
	 * 
	 * @param space Space to check for a piece
	 * @return the piece on the specified space
	 */
	
	public Piece getPiece(Space space) {
		// invalid gets null
		if (!isValid(space)) {
			return null;
		}

		// otherwise go with the contained piece
		return pieces[space.getY()][space.getX()];
	}

	/**
	 * Placed a piece on a space
	 * 
	 * @param space Space to place the piece
	 * @param piece Piece to place on the space
	 */
	
	public void setPiece(Space space, Piece piece) {
		// must be valid
		if (isValid(space)) {
			pieces[space.getY()][space.getX()] = piece;
			markUpdate(space);
		}
	}

	/**
	 * Determines if a space contains a bomb
	 * 
	 * @param space Space to check
	 * @return True if the space contains a bomb
	 */
	
	public boolean isMine(Space space) {
		// not a valid space?
		if (!isValid(space)) {
			return false;
		}

		return mines[space.getY()][space.getX()];
	}

	/**
	 * Determines if a space appears enabled, or pressed up
	 * 
	 * @param space Space to check
	 * @return True if the space appears enabled
	 */
	
	public boolean isEnabled(Space space) {
		if (!isValid(space)) {
			return false;
		}

		Piece piece = getPiece(space);

		// if the space is empty, it pops up
		if (piece == null) {
			return true;
		}

		// otherwise go based on the contained value
		return piece.isEnabled();
	}

	/**
	 * Determines if the contents of a space can be replaced
	 * 
	 * @param space Space clicked
	 */
	
	private boolean isReplaceable(Space space) {
		// invalid spaces are always false
		if (!isValid(space)) {
			return false;
		}

		Piece piece = getPiece(space);

		// if the space is empty, it can be clicked
		if (piece == null) {
			return true;
		}

		// otherwise go based on the contained value
		return piece.isReplaceable();
	}

	/**
	 * Determines if the space is a number
	 * 
	 * @param space Space clicked
	 */
	
	private boolean isNumber(Space space) {
		// invalid spaces are always false
		if (!isValid(space)) {
			return false;
		}

		Piece piece = getPiece(space);

		// if the space is empty, it is not a number
		if (piece == null) {
			return false;
		}

		// otherwise go based on the contained value
		return piece.isNumber();
	}

	/* Data */

	/**
	 * Gets the width of the board
	 * 
	 * @return The width of the board
	 */
	
	public int getWidth() {
		return width;
	}

	/**
	 * Gets the height of the board
	 * 
	 * @return The height of the board
	 */
	
	public int getHeight() {
		return height;
	}

	/**
	 * Gets the number of mines left on the board
	 * 
	 * @return number of mines remaining
	 */
	
	public int getRemainingMines() {
		return data.mineCount - flagCount;
	}

	/**
	 * Checks if the player has used their cheat
	 * 
	 * @return if the player has used their cheat
	 */
	
	public boolean canCheat() {
		return cheats > 0;
	}

	/**
	 * Checks how many cheats the player has left
	 * 
	 * @return remaining cheats
	 */
	
	public int getCheats() {
		return cheats;
	}

	/**
	 * Checks if the game ended
	 * 
	 * @return true if the game ended
	 */
	
	public boolean gameOver() {
		return gameOver;
	}

	/**
	 * Checks if the player won the game
	 * 
	 * @return true if the player won the game
	 */
	
	public boolean hasWon() {
		return victory;
	}

	/**
	 * Checks if a space is within the bounds of this board
	 * 
	 * @param space Space to check
	 * @return true if the space is within this board
	 */
	
	public boolean isValid(Space space) {
		// no space?
		if (space == null) {
			return false;
		}

		// first, check if the space is entirely invalid
		if (space.getX() < 0 || space.getY() < 0) {
			return false;
		}

		// next, check if this is outside of this board
		if (space.getY() >= height || space.getX() >= width) {
			return false;
		}

		// fits in both? return true then
		return true;
	}

	/**
	 * Gets a list of spaces pending updates to update the button displays
	 * 
	 * @return a list of spaces needing an update
	 */
	
	public Queue<Space> getUpdates() {
		return update;
	}

	/**
	 * Actions that can be performed on click. Used by buttons to pass along a
	 * constant rather than a list of modifiers.
	 */
	
	public enum ClickAction {
		/** Normal click */
		DEFAULT,
		/** Placing a flag or mark */
		FLAG,
		/** Placing a mark of different colors */
		MARK,
		/** Safely clicking a mine */
		CHEAT;
	}
}
]]></snapshot>
  </Command>
  <Command __id="2" _type="SelectTextCommand" caretOffset="2563" docEnd="2790" docOffset="2790" docStart="2777" end="2563" start="2550" timestamp="498" />
  <DocumentChange __id="3" _type="Delete" docASTNodeCount="160" docActiveCodeLength="1029" docExpressionCount="71" docLength="1699" endLine="884" length="18242" offset="1699" startLine="0" timestamp="93102">
    <text><![CDATA[
		System.out.println("Initial mineCount " + Math.min(mineCount, width * height - 9));
		this.data.mineCount = Math.min(mineCount, width * height - 9); // This looks super suspect!
		this.cheatsAllowed = this.cheats = cheats;

		update = new LinkedList<>();
	}

	/**
	 * Creates a new minesweaper board with the specified dimensions
	 * 
	 * @param width     Width of the board
	 * @param height    Height of the board
	 * @param mineCount Total mines
	 */
	
	public MineSweeperBoard(int width, int height, int mineCount) {
		this(width, height, mineCount, 1);
	}

	/* Main logic */

	/**
	 * Populates the board with mines with a random seed
	 * 
	 * @param space Space clicked
	 */
	
	public void generateMines(Space space) {
		generateMines(RANDOM.nextLong(), space);
	}

	/**
	 * Populates the board with mines
	 * 
	 * @param seed    Seed to generate mines. Two fields with the same size and seed
	 *                will have the same mines locations
	 * @param clicked space clicked when generating the mines
	 */
	
	protected void generateMines(long seed, Space clicked) {
		// store the current seed for saving games
		this.seed = seed;

		// no mines? no work
		if (data.mineCount == 0) {
			return;
		}

		// list of spaces we can still place a mine at
		List<Space> remainingSpaces = new ArrayList<>(Arrays.asList(getAllSpaces()));

		// if we clicked somewhere, remove all nearby spaces
		if (clicked != null) {
			// remove all unclickable spaces
			final int x = clicked.getX(), y = clicked.getY();
			remainingSpaces.removeIf((space) -> {
				return (y - 1) <= space.getY() && space.getY() <= (y + 1) && (x - 1) <= space.getX()
						&& space.getX() <= (x + 1);
			});
		}

		// random object seeded so results can be controlled
		Random random = new Random(seed);

		// place mines
		this.mines = new boolean[height][width];
		for (int i = 0; i < data.mineCount; i++) {
			// just get the linear location of the next mine and place it
			int mine = random.nextInt(remainingSpaces.size());
			Space space = remainingSpaces.get(mine);
			System.out.println("adding mine to " + mine + " " + space.getX() + ", " + space.getY());
			mines[space.getY()][space.getX()] = true;
			
			// You just chose a mine, remove it from the list of remaining:
			remainingSpaces.remove(mine);
			

		}
	}

	/**
	 * Creates a new game with the same dimensions
	 */
	
	public void newGame() {
		// first, regenerate the mines
		this.mines = new boolean[height][width];

		// next, clear game specific data
		resetData();

		// then mark all spaces for a rendering update
		for (Space space : getAllSpaces()) {
			markUpdate(space);
		}
	}

	/**
	 * Restarts the current game
	 */
	
	public void restart() {
		// if we have not clicked yet, do nothing
		// we don't have a seed to restart from
		if (!firstClick) {
			return;
		}

		// reset any relevant data
		resetData();

		// but assume we already clicked so the mines don't change
		firstClick = true;

		// and mark all spaces for an update
		for (Space space : getAllSpaces()) {
			markUpdate(space);
		}
	}

	/**
	 * Saves the board to a binary file
	 * 
	 * @param filename Location of the game
	 */
	
	public void saveGame(String filename) {
		// TODO: better saving logic
		try {
			FileOutputStream file = new FileOutputStream(filename + ".bin");
			ObjectOutputStream stream = new ObjectOutputStream(file);
			stream.writeObject(this);
			stream.flush();
			stream.close();
		} catch (IOException e) {
		}
	}

	/**
	 * Load the board from a binary file
	 * 
	 * @param filename Location of the game
	 * @return The board, or null if invalid
	 */
	
	public static MineSweeperBoard loadGame(String filename) {
		try {
			FileInputStream file = new FileInputStream(filename + ".bin");
			ObjectInputStream stream = new ObjectInputStream(file);
			MineSweeperBoard board = (MineSweeperBoard) stream.readObject();
			stream.close();
			return board;
		} catch (IOException | ClassNotFoundException e) {
			e.printStackTrace();
			return null;
		}
	}

	/**
	 * Resets generic data
	 */
	
	private void resetData() {
		this.pieces = new Piece[height][width];
		gameOver = false;
		firstClick = false;
		cheats = cheatsAllowed;
		flagCount = 0;
		victory = false;
	}

	/**
	 * Ends the game with a loss
	 * 
	 * @param clicked Location clicked causing the loss
	 * @return Mine clicked
	 */
	
	public void loseGame(Space clicked) {
		// set the game to over
		gameOver = true;

		showMines(clicked, false);
	}

	/**
	 * Checks if the game has been won, and sets the appropiate statuses
	 */
	
	public void checkVictory() {
		// check all spaces
		for (Space space : getAllSpaces()) {

			// only spaces without mines need to be checked, we don't care about
			// flags or marks on mine spaces
			if (!isMine(space)) {
				// if the piece is unclicked or not a number, we failed
				Piece piece = getPiece(space);
				if (piece == null || !piece.isNumber()) {
					return;
				}
			}
		}

		// made it through that? we won
		victory = true;
		gameOver = true;

		showMines(null, true);
	}

	/**
	 * Shows all the mines on the board
	 * 
	 * @param space   Space that was clicked
	 * @param victory Determines if the game was won or lost
	 */
	
	private void showMines(Space clicked, boolean victory) {
		// set the mine color based on victory
		Piece mine = victory ? Piece.MINE_GREEN : Piece.MINE;

		// set the clicked space to red
		if (clicked != null && isMine(clicked)) {
			setPiece(clicked, Piece.MINE_RED);
		}

		// show mines on the board
		for (Space space : getAllSpaces()) {
			if (space.equals(clicked)) {
				continue;
			}
			Piece piece = getPiece(space);
			if (isMine(space)) {
				// but only on empty or marks
				if (piece == null || piece.isMark()) {
					setPiece(space, mine);
				}
			} else {
				// if the space has a flag but no mine, mark it as such
				if (piece == Piece.FLAG) {
					setPiece(space, Piece.FLAG_NOT);
				}
			}
		}
	}

	/* Clicking */

	/**
	 * Handle standard game clicks
	 * 
	 * @param space  Space clicked
	 * @param action Type of click
	 */
	
	public void handleClick(Space space, ClickAction action) {
		// stop playing when the game is over
		if (gameOver) {
			return;
		}
		// simply passes it along to the dedicated function
		switch (action) {
		case DEFAULT:
			handleDefaultClick(space);
			break;
		case FLAG:
			handleFlagClick(space);
			break;
		case MARK:
			handleMarkClick(space);
			break;
		case CHEAT:
			handleCheatClick(space);
			break;
		}
	}

	/**
	 * Space clicking core, does the actual clicking action
	 * 
	 * @param space Space clicked
	 */
	
	private void clickSpace(Space space) {
		// if the space is not replaceable, stop now
		// called here so we don't click flags as they are mines
		if (!isReplaceable(space)) {
			return;
		}

		// if the space is a mine, we lose
		if (isMine(space)) {
			loseGame(space);
		}

		// otherwise do a normal click
		else {
			// sets the piece to the number of surrounding mines
			Piece newPiece = getNumber(space);
			setPiece(space, newPiece);

			// if the piece is 0, update surrounding pieces as none of them are mines
			// this won't eternally recur since this space is no longer clickable
			if (newPiece == Piece.N0) {
				for (Space neighbor : getNeighbors(space)) {
					clickSpace(neighbor);
				}
			}
		}
	}

	/**
	 * Default clicks, clicks a space and displays a number or loses the game
	 * 
	 * @param space Space clicked
	 */
	
	private void handleDefaultClick(Space space) {
		// first click should generate the minefield
		if (!firstClick) {
			firstClick(space);
		}

		// if the space cannot be replaced then stop here
		// as we run this function on every click
		if (isNumber(space)) {
			// if the number of flags around this space is the same as the number
			Space[] neighbors = getNeighbors(space);

			// count the flags around the piece
			int flags = 0;
			for (Space neighbor : neighbors) {
				if (getPiece(neighbor) == Piece.FLAG) {
					flags++;
				}
			}

			// same number of flags as the piece number?
			if (flags == getPiece(space).getNumber()) {
				// click all the spaces. This is a risky move if a flag is wrong
				for (Space neighbor : neighbors) {
					clickSpace(neighbor);
				}
			}
		}
		// otherwise if not a number, just click the space
		else {
			clickSpace(space);
		}

		// check just once at the end of clicking
		checkVictory();
	}

	/**
	 * Handle the first click in the game. This click will generate the minefield as
	 * it cannot be on a mine
	 * 
	 * @param space Space clicked
	 */
	
	private void firstClick(Space space) {
		generateMines(space);
		firstClick = true;
	}

	/**
	 * Flag clicks, essentially click once to add
	 * 
	 * @param space Space clicked
	 */
	
	private void handleFlagClick(Space space) {
		// if already a flag, set a mark
		Piece piece = getPiece(space);
		if (piece == Piece.FLAG) {
			setPiece(space, Piece.MARK_RED);
			flagCount--;
		}
		// remove marks
		else if (piece != null && piece.isMark()) {
			setPiece(space, null);
		}
		// otherwise if we can add one
		else if (isReplaceable(space)) {
			if(flagCount < data.mineCount) {
				setPiece(space, Piece.FLAG);
				flagCount++;
			}
		}
	}

	/**
	 * Mark clicks, changes the color of a mark
	 * 
	 * @param space Space clicked
	 */
	
	private void handleMarkClick(Space space) {
		// tobble the mark
		Piece piece = getPiece(space);
		if (piece == Piece.MARK_RED) {
			setPiece(space, Piece.MARK_GREEN);
		}
		// remove marks
		else if (piece == Piece.MARK_GREEN) {
			setPiece(space, Piece.MARK_BLUE);
		}
		// otherwise if we can add one
		else if (piece == Piece.MARK_BLUE) {
			setPiece(space, Piece.MARK_RED);
		}

		// if its a flag, remove it
		else if (piece == Piece.FLAG) {
			setPiece(space, Piece.MARK_RED);
			flagCount--;
		}

		// essentially all that is left here is null, but still
		else if (isReplaceable(space)) {
			setPiece(space, Piece.MARK_RED);
		}
	}

	/**
	 * Cheat clicks, click a space and it will show a "ghost" bomb if one exists
	 * 
	 * @param space Space clicked
	 */
	
	private void handleCheatClick(Space space) {
		// already ran, don't run again
		if (!canCheat()) {
			return;
		}

		// no mines if we have not clicked
		if (!firstClick) {
			// you cheated for the first click, useless move as now we don't care
			// about click protection
			firstClick(null);
		}

		// only marks and empty spaces can be cheated, to save accidental clicks
		Piece piece = getPiece(space);
		if (piece != null && !piece.isMark()) {
			return;
		}

		// if its a mine, show that
		if (isMine(space)) {
			setPiece(space, Piece.MINE_GREEN);
		}
		// otherwise click the space as we know its safe
		else {
			clickSpace(space);
		}

		// use a cheat
		cheats--;

		// need to check, since it could be the last click
		checkVictory();
	}

	/* Helper functions */

	/**
	 * Gets a list of all spaces
	 * 
	 * @return a list of all spaces
	 */
	
	public Space[] getAllSpaces() {
		Space[] spaces = new Space[width * height];

		// loop through all spaces, adding them to an array
		int i = 0;
		for (int y = 0; y < height; y++) {
			for (int x = 0; x < width; x++) {
				spaces[i] = new Space(x, y);
				i++;
			}
		}

		return spaces;
	}

	/**
	 * Helper function to get the coordinates of all 8 neighbors to the space Note
	 * that some may be invalid spaces
	 * 
	 * @param space Space around which to get neighbors
	 * @return an array of spaces of the 8 neighbors, or less on edges
	 */
	
	public Space[] getNeighbors(Space space) {
		// if not valid, return no neighbors
		if (!isValid(space)) {
			return new Space[0];
		}

		// array cannot be bigger than 8
		Space[] neighbors = new Space[8];
		int x = space.getX();
		int y = space.getY();

		// 2D loop from x - 1, y - 1 up to x + 1, y + 1
		int neighborCount = 0;
		for (int i = -1; i <= 1; i++) {
			for (int j = -1; j <= 1; j++) {
				// skip offset of 0,0 as that is the input space
				if (i == 0 && j == 0) {
					continue;
				}

				// make sure the space is valid before returning it
				Space neighbor = new Space(x + i, y + j);
				if (isValid(neighbor)) {
					neighbors[neighborCount] = neighbor;
					neighborCount++;
				}
			}
		}

		return neighbors;
	}

	/**
	 * Marks a space as needing update by the graphics display
	 * 
	 * @param space space needing an update
	 */
	
	public void markUpdate(Space space) {
		if (!update.contains(space)) {
			update.add(space);
		}
	}

	/**
	 * Returns the number to display on the space after clicking it Does not take
	 * bombs on this space into account, check isMine() first
	 * 
	 * @param space Space to check
	 * @return The number of bombs around this space
	 */
	
	public Piece getNumber(Space space) {
		// no space? no return
		if (!isValid(space)) {
			return null;
		}

		int count = 0;
		// check all the neighbors for a bomb
		for (Space neighbor : getNeighbors(space)) {
			// if they have one, add to the running total
			if (isMine(neighbor)) {
				count++;
			}
		}

		// return the specific piece
		return Piece.fromNumber(count);
	}

	/* Getters, setters, and basic return logic */

	/**
	 * Gets the piece on the specified space
	 * 
	 * @param space Space to check for a piece
	 * @return the piece on the specified space
	 */
	
	public Piece getPiece(Space space) {
		// invalid gets null
		if (!isValid(space)) {
			return null;
		}

		// otherwise go with the contained piece
		return pieces[space.getY()][space.getX()];
	}

	/**
	 * Placed a piece on a space
	 * 
	 * @param space Space to place the piece
	 * @param piece Piece to place on the space
	 */
	
	public void setPiece(Space space, Piece piece) {
		// must be valid
		if (isValid(space)) {
			pieces[space.getY()][space.getX()] = piece;
			markUpdate(space);
		}
	}

	/**
	 * Determines if a space contains a bomb
	 * 
	 * @param space Space to check
	 * @return True if the space contains a bomb
	 */
	
	public boolean isMine(Space space) {
		// not a valid space?
		if (!isValid(space)) {
			return false;
		}

		return mines[space.getY()][space.getX()];
	}

	/**
	 * Determines if a space appears enabled, or pressed up
	 * 
	 * @param space Space to check
	 * @return True if the space appears enabled
	 */
	
	public boolean isEnabled(Space space) {
		if (!isValid(space)) {
			return false;
		}

		Piece piece = getPiece(space);

		// if the space is empty, it pops up
		if (piece == null) {
			return true;
		}

		// otherwise go based on the contained value
		return piece.isEnabled();
	}

	/**
	 * Determines if the contents of a space can be replaced
	 * 
	 * @param space Space clicked
	 */
	
	private boolean isReplaceable(Space space) {
		// invalid spaces are always false
		if (!isValid(space)) {
			return false;
		}

		Piece piece = getPiece(space);

		// if the space is empty, it can be clicked
		if (piece == null) {
			return true;
		}

		// otherwise go based on the contained value
		return piece.isReplaceable();
	}

	/**
	 * Determines if the space is a number
	 * 
	 * @param space Space clicked
	 */
	
	private boolean isNumber(Space space) {
		// invalid spaces are always false
		if (!isValid(space)) {
			return false;
		}

		Piece piece = getPiece(space);

		// if the space is empty, it is not a number
		if (piece == null) {
			return false;
		}

		// otherwise go based on the contained value
		return piece.isNumber();
	}

	/* Data */

	/**
	 * Gets the width of the board
	 * 
	 * @return The width of the board
	 */
	
	public int getWidth() {
		return width;
	}

	/**
	 * Gets the height of the board
	 * 
	 * @return The height of the board
	 */
	
	public int getHeight() {
		return height;
	}

	/**
	 * Gets the number of mines left on the board
	 * 
	 * @return number of mines remaining
	 */
	
	public int getRemainingMines() {
		return data.mineCount - flagCount;
	}

	/**
	 * Checks if the player has used their cheat
	 * 
	 * @return if the player has used their cheat
	 */
	
	public boolean canCheat() {
		return cheats > 0;
	}

	/**
	 * Checks how many cheats the player has left
	 * 
	 * @return remaining cheats
	 */
	
	public int getCheats() {
		return cheats;
	}

	/**
	 * Checks if the game ended
	 * 
	 * @return true if the game ended
	 */
	
	public boolean gameOver() {
		return gameOver;
	}

	/**
	 * Checks if the player won the game
	 * 
	 * @return true if the player won the game
	 */
	
	public boolean hasWon() {
		return victory;
	}

	/**
	 * Checks if a space is within the bounds of this board
	 * 
	 * @param space Space to check
	 * @return true if the space is within this board
	 */
	
	public boolean isValid(Space space) {
		// no space?
		if (space == null) {
			return false;
		}

		// first, check if the space is entirely invalid
		if (space.getX() < 0 || space.getY() < 0) {
			return false;
		}

		// next, check if this is outside of this board
		if (space.getY() >= height || space.getX() >= width) {
			return false;
		}

		// fits in both? return true then
		return true;
	}

	/**
	 * Gets a list of spaces pending updates to update the button displays
	 * 
	 * @return a list of spaces needing an update
	 */
	
	public Queue<Space> getUpdates() {
		return update;
	}

	/**
	 * Actions that can be performed on click. Used by buttons to pass along a
	 * constant rather than a list of modifiers.
	 */
	
	public enum ClickAction {
		/** Normal click */
		DEFAULT,
		/** Placing a flag or mark */
		FLAG,
		/** Placing a mark of different colors */
		MARK,
		/** Safely clicking a mine */
		CHEAT;
	}
}
]]></text>
  </DocumentChange>
  <DocumentChange __id="4" _type="Insert" docASTNodeCount="1808" docActiveCodeLength="10824" docExpressionCount="1076" docLength="19941" length="17949" offset="1699" timestamp="93116">
    <text><![CDATA[this.data.mineCount = Math.min(mineCount, width * height - 9);
		this.cheatsAllowed = this.cheats = cheats;

		update = new LinkedList<>();
	}

	/**
	 * Creates a new minesweaper board with the specified dimensions
	 * 
	 * @param width     Width of the board
	 * @param height    Height of the board
	 * @param mineCount Total mines
	 */
	
	public MineSweeperBoard(int width, int height, int mineCount) {
		this(width, height, mineCount, 1);
	}

	/* Main logic */

	/**
	 * Populates the board with mines with a random seed
	 * 
	 * @param space Space clicked
	 */
	
	public void generateMines(Space space) {
		generateMines(RANDOM.nextLong(), space);
	}

	/**
	 * Populates the board with mines
	 * 
	 * @param seed    Seed to generate mines. Two fields with the same size and seed
	 *                will have the same mines locations
	 * @param clicked space clicked when generating the mines
	 */
	
	protected void generateMines(long seed, Space clicked) {
		// store the current seed for saving games
		this.seed = seed;

		// no mines? no work
		if (data.mineCount == 0) {
			return;
		}

		// list of spaces we can still place a mine at
		List<Space> remainingSpaces = new ArrayList<>(Arrays.asList(getAllSpaces()));

		// if we clicked somewhere, remove all nearby spaces
		if (clicked != null) {
			// remove all unclickable spaces
			final int x = clicked.getX(), y = clicked.getY();
			remainingSpaces.removeIf((space) -> {
				return (y - 1) <= space.getY() && space.getY() <= (y + 1) && (x - 1) <= space.getX()
						&& space.getX() <= (x + 1);
			});
		}

		// random object seeded so results can be controlled
		Random random = new Random(seed);

		// place mines
		this.mines = new boolean[height][width];
		for (int i = 0; i < data.mineCount; i++) {
			// just get the linear location of the next mine and place it
			int mine = random.nextInt(remainingSpaces.size());
			Space space = remainingSpaces.get(mine);
			mines[space.getY()][space.getX()] = true;
			remainingSpaces.remove(mine);
		}
	}

	/**
	 * Creates a new game with the same dimensions
	 */
	
	public void newGame() {
		// first, regenerate the mines
		this.mines = new boolean[height][width];

		// next, clear game specific data
		resetData();

		// then mark all spaces for a rendering update
		for (Space space : getAllSpaces()) {
			markUpdate(space);
		}
	}

	/**
	 * Restarts the current game
	 */
	
	public void restart() {
		// if we have not clicked yet, do nothing
		// we don't have a seed to restart from
		if (!firstClick) {
			return;
		}

		// reset any relevant data
		resetData();

		// but assume we already clicked so the mines don't change
		firstClick = true;

		// and mark all spaces for an update
		for (Space space : getAllSpaces()) {
			markUpdate(space);
		}
	}

	/**
	 * Saves the board to a binary file
	 * 
	 * @param filename Location of the game
	 */
	
	public void saveGame(String filename) {
		// TODO: better saving logic
		try {
			FileOutputStream file = new FileOutputStream(filename + ".bin");
			ObjectOutputStream stream = new ObjectOutputStream(file);
			stream.writeObject(this);
			stream.flush();
			stream.close();
		} catch (IOException e) {
		}
	}

	/**
	 * Load the board from a binary file
	 * 
	 * @param filename Location of the game
	 * @return The board, or null if invalid
	 */
	
	public static MineSweeperBoard loadGame(String filename) {
		try {
			FileInputStream file = new FileInputStream(filename + ".bin");
			ObjectInputStream stream = new ObjectInputStream(file);
			MineSweeperBoard board = (MineSweeperBoard) stream.readObject();
			stream.close();
			return board;
		} catch (IOException | ClassNotFoundException e) {
			e.printStackTrace();
			return null;
		}
	}

	/**
	 * Resets generic data
	 */
	
	private void resetData() {
		this.pieces = new Piece[height][width];
		gameOver = false;
		firstClick = false;
		cheats = cheatsAllowed;
		flagCount = 0;
		victory = false;
	}

	/**
	 * Ends the game with a loss
	 * 
	 * @param clicked Location clicked causing the loss
	 * @return Mine clicked
	 */
	
	public void loseGame(Space clicked) {
		// set the game to over
		gameOver = true;

		showMines(clicked, false);
	}

	/**
	 * Checks if the game has been won, and sets the appropiate statuses
	 */
	
	public void checkVictory() {
		// check all spaces
		for (Space space : getAllSpaces()) {

			// only spaces without mines need to be checked, we don't care about
			// flags or marks on mine spaces
			if (!isMine(space)) {
				// if the piece is unclicked or not a number, we failed
				Piece piece = getPiece(space);
				if (piece == null || !piece.isNumber()) {
					return;
				}
			}
		}

		// made it through that? we won
		victory = true;
		gameOver = true;

		showMines(null, true);
	}

	/**
	 * Shows all the mines on the board
	 * 
	 * @param space   Space that was clicked
	 * @param victory Determines if the game was won or lost
	 */
	
	private void showMines(Space clicked, boolean victory) {
		// set the mine color based on victory
		Piece mine = victory ? Piece.MINE_GREEN : Piece.MINE;

		// set the clicked space to red
		if (clicked != null && isMine(clicked)) {
			setPiece(clicked, Piece.MINE_RED);
		}

		// show mines on the board
		for (Space space : getAllSpaces()) {
			if (space.equals(clicked)) {
				continue;
			}
			Piece piece = getPiece(space);
			if (isMine(space)) {
				// but only on empty or marks
				if (piece == null || piece.isMark()) {
					setPiece(space, mine);
				}
			} else {
				// if the space has a flag but no mine, mark it as such
				if (piece == Piece.FLAG) {
					setPiece(space, Piece.FLAG_NOT);
				}
			}
		}
	}

	/* Clicking */

	/**
	 * Handle standard game clicks
	 * 
	 * @param space  Space clicked
	 * @param action Type of click
	 */
	
	public void handleClick(Space space, ClickAction action) {
		// stop playing when the game is over
		if (gameOver) {
			return;
		}
		// simply passes it along to the dedicated function
		switch (action) {
		case DEFAULT:
			handleDefaultClick(space);
			break;
		case FLAG:
			handleFlagClick(space);
			break;
		case MARK:
			handleMarkClick(space);
			break;
		case CHEAT:
			handleCheatClick(space);
			break;
		}
	}

	/**
	 * Space clicking core, does the actual clicking action
	 * 
	 * @param space Space clicked
	 */
	
	private void clickSpace(Space space) {
		// if the space is not replaceable, stop now
		// called here so we don't click flags as they are mines
		if (!isReplaceable(space)) {
			return;
		}

		// if the space is a mine, we lose
		if (isMine(space)) {
			loseGame(space);
		}

		// otherwise do a normal click
		else {
			// sets the piece to the number of surrounding mines
			Piece newPiece = getNumber(space);
			setPiece(space, newPiece);

			// if the piece is 0, update surrounding pieces as none of them are mines
			// this won't eternally recur since this space is no longer clickable
			if (newPiece == Piece.N0) {
				for (Space neighbor : getNeighbors(space)) {
					clickSpace(neighbor);
				}
			}
		}
	}

	/**
	 * Default clicks, clicks a space and displays a number or loses the game
	 * 
	 * @param space Space clicked
	 */
	
	private void handleDefaultClick(Space space) {
		// first click should generate the minefield
		if (!firstClick) {
			firstClick(space);
		}

		// if the space cannot be replaced then stop here
		// as we run this function on every click
		if (isNumber(space)) {
			// if the number of flags around this space is the same as the number
			Space[] neighbors = getNeighbors(space);

			// count the flags around the piece
			int flags = 0;
			for (Space neighbor : neighbors) {
				if (getPiece(neighbor) == Piece.FLAG) {
					flags++;
				}
			}

			// same number of flags as the piece number?
			if (flags == getPiece(space).getNumber()) {
				// click all the spaces. This is a risky move if a flag is wrong
				for (Space neighbor : neighbors) {
					clickSpace(neighbor);
				}
			}
		}
		// otherwise if not a number, just click the space
		else {
			clickSpace(space);
		}

		// check just once at the end of clicking
		checkVictory();
	}

	/**
	 * Handle the first click in the game. This click will generate the minefield as
	 * it cannot be on a mine
	 * 
	 * @param space Space clicked
	 */
	
	private void firstClick(Space space) {
		generateMines(space);
		firstClick = true;
	}

	/**
	 * Flag clicks, essentially click once to add
	 * 
	 * @param space Space clicked
	 */
	
	private void handleFlagClick(Space space) {
		// if already a flag, set a mark
		Piece piece = getPiece(space);
		if (piece == Piece.FLAG) {
			setPiece(space, Piece.MARK_RED);
			flagCount--;
		}
		// remove marks
		else if (piece != null && piece.isMark()) {
			setPiece(space, null);
		}
		// otherwise if we can add one
		else if (isReplaceable(space)) {
			if(flagCount < data.mineCount) {
				setPiece(space, Piece.FLAG);
				flagCount++;
			}
		}
	}

	/**
	 * Mark clicks, changes the color of a mark
	 * 
	 * @param space Space clicked
	 */
	
	private void handleMarkClick(Space space) {
		// tobble the mark
		Piece piece = getPiece(space);
		if (piece == Piece.MARK_RED) {
			setPiece(space, Piece.MARK_GREEN);
		}
		// remove marks
		else if (piece == Piece.MARK_GREEN) {
			setPiece(space, Piece.MARK_BLUE);
		}
		// otherwise if we can add one
		else if (piece == Piece.MARK_BLUE) {
			setPiece(space, Piece.MARK_RED);
		}

		// if its a flag, remove it
		else if (piece == Piece.FLAG) {
			setPiece(space, Piece.MARK_RED);
			flagCount--;
		}

		// essentially all that is left here is null, but still
		else if (isReplaceable(space)) {
			setPiece(space, Piece.MARK_RED);
		}
	}

	/**
	 * Cheat clicks, click a space and it will show a "ghost" bomb if one exists
	 * 
	 * @param space Space clicked
	 */
	
	private void handleCheatClick(Space space) {
		// already ran, don't run again
		if (!canCheat()) {
			return;
		}

		// no mines if we have not clicked
		if (!firstClick) {
			// you cheated for the first click, useless move as now we don't care
			// about click protection
			firstClick(null);
		}

		// only marks and empty spaces can be cheated, to save accidental clicks
		Piece piece = getPiece(space);
		if (piece != null && !piece.isMark()) {
			return;
		}

		// if its a mine, show that
		if (isMine(space)) {
			setPiece(space, Piece.MINE_GREEN);
		}
		// otherwise click the space as we know its safe
		else {
			clickSpace(space);
		}

		// use a cheat
		cheats--;

		// need to check, since it could be the last click
		checkVictory();
	}

	/* Helper functions */

	/**
	 * Gets a list of all spaces
	 * 
	 * @return a list of all spaces
	 */
	
	public Space[] getAllSpaces() {
		Space[] spaces = new Space[width * height];

		// loop through all spaces, adding them to an array
		int i = 0;
		for (int y = 0; y < height; y++) {
			for (int x = 0; x < width; x++) {
				spaces[i] = new Space(x, y);
				i++;
			}
		}

		return spaces;
	}

	/**
	 * Helper function to get the coordinates of all 8 neighbors to the space Note
	 * that some may be invalid spaces
	 * 
	 * @param space Space around which to get neighbors
	 * @return an array of spaces of the 8 neighbors, or less on edges
	 */
	
	public Space[] getNeighbors(Space space) {
		// if not valid, return no neighbors
		if (!isValid(space)) {
			return new Space[0];
		}

		// array cannot be bigger than 8
		Space[] neighbors = new Space[8];
		int x = space.getX();
		int y = space.getY();

		// 2D loop from x - 1, y - 1 up to x + 1, y + 1
		int neighborCount = 0;
		for (int i = -1; i <= 1; i++) {
			for (int j = -1; j <= 1; j++) {
				// skip offset of 0,0 as that is the input space
				if (i == 0 && j == 0) {
					continue;
				}

				// make sure the space is valid before returning it
				Space neighbor = new Space(x + i, y + j);
				if (isValid(neighbor)) {
					neighbors[neighborCount] = neighbor;
					neighborCount++;
				}
			}
		}

		return neighbors;
	}

	/**
	 * Marks a space as needing update by the graphics display
	 * 
	 * @param space space needing an update
	 */
	
	public void markUpdate(Space space) {
		if (!update.contains(space)) {
			update.add(space);
		}
	}

	/**
	 * Returns the number to display on the space after clicking it Does not take
	 * bombs on this space into account, check isMine() first
	 * 
	 * @param space Space to check
	 * @return The number of bombs around this space
	 */
	
	public Piece getNumber(Space space) {
		// no space? no return
		if (!isValid(space)) {
			return null;
		}

		int count = 0;
		// check all the neighbors for a bomb
		for (Space neighbor : getNeighbors(space)) {
			// if they have one, add to the running total
			if (isMine(neighbor)) {
				count++;
			}
		}

		// return the specific piece
		return Piece.fromNumber(count);
	}

	/* Getters, setters, and basic return logic */

	/**
	 * Gets the piece on the specified space
	 * 
	 * @param space Space to check for a piece
	 * @return the piece on the specified space
	 */
	
	public Piece getPiece(Space space) {
		// invalid gets null
		if (!isValid(space)) {
			return null;
		}

		// otherwise go with the contained piece
		return pieces[space.getY()][space.getX()];
	}

	/**
	 * Placed a piece on a space
	 * 
	 * @param space Space to place the piece
	 * @param piece Piece to place on the space
	 */
	
	public void setPiece(Space space, Piece piece) {
		// must be valid
		if (isValid(space)) {
			pieces[space.getY()][space.getX()] = piece;
			markUpdate(space);
		}
	}

	/**
	 * Determines if a space contains a bomb
	 * 
	 * @param space Space to check
	 * @return True if the space contains a bomb
	 */
	
	public boolean isMine(Space space) {
		// not a valid space?
		if (!isValid(space)) {
			return false;
		}

		return mines[space.getY()][space.getX()];
	}

	/**
	 * Determines if a space appears enabled, or pressed up
	 * 
	 * @param space Space to check
	 * @return True if the space appears enabled
	 */
	
	public boolean isEnabled(Space space) {
		if (!isValid(space)) {
			return false;
		}

		Piece piece = getPiece(space);

		// if the space is empty, it pops up
		if (piece == null) {
			return true;
		}

		// otherwise go based on the contained value
		return piece.isEnabled();
	}

	/**
	 * Determines if the contents of a space can be replaced
	 * 
	 * @param space Space clicked
	 */
	
	private boolean isReplaceable(Space space) {
		// invalid spaces are always false
		if (!isValid(space)) {
			return false;
		}

		Piece piece = getPiece(space);

		// if the space is empty, it can be clicked
		if (piece == null) {
			return true;
		}

		// otherwise go based on the contained value
		return piece.isReplaceable();
	}

	/**
	 * Determines if the space is a number
	 * 
	 * @param space Space clicked
	 */
	
	private boolean isNumber(Space space) {
		// invalid spaces are always false
		if (!isValid(space)) {
			return false;
		}

		Piece piece = getPiece(space);

		// if the space is empty, it is not a number
		if (piece == null) {
			return false;
		}

		// otherwise go based on the contained value
		return piece.isNumber();
	}

	/* Data */

	/**
	 * Gets the width of the board
	 * 
	 * @return The width of the board
	 */
	
	public int getWidth() {
		return width;
	}

	/**
	 * Gets the height of the board
	 * 
	 * @return The height of the board
	 */
	
	public int getHeight() {
		return height;
	}

	/**
	 * Gets the number of mines left on the board
	 * 
	 * @return number of mines remaining
	 */
	
	public int getRemainingMines() {
		return data.mineCount - flagCount;
	}

	/**
	 * Checks if the player has used their cheat
	 * 
	 * @return if the player has used their cheat
	 */
	
	public boolean canCheat() {
		return cheats > 0;
	}

	/**
	 * Checks how many cheats the player has left
	 * 
	 * @return remaining cheats
	 */
	
	public int getCheats() {
		return cheats;
	}

	/**
	 * Checks if the game ended
	 * 
	 * @return true if the game ended
	 */
	
	public boolean gameOver() {
		return gameOver;
	}

	/**
	 * Checks if the player won the game
	 * 
	 * @return true if the player won the game
	 */
	
	public boolean hasWon() {
		return victory;
	}

	/**
	 * Checks if a space is within the bounds of this board
	 * 
	 * @param space Space to check
	 * @return true if the space is within this board
	 */
	
	public boolean isValid(Space space) {
		// no space?
		if (space == null) {
			return false;
		}

		// first, check if the space is entirely invalid
		if (space.getX() < 0 || space.getY() < 0) {
			return false;
		}

		// next, check if this is outside of this board
		if (space.getY() >= height || space.getX() >= width) {
			return false;
		}

		// fits in both? return true then
		return true;
	}

	/**
	 * Gets a list of spaces pending updates to update the button displays
	 * 
	 * @return a list of spaces needing an update
	 */
	
	public Queue<Space> getUpdates() {
		return update;
	}

	/**
	 * Actions that can be performed on click. Used by buttons to pass along a
	 * constant rather than a list of modifiers.
	 */
	
	public enum ClickAction {
		/** Normal click */
		DEFAULT,
		/** Placing a flag or mark */
		FLAG,
		/** Placing a mark of different colors */
		MARK,
		/** Safely clicking a mine */
		CHEAT;
	}
}
]]></text>
  </DocumentChange>
  <Command __id="5" _type="FileOpenCommand" docASTNodeCount="260" docActiveCodeLength="2374" docExpressionCount="151" docLength="3681" projectName="MineSweeper" timestamp="95432">
    <filePath><![CDATA[C:\Users\Eye-tracking\git\MineSweeper-Experiment\src\logic\MineSweeper.java]]></filePath>
    <snapshot><![CDATA[/*
BUG REPORT #1
When you start the MineSweeper program, if you click on the New Game button, it will crash.
*/

package logic;
import javax.swing.JOptionPane;
import javax.swing.UIManager;

import presentation.CustomMenu;
import presentation.MineSweeperGui;

/**
 * Main launcher class for MineSweeper, containing all the menus and general
 * prompts
 *
 * @author  KnightMiner
 */

public class MineSweeper {
    // currently running instance of the game
    private static MineSweeperGui gui;

    /**
     * Primary way to boot the game
     * @param args  Default args (unused)
     */
    
    public static void main(String[] args) {
        // High DPI stuff
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        }
        catch(Exception e) {
            e.printStackTrace();
        }

        // load the help panels
        // this has a side effect of loading the icons for the pieces
        Help.load();

        // start the game on easy
        newGame(Difficulty.EASY);
    }

    /**
     * Creates a new MineSweeper game with one of three default sizes or custom
     * @param difficulty Game difficulty
     */
    
    public static void newGame(Difficulty difficulty) {
        // difficulty switch
        MineSweeperBoard board = null;
        switch(difficulty) {
            case EASY:
                board = new MineSweeperBoard(9, 9, 10, 0);
                break;
            case NORMAL:
                board = new MineSweeperBoard(16, 16, 40, 1);
                break;
            case HARD:
                board = new MineSweeperBoard(30, 16, 99, 3);
                break;
            case CUSTOM:
                board = customGame();
                break;
        }

        startGame(board);
    }

    /**
     * Creates a new game with the custom size
     * @return  A board of the custom size
     */
    
    public static MineSweeperBoard customGame() {
        CustomMenu menu = new CustomMenu();

        int result = JOptionPane.showConfirmDialog(null, menu,
                "Custom", JOptionPane.OK_CANCEL_OPTION,
                JOptionPane.PLAIN_MESSAGE);

        // if they pressed OK
        if(result == JOptionPane.OK_OPTION) {
            return menu.createBoard();
        }
        else {
            return null;
        }
    }

    /**
     * Starts a new game with the specified board
     * @param board  Game board to start
     */
    
    public static void startGame(MineSweeperBoard board) {
        // must be a valid board
        if(board != null) {
            // remove the current gui and define the new one
            if(gui != null) {
                gui.dispose();
            }

            // create a new instance
            gui = new MineSweeperGui(board);
        }
    }

    /**
     * List of buttons for the GUI
     */
    
    public enum Difficulty {
        /** Easy game */
        EASY("Easy"),
        /** Normal game */
        NORMAL("Normal"),
        /** Hard game */
        HARD("Expert"),
        /** Custom size and mines from the GUI */
        CUSTOM("Custom");

        // data
        private String label;

        /**
         * Default constructor
         * @param  Button label
         */
        
        Difficulty(String label) {
            this.label = label;
        }

        /**
         * Gets the label for the difficulty
         * @return  Difficulty name
         */
        
        public String getLabel() {
            return label;
        }
    }
}
]]></snapshot>
  </Command>
  <Command __id="6" _type="MoveCaretCommand" caretOffset="69" docOffset="170" timestamp="95477" />
  <Command __id="7" _type="ShellBoundsCommand" bounds="[0, 0, 0, 0]" timestamp="98766" />
  <Command __id="8" _type="ShellBoundsCommand" bounds="[-8, -8, 1936, 1056]" timestamp="181956" />
  <Command __id="9" _type="RunCommand" kind="Create" projectName="MineSweeper" timestamp="195029" type="Run" />
  <Command __id="10" _type="RunCommand" exitValue="0" kind="Terminate" projectName="MineSweeper" timestamp="221891" type="Run" />
  <Command __id="11" _type="MoveCaretCommand" caretOffset="429" docOffset="429" timestamp="223827" />
  <Command __id="12" _type="RunCommand" kind="Create" projectName="MineSweeper" timestamp="242142" type="Run" />
  <Command __id="13" _type="RunCommand" exitValue="0" kind="Terminate" projectName="MineSweeper" timestamp="259540" type="Run" />
  <Command __id="14" _type="RunCommand" kind="Create" projectName="MineSweeper" timestamp="272254" type="Run" />
  <Command __id="15" _type="RunCommand" exitValue="0" kind="Terminate" projectName="MineSweeper" timestamp="276288" type="Run" />
  <Command __id="16" _type="MoveCaretCommand" caretOffset="399" docOffset="399" timestamp="276539" />
  <Command __id="17" _type="MoveCaretCommand" caretOffset="1085" docOffset="1085" timestamp="282362" />
  <Command __id="18" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" timestamp="283303" />
  <Command __id="19" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" timestamp="285375" />
  <DocumentChange __id="20" _type="Insert" docASTNodeCount="260" docActiveCodeLength="2384" docExpressionCount="151" docLength="3691" length="10" offset="1078" timestamp="286116">
    <text><![CDATA[
        ]]></text>
  </DocumentChange>
  <Command __id="21" _type="InsertStringCommand" timestamp="286122">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="22" _type="Insert" docASTNodeCount="267" docActiveCodeLength="2422" docExpressionCount="157" docLength="3729" length="38" offset="1088" repeat="36" timestamp="287943" timestamp2="297876">
    <text><![CDATA[System.out.println("started progrma");]]></text>
  </DocumentChange>
  <Command __id="23" _type="InsertStringCommand" repeat="7" timestamp="287945" timestamp2="288696">
    <data><![CDATA[System.]]></data>
  </Command>
  <Command __id="36" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" start_end="START" timestamp="288735" />
  <Command __id="40" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" start_end="END" timestamp="289938" />
  <Command __id="41" _type="InsertStringCommand" timestamp="289940">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="43" _type="InsertStringCommand" timestamp="290327">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="44" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" start_end="START" timestamp="290328" />
  <Command __id="54" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" start_end="END" timestamp="294646" />
  <Command __id="56" _type="InsertStringCommand" repeat="15" timestamp="294884" timestamp2="296387">
    <data><![CDATA[started progrma]]></data>
  </Command>
  <Command __id="85" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" repeat="2" timestamp="296701" timestamp2="297362" />
  <Command __id="88" _type="InsertStringCommand" timestamp="297879">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="89" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" timestamp="298090" />
  <Command __id="90" _type="MoveCaretCommand" caretOffset="803" docOffset="803" timestamp="298803" />
  <Command __id="92" _type="FindCommand" caseSensitive="false" forward="true" matchWord="false" offset="803" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="309663" wrapSearch="true">
    <searchString><![CDATA[startGame]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="93" _type="FindCommand" caseSensitive="false" forward="true" matchWord="false" offset="1890" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="310345" wrapSearch="true">
    <searchString><![CDATA[startGame]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="94" _type="MoveCaretCommand" caretOffset="2860" docOffset="2860" timestamp="322724" />
  <Command __id="96" _type="FindCommand" caseSensitive="false" forward="true" matchWord="false" offset="2860" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="333271" wrapSearch="true">
    <searchString><![CDATA[MineSweeperG]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="97" _type="FindCommand" caseSensitive="false" forward="true" matchWord="false" offset="2936" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="333813" wrapSearch="true">
    <searchString><![CDATA[MineSweeperG]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="98" _type="FindCommand" caseSensitive="false" forward="true" matchWord="false" offset="265" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="335477" wrapSearch="true">
    <searchString><![CDATA[MineSweeperG]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="99" _type="FindCommand" caseSensitive="false" forward="true" matchWord="false" offset="509" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="336487" wrapSearch="true">
    <searchString><![CDATA[MineSweeperG]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="100" _type="MoveCaretCommand" caretOffset="2946" docOffset="2946" timestamp="338538" />
  <Command __id="101" _type="MoveCaretCommand" caretOffset="1119" docOffset="1119" timestamp="357538" />
  <Command __id="102" _type="SelectTextCommand" caretOffset="1123" docEnd="1123" docOffset="1123" docStart="1116" end="1123" start="1116" timestamp="357867" />
  <Command __id="103" _type="SelectTextCommand" caretOffset="1128" docEnd="1128" docOffset="1128" docStart="1080" end="1128" start="1080" timestamp="358091" />
  <DocumentChange __id="104" _type="Delete" docASTNodeCount="260" docActiveCodeLength="2374" docExpressionCount="151" docLength="3681" endLine="44" length="48" offset="1080" startLine="43" timestamp="358427">
    <text><![CDATA[        System.out.println("started progrma");
]]></text>
  </DocumentChange>
  <Command __id="105" _type="CutCommand" timestamp="358443" />
  <Command __id="106" _type="MoveCaretCommand" caretOffset="1008" docOffset="1008" timestamp="359139" />
  <Command __id="107" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" timestamp="361101" />
  <Command __id="108" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" timestamp="361332" />
  <DocumentChange __id="109" _type="Insert" docASTNodeCount="260" docActiveCodeLength="2374" docExpressionCount="151" docLength="3682" length="1" offset="1043" timestamp="361601">
    <text><![CDATA[\]]></text>
  </DocumentChange>
  <Command __id="110" _type="InsertStringCommand" timestamp="361603">
    <data><![CDATA[\]]></data>
  </Command>
  <DocumentChange __id="111" _type="Delete" docASTNodeCount="260" docActiveCodeLength="2374" docExpressionCount="151" docLength="3681" endLine="41" length="1" offset="1043" startLine="41" timestamp="362084">
    <text><![CDATA[\]]></text>
  </DocumentChange>
  <Command __id="112" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" timestamp="362085" />
  <DocumentChange __id="113" _type="Insert" docASTNodeCount="260" docActiveCodeLength="2384" docExpressionCount="151" docLength="3691" length="10" offset="1043" timestamp="362238">
    <text><![CDATA[
        ]]></text>
  </DocumentChange>
  <Command __id="114" _type="InsertStringCommand" timestamp="362243">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="115" _type="Insert" docASTNodeCount="260" docActiveCodeLength="2384" docExpressionCount="151" docLength="3691" length="40" offset="1053" timestamp="362592">
    <text><![CDATA[System.out.println("started progrma");
]]></text>
  </DocumentChange>
  <Command __id="116" _type="PasteCommand" timestamp="362598" />
  <DocumentChange __id="117" _type="Delete" docASTNodeCount="267" docActiveCodeLength="2422" docExpressionCount="157" docLength="3729" endLine="43" length="2" offset="1091" startLine="42" timestamp="363204">
    <text><![CDATA[
]]></text>
  </DocumentChange>
  <Command __id="118" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" timestamp="363208" />
  <Command __id="119" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" timestamp="363787" />
  <Command __id="120" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" repeat="3" timestamp="363931" timestamp2="364244" />
  <DocumentChange __id="123" _type="Delete" docASTNodeCount="267" docActiveCodeLength="2420" docExpressionCount="157" docLength="3727" endLine="42" length="2" offset="1086" repeat="2" startLine="42" timestamp="364489" timestamp2="364788">
    <text><![CDATA[ma]]></text>
  </DocumentChange>
  <Command __id="124" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" repeat="2" timestamp="364492" timestamp2="364789" />
  <DocumentChange __id="127" _type="Insert" docASTNodeCount="267" docActiveCodeLength="2430" docExpressionCount="157" docLength="3737" length="10" offset="1086" repeat="10" timestamp="364920" timestamp2="366580">
    <text><![CDATA[am (befor ]]></text>
  </DocumentChange>
  <Command __id="128" _type="InsertStringCommand" repeat="10" timestamp="364922" timestamp2="366584">
    <data><![CDATA[am (befor ]]></data>
  </Command>
  <DocumentChange __id="147" _type="Delete" docASTNodeCount="267" docActiveCodeLength="2428" docExpressionCount="157" docLength="3735" endLine="42" length="2" offset="1094" repeat="2" startLine="42" timestamp="367333" timestamp2="367468">
    <text><![CDATA[r ]]></text>
  </DocumentChange>
  <Command __id="148" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" repeat="2" timestamp="367335" timestamp2="367470" />
  <DocumentChange __id="151" _type="Insert" docASTNodeCount="267" docActiveCodeLength="2429" docExpressionCount="157" docLength="3736" length="1" offset="1094" timestamp="367594">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="152" _type="InsertStringCommand" timestamp="367606">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="153" _type="Delete" docASTNodeCount="267" docActiveCodeLength="2428" docExpressionCount="157" docLength="3735" endLine="42" length="1" offset="1094" startLine="42" timestamp="367849">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="154" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" timestamp="367851" />
  <DocumentChange __id="155" _type="Insert" docASTNodeCount="267" docActiveCodeLength="2440" docExpressionCount="157" docLength="3747" length="12" offset="1094" repeat="12" timestamp="367973" timestamp2="369188">
    <text><![CDATA[re new game)]]></text>
  </DocumentChange>
  <Command __id="156" _type="InsertStringCommand" repeat="12" timestamp="367976" timestamp2="369192">
    <data><![CDATA[re new game)]]></data>
  </Command>
  <Command __id="179" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" timestamp="369589" />
  <Command __id="180" _type="MoveCaretCommand" caretOffset="1144" docOffset="1144" timestamp="370332" />
  <Command __id="181" _type="FileOpenCommand" docASTNodeCount="1297" docActiveCodeLength="11112" docExpressionCount="863" docLength="13984" projectName="MineSweeper" timestamp="380963">
    <filePath><![CDATA[C:\Users\Eye-tracking\git\MineSweeper-Experiment\src\presentation\MineSweeperGui.java]]></filePath>
    <snapshot><![CDATA[package presentation;
import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import java.io.File;
import java.net.URL;
import java.util.Queue;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;

import logic.Help;
import logic.MineSweeper;
import logic.MineSweeperBoard;
import util.Space;

/**
 * Main GUI object for Minesweeper games. Called when gameplay is ready
 *
 * @author  KnightMiner
 */

public class MineSweeperGui extends JFrame implements ActionListener {
    // data
    private MineSweeperBoard board;

    // states
    private boolean isCheating;

    // buttons and labels
    private JLabel mines;
    private MineButton[][] buttons;

    private JButton buttonNewGame;
    private JButton buttonCheat;

    // menus
    private JMenuBar bar;
    private JMenu menuMineSweeper;

    private JMenu menuNewGame;
    private JMenuItem buttonRestart;
    private JMenuItem buttonSave;
    private JMenuItem buttonLoad;
    private JMenuItem buttonExit;

    private JMenu menuHelp;
    private JMenuItem buttonRules;
    private JMenuItem buttonMenu;
    private JMenuItem buttonDifficulty;

    /**
     * Makes a new minesweaper window
     * @param board  Input board, the display will take the size and pieces on the board
     */
    
    public MineSweeperGui(MineSweeperBoard board) {
        this.setTitle("MineSweeper");
        this.board = board;

        // construct the top menu
        bar = new JMenuBar();
        setJMenuBar(bar);

        // miscelanous actions
        menuMineSweeper = new JMenu("MineSweeper");
        bar.add(menuMineSweeper);

        // new game menu
        menuNewGame = new JMenu("New Game");
        menuMineSweeper.add(menuNewGame);

        // add all difficulties
        for(MineSweeper.Difficulty difficulty : MineSweeper.Difficulty.values()) {
            DifficultyButton button = new DifficultyButton(difficulty);
            menuNewGame.add(button);
        }


        // restarts the current game
        buttonRestart = new JMenuItem("Restart");
        buttonRestart.addActionListener(this);
        menuMineSweeper.add(buttonRestart);

        // saves the current game
        buttonSave = new JMenuItem("Save game");
        buttonSave.addActionListener(this);
        menuMineSweeper.add(buttonSave);

        // loads a new game from a file
        buttonLoad = new JMenuItem("Load game");
        buttonLoad.addActionListener(this);
        menuMineSweeper.add(buttonLoad);

        // exits the game
        menuMineSweeper.addSeparator();
        buttonExit = new JMenuItem("Exit");
        buttonExit.addActionListener(this);
        menuMineSweeper.add(buttonExit);

        // help menu
        menuHelp = new JMenu("Help");
        bar.add(menuHelp);

        // shows the rules
        buttonRules = new JMenuItem("Rules");
        buttonRules.addActionListener(this);
        menuHelp.add(buttonRules);

        // shows help about the menu
        buttonMenu = new JMenuItem("Menus");
        buttonMenu.addActionListener(this);
        menuHelp.add(buttonMenu);

        // shows available difficulties
        buttonDifficulty = new JMenuItem("Difficulties");
        buttonDifficulty.addActionListener(this);
        menuHelp.add(buttonDifficulty);


        // GUI Layout

        // gives use four regions and a center
        Container pane = getContentPane();
        pane.setLayout(new BorderLayout());


        // new game with same dimensions
        buttonNewGame = new JButton("New game");
        buttonNewGame.addActionListener(this);

        // remaining mines display
        mines = new JLabel("Mines", SwingConstants.CENTER);
        updateMines();

        // top row of the board
        Container top = new Container();
        top.setLayout(new GridLayout(1, 3));
        top.add(mines);
        top.add(buttonNewGame);


        // cheating, skip if 0 cheats to start
        if(board.canCheat()) {
            buttonCheat = new JButton();
            updateCheat();
            buttonCheat.addActionListener(this);
            top.add(buttonCheat);
        } else {
            top.add(new JLabel(""));
        }

        top.setPreferredSize(new Dimension(20, top.getFontMetrics(buttonNewGame.getFont()).getHeight() * 2));

        pane.add(top, BorderLayout.NORTH);


        // main button grid
        Container minesContainer = new Container();
        int width2 = board.getWidth();
        int height2 = board.getHeight();
        minesContainer.setLayout(new GridLayout(height2, width2));
        buttons = new MineButton[height2][width2];

        // and add them all
        for(int y = 0; y < height2; y++) {
            for(int x = 0; x < width2; x++) {
                // add buttons, and store them
                buttons[y][x] = new MineButton(this, board, new Space(x, y));
                minesContainer.add(buttons[y][x]);
            }
        }

        pane.add(minesContainer, BorderLayout.CENTER);


        // sizes, we need them for the top bar
        int width = board.getWidth() * 40;
        int height = board.getHeight() * 40 + 100;

        setSize(width, height);
        setVisible(true);

        // eventually I will replace this with an event that fires a prompt
        // basically, allow the user to save their game before quitting
        setDefaultCloseOperation(EXIT_ON_CLOSE);
    }

    /**
     * Gets a MineButton at the specified location
     * @param space  Location of the button
     * @return  the button at the location
     */
    
    public MineButton getButton(Space space) {
        if(!board.isValid(space)) {
            return null;
        }
        return buttons[space.getY()][space.getX()];
    }

    /**
     * Updates all spaces pending update to display their current value
     */
    
    public void updateSpaces() {
        Queue<Space> queue = board.getUpdates();
        while(!queue.isEmpty()) {
            Space space = queue.poll();
            MineButton update = getButton(space);
            if(update != null) {
                update.updatePiece();
            }
        }

        updateMines();
    }

    /**
     * Updates the mines display
     */
    
    public void updateMines() {
        mines.setText(String.format("Mines: %d", board.getRemainingMines()));
    }

    /**
     * Sets the cheat status
     * @param cheat  Whether the user is in cheat mode
     */
    
    private void setCheating(boolean cheat) {
        // and change the button text
        if(cheat) {
            buttonCheat.setText("Cancel cheat");
            isCheating = true;
        }
        // otherwise, run general cheating code
        else {
            updateCheat();
        }
    }

    /**
     * Sets the cheat button to used
     */
    
    public void updateCheat() {
        // if we can cheat, set the label
        if(board.canCheat()) {
            buttonCheat.setText("Cheats: " + board.getCheats());
            buttonCheat.setEnabled(true);
        }
        // otherwise, set the out of cheats label
        else {
            buttonCheat.setText("Out of cheats");
            buttonCheat.setEnabled(false);
        }
        isCheating = false;
    }

    /**
     * Sets the cheat button to used
     */
    
    public void resetButtons() {
        buttonNewGame.setText("New game");

        updateCheat();
        updateSpaces();
    }

    /**
     * Sets the winning text
     * @param victory  Whether the player won
     */
    
    public void gameOver(boolean victory) {
        if(victory) {
            buttonNewGame.setText("You Win!");
        }
        else {
            buttonNewGame.setText("You Lose");
        }
    }

    /**
     * Checks if the cheat button is active
     * @return  true if the cheat button is active
     */
    
    public boolean isCheating() {
        return isCheating;
    }

    /**
     * Called when the 'X' button is pressed on the window
     * @param e  Event the button is called with
     */
    
    public void windowClosing(WindowEvent e) {
        // simply run the menu
        //this.menu();
    }

    /**
     * Handles all single instance buttons
     * @param e  Calling event
     */
    
    @Override
    public void actionPerformed(ActionEvent e) {
        Object button = e.getSource();

        // restart the current game
        if(button == buttonNewGame) {
            // make the board new
            board.newGame();

            // and clear game data
            resetButtons();
            return;
        }

        // restart the current game
        if(button == buttonRestart) {
            // make the board new
            board.restart();

            // and clear game data
            resetButtons();
            return;
        }

        // saves the game
        if(button == buttonSave) {
            String filename = JOptionPane.showInputDialog(this,
                    "Enter filename to save game",
                    "MineSweeper - Save game",
                    JOptionPane.QUESTION_MESSAGE
                    );

            // user canceled
            if(filename == null || filename.equals("")) {
                return;
            }

            // if it exists, prompt to continue
            if(new File(filename + ".bin").exists()) {
                int result = JOptionPane.showConfirmDialog(this,
                        "Save game " + filename + " already exists, overwrite?",
                        "MineSweeper - Save game",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.ERROR_MESSAGE
                        );

                if(result != JOptionPane.YES_OPTION) {
                    return;
                }
            }

            board.saveGame(filename);
        }

        // loads the game
        if(button == buttonLoad) {
            String filename = JOptionPane.showInputDialog(this,
                    "Enter filename to load game",
                    "MineSweeper - Load game",
                    JOptionPane.QUESTION_MESSAGE
                    );

            // user canceled
            if(filename == null || filename.equals("")) {
                return;
            }

            // if it exists, prompt to continue
            if(new File(filename + ".bin").exists()) {
                MineSweeperBoard board = MineSweeperBoard.loadGame(filename);
                if(board != null) {
                    MineSweeper.startGame(board);
                }
                // did not load right
                else {
                    JOptionPane.showMessageDialog(this,
                            "Error reading save game " + filename,
                            "MineSweeper - Load game",
                            JOptionPane.ERROR_MESSAGE
                            );
                }
            }
            else {
                // file does not exist
                JOptionPane.showMessageDialog(this,
                        "Saved game " + filename + " does not exist",
                        "MineSweeper - Load game",
                        JOptionPane.ERROR_MESSAGE
                        );
            }
        }

        // cheat button
        if(button == buttonCheat) {
            // no cheating too many times
            if(!board.canCheat()) {
                return;
            }

            // toggle cheating
            setCheating(!isCheating);
            return;
        }

        // cheat button
        if(button == buttonExit) {
            this.dispose();
            return;
        }


        /* Help */

        // rules
        if(button == buttonRules) {
            Help.showRules(this);
        }

        // menus
        if(button == buttonMenu) {
            Help.menuHelp(this);
        }

        // rules
        if(button == buttonDifficulty) {
            Help.difficultyHelp(this);
        }
    }

    /**
     * Returns an ImageIcon, or null if the path was invalid.
     * @author  Larry Vail
     * @param  path  Icon path
     * @param  description  Basic description of the icon
     * @return  Returns the icon at the path, or null if the path is invalid
     */
    
    protected ImageIcon createImageIcon(String path, String description) {
        URL imgURL = getClass().getResource(path);
        if (imgURL != null) {
            return new ImageIcon(imgURL, description);
        } else {
            System.err.println("Couldn't find file: " + path);
            return null;
        }
    }

    /**
     * Common code for difficulty buttons
     */
    
    private class DifficultyButton extends JMenuItem implements ActionListener {
        // data
        private MineSweeper.Difficulty difficulty;

        public DifficultyButton(MineSweeper.Difficulty difficulty) {
            super(difficulty.getLabel());

            this.difficulty = difficulty;
            this.addActionListener(this);
        }

        /**
         * Called when the button is clicked
         */
        
        @Override
        public void actionPerformed(ActionEvent e) {
            MineSweeper.newGame(difficulty);
        }
    }
}
]]></snapshot>
  </Command>
  <Command __id="182" _type="MoveCaretCommand" caretOffset="0" docOffset="0" timestamp="381040" />
  <Command __id="183" _type="MoveCaretCommand" caretOffset="342" docOffset="983" timestamp="381611" />
  <Command __id="184" _type="RunCommand" kind="Create" projectName="MineSweeper" timestamp="397247" type="Run" />
  <Command __id="185" _type="MoveCaretCommand" caretOffset="8512" docOffset="9153" timestamp="436659" />
  <DocumentChange __id="186" _type="Insert" docASTNodeCount="1297" docActiveCodeLength="11126" docExpressionCount="863" docLength="13998" length="14" offset="9153" timestamp="445361">
    <text><![CDATA[
            ]]></text>
  </DocumentChange>
  <Command __id="187" _type="InsertStringCommand" timestamp="445366">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="188" _type="Insert" docASTNodeCount="1297" docActiveCodeLength="11140" docExpressionCount="863" docLength="14012" length="14" offset="9167" timestamp="446038">
    <text><![CDATA[
            ]]></text>
  </DocumentChange>
  <Command __id="189" _type="InsertStringCommand" timestamp="446044">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="190" _type="Insert" docASTNodeCount="1297" docActiveCodeLength="11154" docExpressionCount="863" docLength="14026" length="14" offset="9181" timestamp="446199">
    <text><![CDATA[
            ]]></text>
  </DocumentChange>
  <Command __id="191" _type="InsertStringCommand" timestamp="446205">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="192" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" timestamp="446452" />
  <DocumentChange __id="193" _type="Insert" docASTNodeCount="1303" docActiveCodeLength="11170" docExpressionCount="868" docLength="14042" length="16" offset="9181" repeat="16" timestamp="448719" timestamp2="450790">
    <text><![CDATA[System.out.print]]></text>
  </DocumentChange>
  <Command __id="194" _type="InsertStringCommand" repeat="7" timestamp="448722" timestamp2="449666">
    <data><![CDATA[System.]]></data>
  </Command>
  <Command __id="207" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" start_end="START" timestamp="449667" />
  <Command __id="211" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" start_end="END" timestamp="450237" />
  <Command __id="213" _type="InsertStringCommand" timestamp="450252">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="214" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" start_end="START" timestamp="450254" />
  <DocumentChange __id="220" _type="Delete" docASTNodeCount="1297" docActiveCodeLength="11153" docExpressionCount="863" docLength="14025" endLine="332" length="17" offset="9180" repeat="17" startLine="332" timestamp="451621" timestamp2="454020">
    <text><![CDATA[ System.out.print]]></text>
  </DocumentChange>
  <Command __id="238" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" start_end="END" timestamp="455297" />
  <Command __id="239" _type="FindCommand" caseSensitive="false" forward="true" matchWord="false" offset="9180" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="457201" wrapSearch="true">
    <searchString><![CDATA[resetButtons]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="240" _type="FindCommand" caseSensitive="false" forward="true" matchWord="false" offset="7907" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="468512" wrapSearch="true">
    <searchString><![CDATA[updateCheat]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="241" _type="FindCommand" caseSensitive="false" forward="true" matchWord="false" offset="4513" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="469272" wrapSearch="true">
    <searchString><![CDATA[updateCheat]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="242" _type="FindCommand" caseSensitive="false" forward="true" matchWord="false" offset="7291" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="469646" wrapSearch="true">
    <searchString><![CDATA[updateCheat]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="243" _type="FindCommand" caseSensitive="false" forward="true" matchWord="false" offset="7978" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="470366" wrapSearch="true">
    <searchString><![CDATA[updateCheat]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="244" _type="FindCommand" caseSensitive="false" forward="true" matchWord="false" offset="4513" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="470893" wrapSearch="true">
    <searchString><![CDATA[updateCheat]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="245" _type="FindCommand" caseSensitive="false" forward="true" matchWord="false" offset="7291" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="471270" wrapSearch="true">
    <searchString><![CDATA[updateCheat]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="246" _type="FindCommand" caseSensitive="false" forward="true" matchWord="false" offset="7978" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="471896" wrapSearch="true">
    <searchString><![CDATA[updateCheat]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="247" _type="FindCommand" caseSensitive="false" forward="true" matchWord="false" offset="4513" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="472279" wrapSearch="true">
    <searchString><![CDATA[updateCheat]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="248" _type="FindCommand" caseSensitive="false" forward="true" matchWord="false" offset="7291" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="472446" wrapSearch="true">
    <searchString><![CDATA[updateCheat]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="249" _type="FindCommand" caseSensitive="false" forward="true" matchWord="false" offset="7978" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="473005" wrapSearch="true">
    <searchString><![CDATA[updateCheat]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="250" _type="MoveCaretCommand" caretOffset="3868" docOffset="4509" timestamp="477700" />
  <Command __id="251" _type="SelectTextCommand" caretOffset="3872" docEnd="4513" docOffset="4513" docStart="4502" end="3872" start="3861" timestamp="477851" />
  <Command __id="252" _type="MoveCaretCommand" caretOffset="3971" docOffset="4612" timestamp="492068" />
  <Command __id="253" _type="EclipseCommand" commandID="org.eclipse.search.ui.openSearchDialog" timestamp="499532" />
  <Command __id="254" _type="MoveCaretCommand" caretOffset="1277" docOffset="1918" timestamp="507766" />
  <Command __id="256" _type="FindCommand" caseSensitive="false" forward="true" matchWord="false" offset="1918" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="511640" wrapSearch="true">
    <searchString><![CDATA[updateCheat]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="257" _type="FindCommand" caseSensitive="false" forward="true" matchWord="false" offset="4513" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="513086" wrapSearch="true">
    <searchString><![CDATA[updateCheat]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="258" _type="MoveCaretCommand" caretOffset="6729" docOffset="7370" timestamp="516643" />
  <Command __id="259" _type="MoveCaretCommand" caretOffset="6811" docOffset="7452" timestamp="518083" />
  <DocumentChange __id="260" _type="Insert" docASTNodeCount="1297" docActiveCodeLength="11160" docExpressionCount="863" docLength="14032" length="7" offset="7452" timestamp="521271">
    <text><![CDATA[
    	]]></text>
  </DocumentChange>
  <Command __id="261" _type="InsertStringCommand" timestamp="521281">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="262" _type="Insert" docASTNodeCount="1297" docActiveCodeLength="11167" docExpressionCount="863" docLength="14039" length="7" offset="7459" timestamp="521446">
    <text><![CDATA[
    	]]></text>
  </DocumentChange>
  <Command __id="263" _type="InsertStringCommand" timestamp="521450">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="264" _type="Insert" docASTNodeCount="1297" docActiveCodeLength="11174" docExpressionCount="863" docLength="14046" length="7" offset="7466" timestamp="521590">
    <text><![CDATA[
    	]]></text>
  </DocumentChange>
  <Command __id="265" _type="InsertStringCommand" timestamp="521596">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="266" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" repeat="2" timestamp="521737" timestamp2="521890" />
  <DocumentChange __id="268" _type="Insert" docASTNodeCount="1297" docActiveCodeLength="11181" docExpressionCount="863" docLength="14053" length="7" offset="7459" timestamp="522494">
    <text><![CDATA[
    	]]></text>
  </DocumentChange>
  <Command __id="269" _type="InsertStringCommand" timestamp="522499">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="270" _type="Insert" docASTNodeCount="1304" docActiveCodeLength="11223" docExpressionCount="869" docLength="14095" length="42" offset="7466" repeat="40" timestamp="522726" timestamp2="532405">
    <text><![CDATA[System.out.println("inside updateCheat ");]]></text>
  </DocumentChange>
  <Command __id="271" _type="InsertStringCommand" repeat="7" timestamp="522728" timestamp2="523841">
    <data><![CDATA[System.]]></data>
  </Command>
  <Command __id="284" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" start_end="START" timestamp="523842" />
  <Command __id="288" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" start_end="END" timestamp="524331" />
  <Command __id="290" _type="InsertStringCommand" timestamp="524337">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="291" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" start_end="START" timestamp="524339" />
  <Command __id="300" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" start_end="END" timestamp="527144" />
  <Command __id="302" _type="InsertStringCommand" timestamp="527150">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="303" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" repeat="2" timestamp="527436" timestamp2="527547" />
  <Command __id="306" _type="InsertStringCommand" repeat="19" timestamp="528194" timestamp2="531215">
    <data><![CDATA["inside updateCheat]]></data>
  </Command>
  <Command __id="343" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" timestamp="531779" />
  <Command __id="345" _type="InsertStringCommand" timestamp="532407">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="346" _type="Delete" docASTNodeCount="1304" docActiveCodeLength="11222" docExpressionCount="869" docLength="14094" endLine="261" length="1" offset="7504" startLine="261" timestamp="532740">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="347" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" timestamp="532743" />
  <DocumentChange __id="348" _type="Insert" docASTNodeCount="1304" docActiveCodeLength="11226" docExpressionCount="869" docLength="14098" length="4" offset="7504" repeat="4" timestamp="533032" timestamp2="535221">
    <text><![CDATA[..? ]]></text>
  </DocumentChange>
  <Command __id="349" _type="InsertStringCommand" repeat="2" timestamp="533033" timestamp2="533183">
    <data><![CDATA[..]]></data>
  </Command>
  <Command __id="352" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" timestamp="533625" />
  <Command __id="354" _type="InsertStringCommand" repeat="2" timestamp="533841" timestamp2="535224">
    <data><![CDATA[? ]]></data>
  </Command>
  <DocumentChange __id="357" _type="Delete" docASTNodeCount="1304" docActiveCodeLength="11225" docExpressionCount="869" docLength="14097" endLine="261" length="1" offset="7507" startLine="261" timestamp="536296">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="358" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" timestamp="536302" />
  <Command __id="359" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" timestamp="536649" />
  <DocumentChange __id="360" _type="Insert" docASTNodeCount="1306" docActiveCodeLength="11234" docExpressionCount="871" docLength="14106" length="9" offset="7508" repeat="9" timestamp="536805" timestamp2="538732">
    <text><![CDATA[ + board ]]></text>
  </DocumentChange>
  <Command __id="361" _type="InsertStringCommand" repeat="9" timestamp="536808" timestamp2="538735">
    <data><![CDATA[ + board ]]></data>
  </Command>
  <Command __id="378" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" timestamp="539464" />
  <Command __id="379" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" repeat="10" timestamp="539979" timestamp2="541403" />
  <DocumentChange __id="389" _type="Insert" docASTNodeCount="1306" docActiveCodeLength="11235" docExpressionCount="871" docLength="14107" length="1" offset="7507" timestamp="541527">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="390" _type="InsertStringCommand" timestamp="541529">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="391" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" timestamp="541934" />
  <Command __id="392" _type="RunCommand" kind="Create" projectName="MineSweeper" timestamp="545037" type="Run" />
  <Command __id="393" _type="MoveCaretCommand" caretOffset="7112" docOffset="7753" timestamp="552347" />
  <Command __id="394" _type="MoveCaretCommand" caretOffset="7130" docOffset="7771" timestamp="556131" />
  <Command __id="395" _type="SelectTextCommand" caretOffset="7137" docEnd="7778" docOffset="7778" docStart="7767" end="7137" start="7126" timestamp="556795" />
  <Command __id="396" _type="MoveCaretCommand" caretOffset="6877" docOffset="7518" timestamp="561459" />
  <DocumentChange __id="397" _type="Insert" docASTNodeCount="1308" docActiveCodeLength="11254" docExpressionCount="873" docLength="14126" length="19" offset="7518" repeat="18" timestamp="562359" timestamp2="566149">
    <text><![CDATA[+ " " + buttonCheat]]></text>
  </DocumentChange>
  <Command __id="398" _type="InsertStringCommand" repeat="4" timestamp="562364" timestamp2="563077">
    <data><![CDATA[+ " ]]></data>
  </Command>
  <Command __id="405" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" timestamp="563625" />
  <Command __id="407" _type="InsertStringCommand" repeat="14" timestamp="563792" timestamp2="566151">
    <data><![CDATA[ + buttonCheat]]></data>
  </Command>
  <Command __id="434" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" timestamp="566784" />
  <Command __id="435" _type="MoveCaretCommand" caretOffset="6912" docOffset="7553" timestamp="572370" />
  <Command __id="436" _type="RunCommand" kind="Create" projectName="MineSweeper" timestamp="574659" type="Run" />
  <Command __id="437" _type="MoveCaretCommand" caretOffset="6818" docOffset="7459" timestamp="580074" />
  <Command __id="439" _type="FindCommand" caseSensitive="false" forward="true" matchWord="false" offset="7459" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="583084" wrapSearch="true">
    <searchString><![CDATA[buttonCheat]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="440" _type="FindCommand" caseSensitive="false" forward="true" matchWord="false" offset="12139" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="584309" wrapSearch="true">
    <searchString><![CDATA[buttonCheat]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="441" _type="FindCommand" caseSensitive="false" forward="true" matchWord="false" offset="1145" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="585918" wrapSearch="true">
    <searchString><![CDATA[buttonCheat]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="442" _type="MoveCaretCommand" caretOffset="3725" docOffset="4366" timestamp="611011" />
  <DocumentChange __id="443" _type="Insert" docASTNodeCount="1308" docActiveCodeLength="11264" docExpressionCount="873" docLength="14136" length="10" offset="4366" timestamp="611871">
    <text><![CDATA[
        ]]></text>
  </DocumentChange>
  <Command __id="444" _type="InsertStringCommand" timestamp="611874">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="445" _type="Delete" docASTNodeCount="1308" docActiveCodeLength="11254" docExpressionCount="873" docLength="14126" endLine="153" length="10" offset="4366" repeat="9" startLine="152" timestamp="612589" timestamp2="614429">
    <text><![CDATA[
        ]]></text>
  </DocumentChange>
  <Command __id="446" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" repeat="9" timestamp="612590" timestamp2="614432" />
  <DocumentChange __id="463" _type="Insert" docASTNodeCount="1310" docActiveCodeLength="11268" docExpressionCount="874" docLength="14140" length="14" offset="4366" repeat="7" timestamp="615008" timestamp2="616757">
    <text><![CDATA[        system]]></text>
  </DocumentChange>
  <Command __id="464" _type="InsertStringCommand" repeat="7" timestamp="615009" timestamp2="616759">
    <data><![CDATA[	system]]></data>
  </Command>
  <DocumentChange __id="477" _type="Delete" docASTNodeCount="1308" docActiveCodeLength="11262" docExpressionCount="873" docLength="14134" endLine="152" length="6" offset="4374" repeat="6" startLine="152" timestamp="617029" timestamp2="617745">
    <text><![CDATA[system]]></text>
  </DocumentChange>
  <Command __id="478" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" repeat="6" timestamp="617032" timestamp2="617746" />
  <DocumentChange __id="489" _type="Insert" docASTNodeCount="1314" docActiveCodeLength="11282" docExpressionCount="878" docLength="14154" length="20" offset="4374" repeat="19" timestamp="617997" timestamp2="620218">
    <text><![CDATA[System.out.println()]]></text>
  </DocumentChange>
  <Command __id="490" _type="InsertStringCommand" repeat="7" timestamp="618001" timestamp2="618816">
    <data><![CDATA[System.]]></data>
  </Command>
  <Command __id="503" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" start_end="START" timestamp="618817" />
  <Command __id="507" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" start_end="END" timestamp="619285" />
  <Command __id="509" _type="InsertStringCommand" timestamp="619292">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="510" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" start_end="START" timestamp="619294" />
  <Command __id="519" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" start_end="END" timestamp="621789" />
  <Command __id="520" _type="MoveCaretCommand" caretOffset="3875" docOffset="4516" timestamp="621963" />
  <Command __id="521" _type="MoveCaretCommand" caretOffset="3752" docOffset="4393" timestamp="624258" />
  <Command __id="522" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" timestamp="624955" />
  <Command __id="523" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" timestamp="625837" />
  <DocumentChange __id="524" _type="Insert" docASTNodeCount="1317" docActiveCodeLength="11306" docExpressionCount="881" docLength="14178" length="24" offset="4393" repeat="23" timestamp="626656" timestamp2="631917">
    <text><![CDATA["Can I cheat? " + button]]></text>
  </DocumentChange>
  <Command __id="525" _type="InsertStringCommand" timestamp="626658">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="526" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" timestamp="627026" />
  <Command __id="527" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" timestamp="627407" />
  <Command __id="529" _type="InsertStringCommand" repeat="13" timestamp="627680" timestamp2="629689">
    <data><![CDATA[Can I cheat? ]]></data>
  </Command>
  <Command __id="554" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" timestamp="630133" />
  <Command __id="556" _type="InsertStringCommand" repeat="9" timestamp="630400" timestamp2="631919">
    <data><![CDATA[ + button]]></data>
  </Command>
  <DocumentChange __id="573" _type="Delete" docASTNodeCount="1316" docActiveCodeLength="11300" docExpressionCount="881" docLength="14172" endLine="152" length="6" offset="4411" repeat="6" startLine="152" timestamp="632269" timestamp2="633381">
    <text><![CDATA[button]]></text>
  </DocumentChange>
  <Command __id="574" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" repeat="6" timestamp="632270" timestamp2="633383" />
  <DocumentChange __id="585" _type="Insert" docASTNodeCount="1317" docActiveCodeLength="11306" docExpressionCount="881" docLength="14178" length="6" offset="4411" repeat="6" timestamp="633454" timestamp2="634149">
    <text><![CDATA[boarch]]></text>
  </DocumentChange>
  <Command __id="586" _type="InsertStringCommand" repeat="6" timestamp="633457" timestamp2="634151">
    <data><![CDATA[boarch]]></data>
  </Command>
  <DocumentChange __id="597" _type="Delete" docASTNodeCount="1317" docActiveCodeLength="11304" docExpressionCount="881" docLength="14176" endLine="152" length="2" offset="4415" repeat="2" startLine="152" timestamp="634437" timestamp2="634582">
    <text><![CDATA[ch]]></text>
  </DocumentChange>
  <Command __id="598" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" repeat="2" timestamp="634439" timestamp2="634583" />
  <DocumentChange __id="601" _type="Insert" docASTNodeCount="1319" docActiveCodeLength="11311" docExpressionCount="883" docLength="14183" length="12" offset="4415" repeat="8" timestamp="634638" timestamp2="636357">
    <text><![CDATA[d.canCheat()]]></text>
  </DocumentChange>
  <Command __id="602" _type="InsertStringCommand" repeat="2" timestamp="634642" timestamp2="635391">
    <data><![CDATA[d.]]></data>
  </Command>
  <Command __id="605" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" start_end="START" timestamp="635393" />
  <Command __id="611" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" start_end="END" timestamp="636355" />
  <Command __id="613" _type="InsertStringCommand" timestamp="636361">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="614" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" timestamp="636795" />
  <DocumentChange __id="615" _type="Insert" docASTNodeCount="1319" docActiveCodeLength="11317" docExpressionCount="883" docLength="14189" length="1" offset="4428" timestamp="637393">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <Command __id="616" _type="InsertStringCommand" timestamp="637396">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="617" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" timestamp="637630" />
  <Command __id="618" _type="MoveCaretCommand" caretOffset="3455" docOffset="4096" timestamp="639587" />
  <Command __id="620" _type="FindCommand" caseSensitive="false" forward="true" matchWord="false" offset="4096" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="642144" wrapSearch="true">
    <searchString><![CDATA[inside update]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="621" _type="MoveCaretCommand" caretOffset="6961" docOffset="7602" timestamp="644459" />
  <Command __id="622" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" repeat="3" timestamp="645469" timestamp2="646450" />
  <Command __id="625" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" repeat="5" timestamp="652149" timestamp2="652775" />
  <DocumentChange __id="630" _type="Insert" docASTNodeCount="1319" docActiveCodeLength="11328" docExpressionCount="883" docLength="14200" length="11" offset="7835" timestamp="653737">
    <text><![CDATA[
        	]]></text>
  </DocumentChange>
  <Command __id="631" _type="InsertStringCommand" timestamp="653741">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="632" _type="Insert" docASTNodeCount="1319" docActiveCodeLength="11339" docExpressionCount="883" docLength="14211" length="11" offset="7846" timestamp="653901">
    <text><![CDATA[
        	]]></text>
  </DocumentChange>
  <Command __id="633" _type="InsertStringCommand" timestamp="653907">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="634" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" timestamp="654045" />
  <DocumentChange __id="635" _type="Insert" docASTNodeCount="1325" docActiveCodeLength="11356" docExpressionCount="886" docLength="14228" length="17" offset="7846" repeat="17" timestamp="655553" timestamp2="657373">
    <text><![CDATA[Systemout.println]]></text>
  </DocumentChange>
  <Command __id="636" _type="InsertStringCommand" repeat="10" timestamp="655557" timestamp2="656542">
    <data><![CDATA[Systemout.]]></data>
  </Command>
  <Command __id="655" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" start_end="START" timestamp="656543" />
  <Command __id="656" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" start_end="END" timestamp="656563" />
  <Command __id="658" _type="InsertStringCommand" repeat="7" timestamp="656816" timestamp2="657376">
    <data><![CDATA[println]]></data>
  </Command>
  <DocumentChange __id="671" _type="Delete" docASTNodeCount="1323" docActiveCodeLength="11345" docExpressionCount="884" docLength="14217" endLine="270" length="11" offset="7852" repeat="11" startLine="270" timestamp="657669" timestamp2="658876">
    <text><![CDATA[out.println]]></text>
  </DocumentChange>
  <Command __id="672" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" repeat="11" timestamp="657671" timestamp2="658877" />
  <DocumentChange __id="693" _type="Insert" docASTNodeCount="1326" docActiveCodeLength="11419" docExpressionCount="889" docLength="14291" length="74" offset="7852" repeat="72" timestamp="659117" timestamp2="671676">
    <text><![CDATA[.out.println("you cannot cheat! (but you're accessing buttonCheat..???)");]]></text>
  </DocumentChange>
  <Command __id="694" _type="InsertStringCommand" timestamp="659120">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="695" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" start_end="START" timestamp="659121" />
  <Command __id="699" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" start_end="END" timestamp="659614" />
  <Command __id="701" _type="InsertStringCommand" timestamp="659620">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="702" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" start_end="START" timestamp="659622" />
  <Command __id="712" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" start_end="END" timestamp="661270" />
  <Command __id="714" _type="InsertStringCommand" repeat="56" timestamp="661571" timestamp2="669708">
    <data><![CDATA[you cannot cheat! (but you're accessing buttonCheat..???]]></data>
  </Command>
  <Command __id="825" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" timestamp="670075" />
  <Command __id="827" _type="InsertStringCommand" timestamp="670683">
    <data><![CDATA[)]]></data>
  </Command>
  <Command __id="828" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" repeat="2" timestamp="671061" timestamp2="671254" />
  <Command __id="831" _type="InsertStringCommand" timestamp="671680">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="832" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" repeat="6" timestamp="671997" timestamp2="672733" />
  <Command __id="838" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.SELECT_LINE_UP" repeat="2" timestamp="673000" timestamp2="673315" />
  <Command __id="840" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" timestamp="673782" />
  <Command __id="841" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.SELECT_LINE_DOWN" timestamp="674220" />
  <DocumentChange __id="842" _type="Delete" docASTNodeCount="1315" docActiveCodeLength="11338" docExpressionCount="879" docLength="14210" endLine="262" length="81" offset="7528" repeat="2" startLine="261" timestamp="674482" timestamp2="674868">
    <text><![CDATA[	System.out.println("inside updateCheat..? " + board + " " + buttonCheat);
    	]]></text>
  </DocumentChange>
  <Command __id="843" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" repeat="2" timestamp="674489" timestamp2="674869" />
  <DocumentChange __id="846" _type="Insert" docASTNodeCount="1315" docActiveCodeLength="11338" docExpressionCount="879" docLength="14210" length="44" offset="7528" timestamp="675703">
    <text><![CDATA[    System.out.println("started progrma");
]]></text>
  </DocumentChange>
  <Command __id="847" _type="PasteCommand" timestamp="675760" />
  <DocumentChange __id="848" _type="Delete" docASTNodeCount="1315" docActiveCodeLength="11330" docExpressionCount="879" docLength="14202" endLine="263" length="52" offset="7522" repeat="3" startLine="260" timestamp="676283" timestamp2="678643">
    <text><![CDATA[
        System.out.println("started progrma");

]]></text>
  </DocumentChange>
  <Command __id="849" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" timestamp="676291" />
  <Command __id="850" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.SELECT_LINE_UP" timestamp="676964" />
  <Command __id="852" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" timestamp="677188" />
  <Command __id="853" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" timestamp="677633" />
  <Command __id="855" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" timestamp="678651" />
  <Command __id="856" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" timestamp="679022" />
  <Command __id="857" _type="RunCommand" kind="Create" projectName="MineSweeper" timestamp="680703" type="Run" />
  <Command __id="858" _type="MoveCaretCommand" caretOffset="7360" docOffset="8001" timestamp="686114" />
  <Command __id="859" _type="MoveCaretCommand" caretOffset="7342" docOffset="7983" timestamp="687003" />
  <Command __id="861" _type="FindCommand" caseSensitive="false" forward="false" matchWord="false" offset="7983" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="697391" wrapSearch="true">
    <searchString><![CDATA[board.canCheat]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="862" _type="FindCommand" caseSensitive="false" forward="false" matchWord="false" offset="7554" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="698107" wrapSearch="true">
    <searchString><![CDATA[board.canCheat]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="863" _type="FindCommand" caseSensitive="false" forward="false" matchWord="false" offset="7554" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="698948" wrapSearch="true">
    <searchString><![CDATA[board.canCheat]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="864" _type="FindCommand" caseSensitive="false" forward="false" matchWord="false" offset="7554" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="699443" wrapSearch="true">
    <searchString><![CDATA[board.canCheat]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="865" _type="MoveCaretCommand" caretOffset="7105" docOffset="7746" timestamp="701851" />
  <Command __id="866" _type="MoveCaretCommand" caretOffset="3750" docOffset="4391" timestamp="707539" />
  <Command __id="867" _type="SelectTextCommand" caretOffset="3751" docEnd="4392" docOffset="4392" docStart="4385" end="3751" start="3744" timestamp="707707" />
  <Command __id="868" _type="SelectTextCommand" caretOffset="3790" docEnd="4431" docOffset="4431" docStart="4366" end="3790" start="3725" timestamp="708067" />
  <Command __id="869" _type="MoveCaretCommand" caretOffset="4003" docOffset="4644" timestamp="709291" />
  <Command __id="870" _type="SelectTextCommand" caretOffset="4054" docEnd="4720" docOffset="4695" docStart="4695" end="4079" start="4054" timestamp="711322" />
  <Command __id="871" _type="SelectTextCommand" caretOffset="4090" docEnd="4731" docOffset="4731" docStart="4487" end="4090" start="3846" timestamp="715354" />
  <Command __id="872" _type="CopyCommand" timestamp="716954" />
  <Command __id="873" _type="CopyCommand" timestamp="717403" />
  <Command __id="874" _type="CopyCommand" timestamp="717560" />
  <Command __id="875" _type="CopyCommand" timestamp="717704" />
  <Command __id="876" _type="MoveCaretCommand" caretOffset="3868" docOffset="4509" timestamp="718138" />
  <Command __id="877" _type="MoveCaretCommand" caretOffset="3663" docOffset="4304" timestamp="721827" />
  <DocumentChange __id="879" _type="Insert" docASTNodeCount="1319" docActiveCodeLength="11336" docExpressionCount="880" docLength="14208" length="6" offset="4304" repeat="6" timestamp="722691" timestamp2="723229">
    <text><![CDATA[update]]></text>
  </DocumentChange>
  <Command __id="880" _type="InsertStringCommand" repeat="6" timestamp="722695" timestamp2="723231">
    <data><![CDATA[update]]></data>
  </Command>
  <DocumentChange __id="891" _type="Delete" docASTNodeCount="1315" docActiveCodeLength="11330" docExpressionCount="879" docLength="14202" endLine="148" length="6" offset="4304" repeat="6" startLine="148" timestamp="723385" timestamp2="724116">
    <text><![CDATA[update]]></text>
  </DocumentChange>
  <Command __id="892" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" repeat="6" timestamp="723387" timestamp2="724118" />
  <Command __id="904" _type="SelectTextCommand" caretOffset="3845" docEnd="4731" docOffset="4486" docStart="4486" end="4090" start="3845" timestamp="731722" />
  <Command __id="905" _type="PasteCommand" timestamp="732139" />
  <DocumentChange __id="906" _type="Insert" docASTNodeCount="1348" docActiveCodeLength="11574" docExpressionCount="902" docLength="14446" length="244" offset="4731" timestamp="732309">
    <text><![CDATA[if(board.canCheat()) {
            buttonCheat = new JButton();
            updateCheat();
            buttonCheat.addActionListener(this);
            top.add(buttonCheat);
        } else {
            top.add(new JLabel(""));
        }]]></text>
  </DocumentChange>
  <Command __id="907" _type="PasteCommand" timestamp="732321" />
  <Command __id="908" _type="MoveCaretCommand" caretOffset="3938" docOffset="4579" timestamp="734300" />
  <DocumentChange __id="909" _type="Delete" docASTNodeCount="1315" docActiveCodeLength="11330" docExpressionCount="879" docLength="14202" endLine="168" length="244" offset="4731" startLine="161" timestamp="735716">
    <text><![CDATA[if(board.canCheat()) {
            buttonCheat = new JButton();
            updateCheat();
            buttonCheat.addActionListener(this);
            top.add(buttonCheat);
        } else {
            top.add(new JLabel(""));
        }]]></text>
  </DocumentChange>
  <Command __id="910" _type="UndoCommand" timestamp="735727" />
  <Command __id="911" _type="SelectTextCommand" caretOffset="3732" docEnd="4731" docOffset="4373" docStart="4373" end="4090" start="3732" timestamp="739227" />
  <Command __id="912" _type="CopyCommand" timestamp="740263" />
  <Command __id="913" _type="CopyCommand" timestamp="740466" />
  <Command __id="914" _type="CopyCommand" timestamp="740646" />
  <Command __id="915" _type="MoveCaretCommand" caretOffset="3868" docOffset="4509" timestamp="741124" />
  <Command __id="916" _type="FindCommand" caseSensitive="false" forward="true" matchWord="false" offset="4509" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="772337" wrapSearch="true">
    <searchString><![CDATA[updateCheat]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="917" _type="FindCommand" caseSensitive="false" forward="true" matchWord="false" offset="7354" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="776373" wrapSearch="true">
    <searchString><![CDATA[updateCheat]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="918" _type="FindCommand" caseSensitive="false" forward="true" matchWord="false" offset="8155" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="779053" wrapSearch="true">
    <searchString><![CDATA[updateCheat]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="919" _type="FindCommand" caseSensitive="false" forward="true" matchWord="false" offset="4576" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="781372" wrapSearch="true">
    <searchString><![CDATA[updateCheat]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="920" _type="FindCommand" caseSensitive="false" forward="true" matchWord="false" offset="7354" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="789941" wrapSearch="true">
    <searchString><![CDATA[updateCheat]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="921" _type="MoveCaretCommand" caretOffset="7491" docOffset="8132" timestamp="795266" />
  <Command __id="922" _type="FindCommand" caseSensitive="false" forward="true" matchWord="false" offset="8132" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="803637" wrapSearch="true">
    <searchString><![CDATA[updateCheat]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="923" _type="FindCommand" caseSensitive="false" forward="true" matchWord="false" offset="4576" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="806231" wrapSearch="true">
    <searchString><![CDATA[updateCheat]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="924" _type="FindCommand" caseSensitive="false" forward="true" matchWord="false" offset="7354" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="844554" wrapSearch="true">
    <searchString><![CDATA[setCheating]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="925" _type="FindCommand" caseSensitive="false" forward="true" matchWord="false" offset="12397" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="848120" wrapSearch="true">
    <searchString><![CDATA[setCheating]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="926" _type="FindCommand" caseSensitive="false" forward="true" matchWord="false" offset="7094" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="849373" wrapSearch="true">
    <searchString><![CDATA[setCheating]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="927" _type="RunCommand" kind="Create" projectName="MineSweeper" timestamp="855680" type="Run" />
  <Command __id="928" _type="SelectTextCommand" caretOffset="11682" docEnd="12323" docOffset="12323" docStart="12194" end="11682" start="11553" timestamp="905107" />
  <Command __id="930" _type="FindCommand" caseSensitive="false" forward="true" matchWord="false" offset="12323" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="910079" wrapSearch="true">
    <searchString><![CDATA[setCheating]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="931" _type="MoveCaretCommand" caretOffset="7220" docOffset="7861" timestamp="934579" />
  <Command __id="932" _type="FindCommand" caseSensitive="false" forward="true" matchWord="false" offset="7861" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="944297" wrapSearch="true">
    <searchString><![CDATA[updateCheat]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="933" _type="FindCommand" caseSensitive="false" forward="true" matchWord="false" offset="4576" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="945549" wrapSearch="true">
    <searchString><![CDATA[updateCheat]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="934" _type="FindCommand" caseSensitive="false" forward="true" matchWord="false" offset="7354" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="946605" wrapSearch="true">
    <searchString><![CDATA[updateCheat]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="935" _type="MoveCaretCommand" caretOffset="7517" docOffset="8158" timestamp="948178" />
  <Command __id="936" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" timestamp="948874" />
  <DocumentChange __id="937" _type="Insert" docASTNodeCount="1315" docActiveCodeLength="11340" docExpressionCount="879" docLength="14212" length="10" offset="8134" timestamp="949071">
    <text><![CDATA[
        ]]></text>
  </DocumentChange>
  <Command __id="938" _type="InsertStringCommand" timestamp="949077">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="939" _type="Insert" docASTNodeCount="1315" docActiveCodeLength="11340" docExpressionCount="879" docLength="14222" length="10" offset="8144" repeat="10" timestamp="949783" timestamp2="950947">
    <text><![CDATA[// update ]]></text>
  </DocumentChange>
  <Command __id="940" _type="InsertStringCommand" repeat="10" timestamp="949785" timestamp2="950950">
    <data><![CDATA[// update ]]></data>
  </Command>
  <DocumentChange __id="959" _type="Delete" docASTNodeCount="1315" docActiveCodeLength="11340" docExpressionCount="879" docLength="14221" endLine="282" length="1" offset="8153" startLine="282" timestamp="951876">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="960" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" timestamp="951878" />
  <DocumentChange __id="961" _type="Insert" docASTNodeCount="1315" docActiveCodeLength="11340" docExpressionCount="879" docLength="14240" length="19" offset="8153" repeat="19" timestamp="952036" timestamp2="953940">
    <text><![CDATA[Cheat is only every]]></text>
  </DocumentChange>
  <Command __id="962" _type="InsertStringCommand" repeat="19" timestamp="952039" timestamp2="953943">
    <data><![CDATA[Cheat is only every]]></data>
  </Command>
  <DocumentChange __id="999" _type="Delete" docASTNodeCount="1315" docActiveCodeLength="11340" docExpressionCount="879" docLength="14239" endLine="282" length="1" offset="8171" startLine="282" timestamp="954348">
    <text><![CDATA[y]]></text>
  </DocumentChange>
  <Command __id="1000" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" timestamp="954349" />
  <DocumentChange __id="1001" _type="Insert" docASTNodeCount="1315" docActiveCodeLength="11340" docExpressionCount="879" docLength="14247" length="8" offset="8171" repeat="8" timestamp="954469" timestamp2="955268">
    <text><![CDATA[ called ]]></text>
  </DocumentChange>
  <Command __id="1002" _type="InsertStringCommand" repeat="8" timestamp="954472" timestamp2="955271">
    <data><![CDATA[ called ]]></data>
  </Command>
  <DocumentChange __id="1017" _type="Delete" docASTNodeCount="1315" docActiveCodeLength="11340" docExpressionCount="879" docLength="14246" endLine="282" length="1" offset="8178" startLine="282" timestamp="955690">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="1018" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" timestamp="955696" />
  <DocumentChange __id="1019" _type="Insert" docASTNodeCount="1315" docActiveCodeLength="11340" docExpressionCount="879" docLength="14311" length="65" offset="8178" repeat="65" timestamp="956043" timestamp2="963701">
    <text><![CDATA[ when the board is good with me cheating (in the other instances)]]></text>
  </DocumentChange>
  <Command __id="1020" _type="InsertStringCommand" repeat="65" timestamp="956047" timestamp2="963703">
    <data><![CDATA[ when the board is good with me cheating (in the other instances)]]></data>
  </Command>
  <DocumentChange __id="1149" _type="Insert" docASTNodeCount="1315" docActiveCodeLength="11350" docExpressionCount="879" docLength="14321" length="10" offset="8243" timestamp="963949">
    <text><![CDATA[
        ]]></text>
  </DocumentChange>
  <Command __id="1150" _type="InsertStringCommand" timestamp="963958">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1151" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" timestamp="964416" />
  <DocumentChange __id="1152" _type="Insert" docASTNodeCount="1319" docActiveCodeLength="11364" docExpressionCount="882" docLength="14335" length="14" offset="8253" repeat="13" timestamp="964931" timestamp2="966428">
    <text><![CDATA[if (board.che)]]></text>
  </DocumentChange>
  <Command __id="1153" _type="InsertStringCommand" repeat="10" timestamp="964933" timestamp2="965840">
    <data><![CDATA[if (board.]]></data>
  </Command>
  <Command __id="1172" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" start_end="START" timestamp="965842" />
  <Command __id="1176" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" start_end="END" timestamp="967097" />
  <DocumentChange __id="1177" _type="Replace" docASTNodeCount="1319" docActiveCodeLength="11371" docExpressionCount="882" docLength="14342" endLine="283" insertionLength="9" int_docASTNodeCount="1319" int_docActiveCodeLength="11362" int_docExpressionCount="882" int_docLength="14333" length="2" offset="8264" startLine="283" timestamp="967100">
    <deletedText><![CDATA[he]]></deletedText>
    <insertedText><![CDATA[anCheat()]]></insertedText>
  </DocumentChange>
  <Command __id="1178" _type="InsertStringCommand" timestamp="967103">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1179" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" timestamp="967757" />
  <Command __id="1180" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.toggleOverwrite" repeat="2" timestamp="968291" timestamp2="969372" />
  <Command __id="1182" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineStart" timestamp="969764" />
  <DocumentChange __id="1183" _type="Insert" docASTNodeCount="1319" docActiveCodeLength="11371" docExpressionCount="882" docLength="14342" length="1" offset="8284" timestamp="970189">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <Command __id="1184" _type="InsertStringCommand" timestamp="970193">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="1185" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" timestamp="971117" />
  <Command __id="1186" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" timestamp="971605" />
  <DocumentChange __id="1187" _type="Insert" docASTNodeCount="1319" docActiveCodeLength="11383" docExpressionCount="882" docLength="14354" length="11" offset="8274" timestamp="972212">
    <text><![CDATA[
        	]]></text>
  </DocumentChange>
  <Command __id="1188" _type="InsertStringCommand" timestamp="972217">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="1189" _type="Replace" docASTNodeCount="1320" docActiveCodeLength="11383" docExpressionCount="882" docLength="14354" endLine="284" insertionLength="1" int_docASTNodeCount="1319" int_docActiveCodeLength="11382" int_docExpressionCount="882" int_docLength="14353" length="1" offset="8284" startLine="284" timestamp="972968">
    <deletedText><![CDATA[	]]></deletedText>
    <insertedText><![CDATA[{]]></insertedText>
  </DocumentChange>
  <Command __id="1190" _type="InsertStringCommand" timestamp="972971">
    <data><![CDATA[{]]></data>
  </Command>
  <Command __id="1191" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" timestamp="973381" />
  <Command __id="1192" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" timestamp="974611" />
  <DocumentChange __id="1193" _type="Insert" docASTNodeCount="1320" docActiveCodeLength="11394" docExpressionCount="882" docLength="14365" length="11" offset="8310" timestamp="974886">
    <text><![CDATA[
        	]]></text>
  </DocumentChange>
  <Command __id="1194" _type="InsertStringCommand" timestamp="974890">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="1195" _type="Replace" docASTNodeCount="1320" docActiveCodeLength="11394" docExpressionCount="882" docLength="14365" endLine="286" insertionLength="1" int_docASTNodeCount="1320" int_docActiveCodeLength="11393" int_docExpressionCount="882" int_docLength="14364" length="1" offset="8320" startLine="286" timestamp="975142">
    <deletedText><![CDATA[	]]></deletedText>
    <insertedText><![CDATA[}]]></insertedText>
  </DocumentChange>
  <Command __id="1196" _type="InsertStringCommand" timestamp="975145">
    <data><![CDATA[}]]></data>
  </Command>
  <Command __id="1197" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" timestamp="975501" />
  <Command __id="1198" _type="SelectTextCommand" caretOffset="7680" docEnd="8346" docOffset="8321" docStart="8321" end="7705" start="7680" timestamp="976187" />
  <Command __id="1199" _type="SelectTextCommand" caretOffset="7705" docEnd="8353" docOffset="8346" docStart="8346" end="7712" start="7705" timestamp="976877" />
  <Command __id="1200" _type="RunCommand" kind="Create" projectName="MineSweeper" timestamp="980022" type="Run" />
  <Command __id="1201" _type="RunCommand" exitValue="0" kind="Terminate" projectName="MineSweeper" timestamp="990102" type="Run" />
  <Command __id="1202" _type="MoveCaretCommand" caretOffset="7493" docOffset="8134" timestamp="990466" />
  <Command __id="1204" _type="FindCommand" caseSensitive="false" forward="true" matchWord="false" offset="8134" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="993648" wrapSearch="true">
    <searchString><![CDATA[updateCheat]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="1205" _type="FindCommand" caseSensitive="false" forward="true" matchWord="false" offset="4576" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="995646" wrapSearch="true">
    <searchString><![CDATA[updateCheat]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="1206" _type="FindCommand" caseSensitive="false" forward="true" matchWord="false" offset="7354" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="996278" wrapSearch="true">
    <searchString><![CDATA[updateCheat]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="1207" _type="MoveCaretCommand" caretOffset="7633" docOffset="8274" timestamp="999722" />
  <Command __id="1208" _type="MoveCaretCommand" caretOffset="7491" docOffset="8132" timestamp="1000522" />
  <DocumentChange __id="1209" _type="Insert" docASTNodeCount="1364" docActiveCodeLength="11714" docExpressionCount="915" docLength="14723" length="358" offset="8132" timestamp="1001456">
    <text><![CDATA[ System.out.println("Can I cheat? " + board.canCheat());
        // cheating, skip if 0 cheats to start
        if(board.canCheat()) {
            buttonCheat = new JButton();
            updateCheat();
            buttonCheat.addActionListener(this);
            top.add(buttonCheat);
        } else {
            top.add(new JLabel(""));
        }]]></text>
  </DocumentChange>
  <Command __id="1210" _type="PasteCommand" timestamp="1001461" />
  <DocumentChange __id="1211" _type="Delete" docASTNodeCount="1320" docActiveCodeLength="11394" docExpressionCount="882" docLength="14365" endLine="289" length="358" offset="8132" startLine="280" timestamp="1002773">
    <text><![CDATA[ System.out.println("Can I cheat? " + board.canCheat());
        // cheating, skip if 0 cheats to start
        if(board.canCheat()) {
            buttonCheat = new JButton();
            updateCheat();
            buttonCheat.addActionListener(this);
            top.add(buttonCheat);
        } else {
            top.add(new JLabel(""));
        }]]></text>
  </DocumentChange>
  <Command __id="1212" _type="UndoCommand" timestamp="1002780" />
  <Command __id="1213" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.select.lineStart" timestamp="1004556" />
  <Command __id="1214" _type="FindCommand" caseSensitive="false" forward="true" matchWord="false" offset="8132" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="1014050" wrapSearch="true">
    <searchString><![CDATA[println]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="1215" _type="FindCommand" caseSensitive="false" forward="true" matchWord="false" offset="13629" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="1014934" wrapSearch="true">
    <searchString><![CDATA[println]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="1216" _type="MoveCaretCommand" caretOffset="3788" docOffset="4429" timestamp="1017947" />
  <Command __id="1217" _type="SelectTextCommand" caretOffset="3790" docEnd="4431" docOffset="4431" docStart="4366" end="3790" start="3725" timestamp="1018298" />
  <DocumentChange __id="1218" _type="Delete" docASTNodeCount="1309" docActiveCodeLength="11329" docExpressionCount="872" docLength="14300" endLine="153" length="65" offset="4366" startLine="152" timestamp="1018915">
    <text><![CDATA[        System.out.println("Can I cheat? " + board.canCheat());
]]></text>
  </DocumentChange>
  <Command __id="1219" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" timestamp="1018929" />
  <Command __id="1220" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" timestamp="1019350" />
  <Command __id="1221" _type="FindCommand" caseSensitive="false" forward="true" matchWord="false" offset="4366" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="1020492" wrapSearch="true">
    <searchString><![CDATA[println]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="1222" _type="MoveCaretCommand" caretOffset="7099" docOffset="7740" timestamp="1022210" />
  <Command __id="1223" _type="SelectTextCommand" caretOffset="7100" docEnd="7741" docOffset="7741" docStart="7735" end="7100" start="7094" timestamp="1022523" />
  <Command __id="1224" _type="SelectTextCommand" caretOffset="7133" docEnd="7774" docOffset="7774" docStart="7683" end="7133" start="7042" timestamp="1022722" />
  <DocumentChange __id="1225" _type="Delete" docASTNodeCount="1302" docActiveCodeLength="11227" docExpressionCount="866" docLength="14198" endLine="267" length="102" offset="7681" repeat="3" startLine="265" timestamp="1026732" timestamp2="1027989">
    <text><![CDATA[
        	System.out.println("you cannot cheat! (but you're accessing buttonCheat..???)");
        	]]></text>
  </DocumentChange>
  <Command __id="1226" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" repeat="2" timestamp="1026741" timestamp2="1027330" />
  <Command __id="1229" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" timestamp="1027816" />
  <DocumentChange __id="1231" _type="Insert" docASTNodeCount="1302" docActiveCodeLength="11236" docExpressionCount="866" docLength="14207" length="11" offset="7681" timestamp="1027990">
    <text><![CDATA[
        	]]></text>
  </DocumentChange>
  <Command __id="1232" _type="InsertStringCommand" timestamp="1027996">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="1233" _type="Insert" docASTNodeCount="1302" docActiveCodeLength="11238" docExpressionCount="866" docLength="14258" length="49" offset="7692" repeat="49" timestamp="1028860" timestamp2="1034676">
    <text><![CDATA[// this code is pretty bad. I don't know the rigt]]></text>
  </DocumentChange>
  <Command __id="1234" _type="InsertStringCommand" repeat="49" timestamp="1028863" timestamp2="1034678">
    <data><![CDATA[// this code is pretty bad. I don't know the rigt]]></data>
  </Command>
  <DocumentChange __id="1331" _type="Delete" docASTNodeCount="1302" docActiveCodeLength="11238" docExpressionCount="866" docLength="14257" endLine="266" length="1" offset="7740" startLine="266" timestamp="1035092">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="1332" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" timestamp="1035094" />
  <DocumentChange __id="1333" _type="Insert" docASTNodeCount="1302" docActiveCodeLength="11238" docExpressionCount="866" docLength="14269" length="12" offset="7740" repeat="12" timestamp="1035314" timestamp2="1036364">
    <text><![CDATA[ht thing to ]]></text>
  </DocumentChange>
  <Command __id="1334" _type="InsertStringCommand" repeat="12" timestamp="1035323" timestamp2="1036366">
    <data><![CDATA[ht thing to ]]></data>
  </Command>
  <DocumentChange __id="1357" _type="Insert" docASTNodeCount="1302" docActiveCodeLength="11249" docExpressionCount="866" docLength="14280" length="11" offset="7752" timestamp="1036534">
    <text><![CDATA[
        	]]></text>
  </DocumentChange>
  <Command __id="1358" _type="InsertStringCommand" timestamp="1036540">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="1359" _type="Insert" docASTNodeCount="1302" docActiveCodeLength="11249" docExpressionCount="866" docLength="14322" length="42" offset="7763" repeat="42" timestamp="1036852" timestamp2="1042644">
    <text><![CDATA[// do here, but this certainly is NOT it? ]]></text>
  </DocumentChange>
  <Command __id="1360" _type="InsertStringCommand" repeat="42" timestamp="1036854" timestamp2="1042647">
    <data><![CDATA[// do here, but this certainly is NOT it? ]]></data>
  </Command>
  <Command __id="1443" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" timestamp="1043023" />
  <DocumentChange __id="1444" _type="Insert" docASTNodeCount="1302" docActiveCodeLength="11260" docExpressionCount="866" docLength="14333" length="11" offset="7805" timestamp="1043214">
    <text><![CDATA[
        	]]></text>
  </DocumentChange>
  <Command __id="1445" _type="InsertStringCommand" timestamp="1043224">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="1446" _type="Insert" docASTNodeCount="1305" docActiveCodeLength="11271" docExpressionCount="868" docLength="14344" length="11" offset="7816" repeat="10" timestamp="1043469" timestamp2="1044749">
    <text><![CDATA[asser t(fa)]]></text>
  </DocumentChange>
  <Command __id="1447" _type="InsertStringCommand" repeat="10" timestamp="1043473" timestamp2="1044750">
    <data><![CDATA[asser t(fa]]></data>
  </Command>
  <DocumentChange __id="1466" _type="Delete" docASTNodeCount="1302" docActiveCodeLength="11260" docExpressionCount="866" docLength="14333" endLine="268" length="11" offset="7816" repeat="11" startLine="268" timestamp="1044988" timestamp2="1046660">
    <text><![CDATA[asser t(fa)]]></text>
  </DocumentChange>
  <Command __id="1467" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" repeat="10" timestamp="1044989" timestamp2="1046662" />
  <Command __id="1487" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" timestamp="1046966" />
  <Command __id="1488" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" repeat="3" timestamp="1062398" timestamp2="1062686" />
  <Command __id="1491" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.toggleOverwrite" timestamp="1063339" />
  <DocumentChange __id="1492" _type="Replace" docASTNodeCount="1302" docActiveCodeLength="11260" docExpressionCount="866" docLength="14333" endLine="265" insertionLength="1" int_docASTNodeCount="1302" int_docActiveCodeLength="11259" int_docExpressionCount="866" int_docLength="14332" length="1" offset="7679" startLine="265" timestamp="1063997">
    <deletedText><![CDATA[ ]]></deletedText>
    <insertedText><![CDATA[/]]></insertedText>
  </DocumentChange>
  <Command __id="1493" _type="InsertStringCommand" repeat="3" timestamp="1064003" timestamp2="1065489">
    <data><![CDATA[/* ]]></data>
  </Command>
  <DocumentChange __id="1494" _type="Replace" docASTNodeCount="1268" docActiveCodeLength="11075" docExpressionCount="840" docLength="14334" endLine="265" insertionLength="2" int_docASTNodeCount="1299" int_docActiveCodeLength="11259" int_docExpressionCount="863" int_docLength="14332" length="1" offset="7680" repeat="2" startLine="265" timestamp="1065410" timestamp2="1065487">
    <deletedText><![CDATA[{]]></deletedText>
    <insertedText><![CDATA[* ]]></insertedText>
  </DocumentChange>
  <Command __id="1498" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.toggleOverwrite" timestamp="1065819" />
  <DocumentChange __id="1499" _type="Delete" docASTNodeCount="1268" docActiveCodeLength="11075" docExpressionCount="840" docLength="14333" endLine="265" length="1" offset="7681" startLine="265" timestamp="1067122">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="1500" _type="UndoCommand" repeat="3" timestamp="1067126" timestamp2="1067842" />
  <DocumentChange __id="1501" _type="Replace" docASTNodeCount="1302" docActiveCodeLength="11260" docExpressionCount="866" docLength="14333" endLine="265" insertionLength="2" int_docASTNodeCount="1299" int_docActiveCodeLength="11258" int_docExpressionCount="863" int_docLength="14331" length="2" offset="7679" startLine="265" timestamp="1067483">
    <deletedText><![CDATA[/*]]></deletedText>
    <insertedText><![CDATA[ {]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1503" _type="Insert" docASTNodeCount="1302" docActiveCodeLength="11269" docExpressionCount="866" docLength="14342" length="9" offset="7816" timestamp="1067839">
    <text><![CDATA[asser t()]]></text>
  </DocumentChange>
  <Command __id="1505" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" timestamp="1068397" />
  <Command __id="1506" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" timestamp="1068685" />
  <Command __id="1507" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.select.lineStart" timestamp="1069549" />
  <DocumentChange __id="1508" _type="Delete" docASTNodeCount="1302" docActiveCodeLength="11249" docExpressionCount="866" docLength="14322" endLine="268" length="20" offset="7805" repeat="11" startLine="267" timestamp="1069796" timestamp2="1072702">
    <text><![CDATA[
        	asser t()]]></text>
  </DocumentChange>
  <Command __id="1509" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" repeat="11" timestamp="1069798" timestamp2="1072707" />
  <Command __id="1530" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" repeat="8" timestamp="1072996" timestamp2="1074126" />
  <DocumentChange __id="1538" _type="Delete" docASTNodeCount="1302" docActiveCodeLength="11247" docExpressionCount="866" docLength="14320" endLine="259" length="2" offset="7460" repeat="2" startLine="259" timestamp="1074812" timestamp2="1075220">
    <text><![CDATA[ 	]]></text>
  </DocumentChange>
  <Command __id="1539" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" repeat="2" timestamp="1074814" timestamp2="1075221" />
  <DocumentChange __id="1542" _type="Insert" docASTNodeCount="1304" docActiveCodeLength="11248" docExpressionCount="867" docLength="14321" length="1" offset="7460" timestamp="1075428">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <Command __id="1543" _type="InsertStringCommand" timestamp="1075430">
    <data><![CDATA[a]]></data>
  </Command>
  <DocumentChange __id="1544" _type="Delete" docASTNodeCount="1302" docActiveCodeLength="11244" docExpressionCount="866" docLength="14317" endLine="259" length="4" offset="7457" repeat="4" startLine="259" timestamp="1075714" timestamp2="1076420">
    <text><![CDATA[   a]]></text>
  </DocumentChange>
  <Command __id="1545" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" repeat="4" timestamp="1075717" timestamp2="1076422" />
  <DocumentChange __id="1552" _type="Insert" docASTNodeCount="1307" docActiveCodeLength="11251" docExpressionCount="868" docLength="14324" length="7" offset="7457" repeat="7" timestamp="1076600" timestamp2="1077293">
    <text><![CDATA[asser t]]></text>
  </DocumentChange>
  <Command __id="1553" _type="InsertStringCommand" repeat="7" timestamp="1076603" timestamp2="1077295">
    <data><![CDATA[asser t]]></data>
  </Command>
  <DocumentChange __id="1566" _type="Delete" docASTNodeCount="1304" docActiveCodeLength="11249" docExpressionCount="867" docLength="14322" endLine="259" length="2" offset="7462" repeat="2" startLine="259" timestamp="1077804" timestamp2="1077956">
    <text><![CDATA[ t]]></text>
  </DocumentChange>
  <Command __id="1567" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" repeat="2" timestamp="1077807" timestamp2="1077958" />
  <DocumentChange __id="1570" _type="Insert" docASTNodeCount="1305" docActiveCodeLength="11255" docExpressionCount="868" docLength="14328" length="6" offset="7462" repeat="5" timestamp="1078031" timestamp2="1078586">
    <text><![CDATA[t (ba)]]></text>
  </DocumentChange>
  <Command __id="1571" _type="InsertStringCommand" repeat="5" timestamp="1078033" timestamp2="1078589">
    <data><![CDATA[t (ba]]></data>
  </Command>
  <DocumentChange __id="1580" _type="Delete" docASTNodeCount="1305" docActiveCodeLength="11254" docExpressionCount="868" docLength="14327" endLine="259" length="1" offset="7466" startLine="259" timestamp="1078947">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <Command __id="1581" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" timestamp="1078951" />
  <DocumentChange __id="1582" _type="Insert" docASTNodeCount="1305" docActiveCodeLength="11258" docExpressionCount="868" docLength="14331" length="4" offset="7466" repeat="4" timestamp="1079166" timestamp2="1079366">
    <text><![CDATA[poar]]></text>
  </DocumentChange>
  <Command __id="1583" _type="InsertStringCommand" repeat="4" timestamp="1079167" timestamp2="1079367">
    <data><![CDATA[poar]]></data>
  </Command>
  <DocumentChange __id="1590" _type="Delete" docASTNodeCount="1305" docActiveCodeLength="11254" docExpressionCount="868" docLength="14327" endLine="259" length="4" offset="7466" repeat="4" startLine="259" timestamp="1079749" timestamp2="1080213">
    <text><![CDATA[poar]]></text>
  </DocumentChange>
  <Command __id="1591" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" repeat="4" timestamp="1079751" timestamp2="1080214" />
  <DocumentChange __id="1598" _type="Insert" docASTNodeCount="1307" docActiveCodeLength="11262" docExpressionCount="870" docLength="14335" length="15" offset="7466" repeat="9" timestamp="1080489" timestamp2="1081728">
    <text><![CDATA[oard.canCheat()]]></text>
  </DocumentChange>
  <Command __id="1599" _type="InsertStringCommand" repeat="5" timestamp="1080492" timestamp2="1080904">
    <data><![CDATA[oard.]]></data>
  </Command>
  <Command __id="1608" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" start_end="START" timestamp="1080905" />
  <Command __id="1612" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" start_end="END" timestamp="1081726" />
  <Command __id="1614" _type="InsertStringCommand" timestamp="1081732">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1615" _type="InsertStringCommand" repeat="2" timestamp="1082164" timestamp2="1082863">
    <data><![CDATA[);]]></data>
  </Command>
  <DocumentChange __id="1616" _type="Insert" docASTNodeCount="1307" docActiveCodeLength="11270" docExpressionCount="870" docLength="14343" length="1" offset="7482" timestamp="1082860">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="1618" _type="Insert" docASTNodeCount="1307" docActiveCodeLength="11277" docExpressionCount="870" docLength="14350" length="7" offset="7483" timestamp="1083086">
    <text><![CDATA[
    	]]></text>
  </DocumentChange>
  <Command __id="1619" _type="InsertStringCommand" timestamp="1083091">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1620" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" timestamp="1083367" />
  <Command __id="1621" _type="RunCommand" kind="Create" projectName="MineSweeper" timestamp="1087175" type="Run" />
  <Command __id="1622" _type="RunCommand" exitValue="0" kind="Terminate" projectName="MineSweeper" timestamp="1090330" type="Run" />
  <Command __id="1623" _type="RunCommand" kind="Create" projectName="MineSweeper" timestamp="1092143" type="Run" />
  <Command __id="1624" _type="RunCommand" exitValue="0" kind="Terminate" projectName="MineSweeper" timestamp="1096867" type="Run" />
  <Command __id="1625" _type="MoveCaretCommand" caretOffset="7134" docOffset="7775" timestamp="1097043" />
  <Command __id="1626" _type="MoveCaretCommand" caretOffset="7104" docOffset="7745" timestamp="1098339" />
  <Command __id="1627" _type="MoveCaretCommand" caretOffset="6809" docOffset="7450" timestamp="1099155" />
  <DocumentChange __id="1628" _type="Delete" docASTNodeCount="1307" docActiveCodeLength="11277" docExpressionCount="870" docLength="14320" endLine="258" length="30" offset="7420" repeat="30" startLine="258" timestamp="1100353" timestamp2="1102861">
    <text><![CDATA[if we can cheat, set the label]]></text>
  </DocumentChange>
  <Command __id="1629" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" repeat="30" timestamp="1100356" timestamp2="1102862" />
  <DocumentChange __id="1688" _type="Insert" docASTNodeCount="1307" docActiveCodeLength="11277" docExpressionCount="870" docLength="14324" length="4" offset="7420" repeat="4" timestamp="1104166" timestamp2="1104476">
    <text><![CDATA[thi ]]></text>
  </DocumentChange>
  <Command __id="1689" _type="InsertStringCommand" repeat="4" timestamp="1104170" timestamp2="1104478">
    <data><![CDATA[thi ]]></data>
  </Command>
  <DocumentChange __id="1696" _type="Delete" docASTNodeCount="1307" docActiveCodeLength="11277" docExpressionCount="870" docLength="14323" endLine="258" length="1" offset="7423" startLine="258" timestamp="1104756">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="1697" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" timestamp="1104757" />
  <DocumentChange __id="1698" _type="Insert" docASTNodeCount="1307" docActiveCodeLength="11277" docExpressionCount="870" docLength="14359" length="36" offset="7423" repeat="36" timestamp="1104836" timestamp2="1108909">
    <text><![CDATA[s code should only be called if you ]]></text>
  </DocumentChange>
  <Command __id="1699" _type="InsertStringCommand" repeat="36" timestamp="1104838" timestamp2="1108912">
    <data><![CDATA[s code should only be called if you ]]></data>
  </Command>
  <DocumentChange __id="1770" _type="Delete" docASTNodeCount="1307" docActiveCodeLength="11277" docExpressionCount="870" docLength="14355" endLine="258" length="4" offset="7455" repeat="4" startLine="258" timestamp="1109148" timestamp2="1109540">
    <text><![CDATA[you ]]></text>
  </DocumentChange>
  <Command __id="1771" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" repeat="4" timestamp="1109149" timestamp2="1109542" />
  <DocumentChange __id="1778" _type="Insert" docASTNodeCount="1307" docActiveCodeLength="11277" docExpressionCount="870" docLength="14391" length="36" offset="7455" repeat="36" timestamp="1109644" timestamp2="1114073">
    <text><![CDATA[the board allows you to cheat! (ot/w]]></text>
  </DocumentChange>
  <Command __id="1779" _type="InsertStringCommand" repeat="36" timestamp="1109646" timestamp2="1114074">
    <data><![CDATA[the board allows you to cheat! (ot/w]]></data>
  </Command>
  <DocumentChange __id="1850" _type="Delete" docASTNodeCount="1307" docActiveCodeLength="11277" docExpressionCount="870" docLength="14388" endLine="258" length="3" offset="7488" repeat="3" startLine="258" timestamp="1114368" timestamp2="1114655">
    <text><![CDATA[t/w]]></text>
  </DocumentChange>
  <Command __id="1851" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" repeat="3" timestamp="1114370" timestamp2="1114657" />
  <DocumentChange __id="1856" _type="Insert" docASTNodeCount="1307" docActiveCodeLength="11277" docExpressionCount="870" docLength="14395" length="7" offset="7488" repeat="7" timestamp="1114892" timestamp2="1115467">
    <text><![CDATA[/w ther]]></text>
  </DocumentChange>
  <Command __id="1857" _type="InsertStringCommand" repeat="7" timestamp="1114895" timestamp2="1115470">
    <data><![CDATA[/w ther]]></data>
  </Command>
  <DocumentChange __id="1870" _type="Delete" docASTNodeCount="1307" docActiveCodeLength="11277" docExpressionCount="870" docLength="14387" endLine="258" length="8" offset="7487" repeat="8" startLine="258" timestamp="1115572" timestamp2="1116532">
    <text><![CDATA[o/w ther]]></text>
  </DocumentChange>
  <Command __id="1871" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" repeat="8" timestamp="1115573" timestamp2="1116533" />
  <DocumentChange __id="1886" _type="Insert" docASTNodeCount="1307" docActiveCodeLength="11277" docExpressionCount="870" docLength="14392" length="5" offset="7487" repeat="5" timestamp="1116913" timestamp2="1117508">
    <text><![CDATA[as it]]></text>
  </DocumentChange>
  <Command __id="1887" _type="InsertStringCommand" repeat="5" timestamp="1116916" timestamp2="1117510">
    <data><![CDATA[as it]]></data>
  </Command>
  <DocumentChange __id="1896" _type="Insert" docASTNodeCount="1307" docActiveCodeLength="11284" docExpressionCount="870" docLength="14399" length="7" offset="7492" timestamp="1117581">
    <text><![CDATA[
    	]]></text>
  </DocumentChange>
  <Command __id="1897" _type="InsertStringCommand" timestamp="1117587">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1898" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" timestamp="1118177" />
  <Command __id="1899" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" timestamp="1119004" />
  <DocumentChange __id="1900" _type="Insert" docASTNodeCount="1307" docActiveCodeLength="11284" docExpressionCount="870" docLength="14401" length="2" offset="7492" repeat="2" timestamp="1119769" timestamp2="1119828">
    <text><![CDATA[;s]]></text>
  </DocumentChange>
  <Command __id="1901" _type="InsertStringCommand" repeat="2" timestamp="1119777" timestamp2="1119831">
    <data><![CDATA[;s]]></data>
  </Command>
  <DocumentChange __id="1904" _type="Delete" docASTNodeCount="1307" docActiveCodeLength="11284" docExpressionCount="870" docLength="14399" endLine="258" length="2" offset="7492" repeat="2" startLine="258" timestamp="1120236" timestamp2="1120364">
    <text><![CDATA[;s]]></text>
  </DocumentChange>
  <Command __id="1905" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" repeat="2" timestamp="1120237" timestamp2="1120365" />
  <DocumentChange __id="1908" _type="Insert" docASTNodeCount="1307" docActiveCodeLength="11284" docExpressionCount="870" docLength="14401" length="2" offset="7492" repeat="2" timestamp="1120572" timestamp2="1120668">
    <text><![CDATA['s]]></text>
  </DocumentChange>
  <Command __id="1909" _type="InsertStringCommand" repeat="2" timestamp="1120574" timestamp2="1120670">
    <data><![CDATA['s]]></data>
  </Command>
  <DocumentChange __id="1912" _type="Insert" docASTNodeCount="1307" docActiveCodeLength="11291" docExpressionCount="870" docLength="14408" length="7" offset="7494" timestamp="1120790">
    <text><![CDATA[
    	]]></text>
  </DocumentChange>
  <Command __id="1913" _type="InsertStringCommand" timestamp="1120796">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="1914" _type="Insert" docASTNodeCount="1307" docActiveCodeLength="11291" docExpressionCount="870" docLength="14443" length="35" offset="7501" repeat="35" timestamp="1121195" timestamp2="1124612">
    <text><![CDATA[// really only fro updating the bot]]></text>
  </DocumentChange>
  <Command __id="1915" _type="InsertStringCommand" repeat="35" timestamp="1121202" timestamp2="1124615">
    <data><![CDATA[// really only fro updating the bot]]></data>
  </Command>
  <DocumentChange __id="1984" _type="Delete" docASTNodeCount="1307" docActiveCodeLength="11291" docExpressionCount="870" docLength="14441" endLine="259" length="2" offset="7534" repeat="2" startLine="259" timestamp="1124941" timestamp2="1125076">
    <text><![CDATA[ot]]></text>
  </DocumentChange>
  <Command __id="1985" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" repeat="2" timestamp="1124942" timestamp2="1125078" />
  <DocumentChange __id="1988" _type="Insert" docASTNodeCount="1307" docActiveCodeLength="11291" docExpressionCount="870" docLength="14446" length="5" offset="7534" repeat="5" timestamp="1125264" timestamp2="1125676">
    <text><![CDATA[utton]]></text>
  </DocumentChange>
  <Command __id="1989" _type="InsertStringCommand" repeat="5" timestamp="1125267" timestamp2="1125678">
    <data><![CDATA[utton]]></data>
  </Command>
  <Command __id="1998" _type="MoveCaretCommand" caretOffset="6877" docOffset="7518" timestamp="1128627" />
  <Command __id="1999" _type="SelectTextCommand" caretOffset="6878" docEnd="7519" docOffset="7519" docStart="7516" end="6878" start="6875" timestamp="1128778" />
  <DocumentChange __id="2000" _type="Replace" docASTNodeCount="1307" docActiveCodeLength="11291" docExpressionCount="870" docLength="14446" endLine="259" insertionLength="2" int_docASTNodeCount="1307" int_docActiveCodeLength="11291" int_docExpressionCount="870" int_docLength="14444" length="2" offset="7517" repeat="3" startLine="259" timestamp="1129029" timestamp2="1129516">
    <deletedText><![CDATA[ro]]></deletedText>
    <insertedText><![CDATA[or]]></insertedText>
  </DocumentChange>
  <Command __id="2001" _type="InsertStringCommand" repeat="3" timestamp="1129033" timestamp2="1129519">
    <data><![CDATA[for]]></data>
  </Command>
  <Command __id="2006" _type="MoveCaretCommand" caretOffset="7164" docOffset="7805" timestamp="1130667" />
  <Command __id="2007" _type="SelectTextCommand" caretOffset="7102" docEnd="8035" docOffset="7743" docStart="7743" end="7394" start="7102" timestamp="1132715" />
  <DocumentChange __id="2008" _type="Delete" docASTNodeCount="1296" docActiveCodeLength="11137" docExpressionCount="862" docLength="14149" endLine="273" length="297" offset="7738" repeat="5" startLine="266" timestamp="1133636" timestamp2="1135541">
    <text><![CDATA[
        // otherwise, set the out of cheats label
        else {
        	// this code is pretty bad. I don't know the right thing to 
        	// do here, but this certainly is NOT it? 
            buttonCheat.setText("Out of cheats");
            buttonCheat.setEnabled(false);
        }]]></text>
  </DocumentChange>
  <Command __id="2009" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" timestamp="1133640" />
  <Command __id="2010" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" timestamp="1134357" />
  <Command __id="2012" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" repeat="4" timestamp="1134656" timestamp2="1135545" />
  <Command __id="2019" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" timestamp="1136182" />
  <Command __id="2020" _type="MoveCaretCommand" caretOffset="7126" docOffset="7767" timestamp="1137138" />
  <Command __id="2021" _type="RunCommand" kind="Create" projectName="MineSweeper" timestamp="1142052" type="Run" />
  <Command __id="2022" _type="MoveCaretCommand" caretOffset="7182" docOffset="7823" timestamp="1197123" />
  <DocumentChange __id="2023" _type="Insert" docASTNodeCount="1296" docActiveCodeLength="11142" docExpressionCount="862" docLength="14154" length="5" offset="7738" timestamp="1198676">
    <text><![CDATA[
   ]]></text>
  </DocumentChange>
  <Command __id="2024" _type="UndoCommand" repeat="2" timestamp="1198679" timestamp2="1199092" />
  <DocumentChange __id="2025" _type="Insert" docASTNodeCount="1307" docActiveCodeLength="11291" docExpressionCount="870" docLength="14446" length="292" offset="7743" timestamp="1199090">
    <text><![CDATA[     // otherwise, set the out of cheats label
        else {
        	// this code is pretty bad. I don't know the right thing to 
        	// do here, but this certainly is NOT it? 
            buttonCheat.setText("Out of cheats");
            buttonCheat.setEnabled(false);
        }]]></text>
  </DocumentChange>
  <Command __id="2027" _type="MoveCaretCommand" caretOffset="7097" docOffset="7738" timestamp="1200635" />
  <Command __id="2028" _type="RunCommand" kind="Create" projectName="MineSweeper" timestamp="1220338" type="Run" />
  <Command __id="2029" _type="MoveCaretCommand" caretOffset="6977" docOffset="7618" timestamp="1233563" />
  <Command __id="2031" _type="FindCommand" caseSensitive="false" forward="true" matchWord="false" offset="7618" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="1236896" wrapSearch="true">
    <searchString><![CDATA[canCheat]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="2032" _type="FindCommand" caseSensitive="false" forward="true" matchWord="false" offset="8352" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="1237478" wrapSearch="true">
    <searchString><![CDATA[canCheat]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="2033" _type="FindCommand" caseSensitive="false" forward="true" matchWord="false" offset="12537" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="1238373" wrapSearch="true">
    <searchString><![CDATA[canCheat]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="2034" _type="FindCommand" caseSensitive="false" forward="true" matchWord="false" offset="4439" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="1238966" wrapSearch="true">
    <searchString><![CDATA[canCheat]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="2035" _type="FindCommand" caseSensitive="false" forward="true" matchWord="false" offset="7575" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="1239653" wrapSearch="true">
    <searchString><![CDATA[canCheat]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="2036" _type="FindCommand" caseSensitive="false" forward="true" matchWord="false" offset="8352" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="1243830" wrapSearch="true">
    <searchString><![CDATA[canCheat]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="2037" _type="MoveCaretCommand" caretOffset="292" docOffset="933" timestamp="1250162" />
  <Command __id="2039" _type="FindCommand" caseSensitive="false" forward="true" matchWord="false" offset="933" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="1254326" wrapSearch="true">
    <searchString><![CDATA[updateC]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="2040" _type="FindCommand" caseSensitive="false" forward="true" matchWord="false" offset="4507" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="1264062" wrapSearch="true">
    <searchString><![CDATA[updateC]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="2041" _type="FindCommand" caseSensitive="false" forward="true" matchWord="false" offset="7285" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="1266197" wrapSearch="true">
    <searchString><![CDATA[updateC]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="2042" _type="FindCommand" caseSensitive="false" forward="false" matchWord="false" offset="8235" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="1268870" wrapSearch="true">
    <searchString><![CDATA[updateC]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="2043" _type="FindCommand" caseSensitive="false" forward="false" matchWord="false" offset="8384" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="1270115" wrapSearch="true">
    <searchString><![CDATA[updateC]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="2044" _type="MoveCaretCommand" caretOffset="7081" docOffset="7722" timestamp="1272515" />
  <Command __id="2045" _type="MoveCaretCommand" caretOffset="6938" docOffset="7579" timestamp="1274275" />
  <Command __id="2046" _type="SelectTextCommand" caretOffset="6957" docEnd="7598" docOffset="7598" docStart="7579" end="6957" start="6938" timestamp="1274458" />
  <Command __id="2047" _type="SelectTextCommand" caretOffset="6768" docEnd="7581" docOffset="7409" docStart="7409" end="6940" start="6768" timestamp="1275532" />
  <DocumentChange __id="2048" _type="Delete" docASTNodeCount="1302" docActiveCodeLength="11234" docExpressionCount="866" docLength="14274" endLine="262" length="172" offset="7409" startLine="258" timestamp="1276212">
    <text><![CDATA[        // this code should only be called if the board allows you to cheat! (as it's
    	// really only for updating the button
    	
    	assert (board.canCheat());
]]></text>
  </DocumentChange>
  <Command __id="2049" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" timestamp="1276218" />
  <Command __id="2050" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" timestamp="1276443" />
  <DocumentChange __id="2051" _type="Insert" docASTNodeCount="1307" docActiveCodeLength="11291" docExpressionCount="870" docLength="14446" length="172" offset="7409" timestamp="1277638">
    <text><![CDATA[        // this code should only be called if the board allows you to cheat! (as it's
    	// really only for updating the button
    	
    	assert (board.canCheat());
]]></text>
  </DocumentChange>
  <Command __id="2052" _type="UndoCommand" timestamp="1277642" />
  <DocumentChange __id="2053" _type="Delete" docASTNodeCount="1302" docActiveCodeLength="11234" docExpressionCount="866" docLength="14274" endLine="262" length="172" offset="7409" startLine="258" timestamp="1279651">
    <text><![CDATA[        // this code should only be called if the board allows you to cheat! (as it's
    	// really only for updating the button
    	
    	assert (board.canCheat());
]]></text>
  </DocumentChange>
  <Command __id="2054" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" timestamp="1279664" />
  <Command __id="2055" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" timestamp="1280031" />
  <Command __id="2057" _type="FindCommand" caseSensitive="false" forward="false" matchWord="false" offset="7409" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="1291022" wrapSearch="true">
    <searchString><![CDATA[updateCh]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="2058" _type="FindCommand" caseSensitive="false" forward="false" matchWord="false" offset="7400" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="1292068" wrapSearch="true">
    <searchString><![CDATA[updateCh]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="2059" _type="FindCommand" caseSensitive="false" forward="false" matchWord="false" offset="7400" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="1292851" wrapSearch="true">
    <searchString><![CDATA[updateCh]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="2060" _type="FindCommand" caseSensitive="false" forward="true" matchWord="false" offset="7400" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="1294581" wrapSearch="true">
    <searchString><![CDATA[updateCh]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="2061" _type="MoveCaretCommand" caretOffset="7542" docOffset="8183" timestamp="1295458" />
  <Command __id="2062" _type="SelectTextCommand" caretOffset="7511" docEnd="8152" docOffset="8152" docStart="8068" end="7511" start="7427" timestamp="1298971" />
  <DocumentChange __id="2063" _type="Replace" docASTNodeCount="1302" docActiveCodeLength="11234" docExpressionCount="866" docLength="14204" endLine="280" insertionLength="13" int_docASTNodeCount="1302" int_docActiveCodeLength="11234" int_docExpressionCount="866" int_docLength="14191" length="83" offset="8069" repeat="14" startLine="280" timestamp="1300013" timestamp2="1301588">
    <deletedText><![CDATA[s only ever called when the board is good with me cheating (in the other instances)]]></deletedText>
    <insertedText><![CDATA[sn't valud if]]></insertedText>
  </DocumentChange>
  <Command __id="2064" _type="InsertStringCommand" repeat="14" timestamp="1300019" timestamp2="1301590">
    <data><![CDATA[isn't valud if]]></data>
  </Command>
  <DocumentChange __id="2091" _type="Delete" docASTNodeCount="1302" docActiveCodeLength="11234" docExpressionCount="866" docLength="14199" endLine="280" length="5" offset="8077" repeat="5" startLine="280" timestamp="1301980" timestamp2="1302578">
    <text><![CDATA[ud if]]></text>
  </DocumentChange>
  <Command __id="2092" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" repeat="5" timestamp="1301981" timestamp2="1302582" />
  <DocumentChange __id="2101" _type="Insert" docASTNodeCount="1302" docActiveCodeLength="11234" docExpressionCount="866" docLength="14233" length="34" offset="8077" repeat="34" timestamp="1302771" timestamp2="1306084">
    <text><![CDATA[id if we can't chate off the bat. ]]></text>
  </DocumentChange>
  <Command __id="2102" _type="InsertStringCommand" repeat="34" timestamp="1302775" timestamp2="1306086">
    <data><![CDATA[id if we can't chate off the bat. ]]></data>
  </Command>
  <Command __id="2169" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" timestamp="1306912" />
  <Command __id="2170" _type="SelectTextCommand" caretOffset="6992" docEnd="7757" docOffset="7633" docStart="7633" end="7116" start="6992" timestamp="1309730" />
  <DocumentChange __id="2171" _type="Delete" docASTNodeCount="1302" docActiveCodeLength="11212" docExpressionCount="866" docLength="14109" endLine="266" length="124" offset="7633" startLine="264" timestamp="1310500">
    <text><![CDATA[
        	// this code is pretty bad. I don't know the right thing to 
        	// do here, but this certainly is NOT it? ]]></text>
  </DocumentChange>
  <Command __id="2172" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" timestamp="1310511" />
  <Command __id="2173" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" timestamp="1310718" />
  <Command __id="2174" _type="ShellBoundsCommand" bounds="[-8, -8, 1936, 1056]" timestamp="1957034" />
</Events>
