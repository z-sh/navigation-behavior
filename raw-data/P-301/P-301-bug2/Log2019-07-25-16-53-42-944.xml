<Events startTimestamp="1564088022944" logVersion="0.11.0.201504031625" osName="Windows 10" osVersion="10.0" lineSeparator="\r\n" numMonitors="1" monitorBounds="[0, 0, 1920, 1080]">
  <Command __id="0" _type="ShellBoundsCommand" bounds="[-8, -8, 1936, 1056]" timestamp="9" />
  <Command __id="1" _type="FileOpenCommand" docASTNodeCount="1302" docActiveCodeLength="11201" docExpressionCount="866" docLength="14073" projectName="MineSweeper" timestamp="13531">
    <filePath><![CDATA[C:\Users\Eye-tracking\git\MineSweeper-Experiment\src\presentation\MineSweeperGui.java]]></filePath>
    <snapshot><![CDATA[package presentation;
import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import java.io.File;
import java.net.URL;
import java.util.Queue;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;

import logic.Help;
import logic.MineSweeper;
import logic.MineSweeperBoard;
import util.Space;

/**
 * Main GUI object for Minesweeper games. Called when gameplay is ready
 *
 * @author  KnightMiner
 */

public class MineSweeperGui extends JFrame implements ActionListener {
    // data
    private MineSweeperBoard board;

    // states
    private boolean isCheating;

    // buttons and labels
    private JLabel mines;
    private MineButton[][] buttons;

    private JButton buttonNewGame;
    private JButton buttonCheat;

    // menus
    private JMenuBar bar;
    private JMenu menuMineSweeper;

    private JMenu menuNewGame;
    private JMenuItem buttonRestart;
    private JMenuItem buttonSave;
    private JMenuItem buttonLoad;
    private JMenuItem buttonExit;

    private JMenu menuHelp;
    private JMenuItem buttonRules;
    private JMenuItem buttonMenu;
    private JMenuItem buttonDifficulty;

    /**
     * Makes a new minesweaper window
     * @param board  Input board, the display will take the size and pieces on the board
     */
    
    public MineSweeperGui(MineSweeperBoard board) {
        this.setTitle("MineSweeper");
        this.board = board;

        // construct the top menu
        bar = new JMenuBar();
        setJMenuBar(bar);

        // miscelanous actions
        menuMineSweeper = new JMenu("MineSweeper");
        bar.add(menuMineSweeper);

        // new game menu
        menuNewGame = new JMenu("New Game");
        menuMineSweeper.add(menuNewGame);

        // add all difficulties
        for(MineSweeper.Difficulty difficulty : MineSweeper.Difficulty.values()) {
            DifficultyButton button = new DifficultyButton(difficulty);
            menuNewGame.add(button);
        }


        // restarts the current game
        buttonRestart = new JMenuItem("Restart");
        buttonRestart.addActionListener(this);
        menuMineSweeper.add(buttonRestart);

        // saves the current game
        buttonSave = new JMenuItem("Save game");
        buttonSave.addActionListener(this);
        menuMineSweeper.add(buttonSave);

        // loads a new game from a file
        buttonLoad = new JMenuItem("Load game");
        buttonLoad.addActionListener(this);
        menuMineSweeper.add(buttonLoad);

        // exits the game
        menuMineSweeper.addSeparator();
        buttonExit = new JMenuItem("Exit");
        buttonExit.addActionListener(this);
        menuMineSweeper.add(buttonExit);

        // help menu
        menuHelp = new JMenu("Help");
        bar.add(menuHelp);

        // shows the rules
        buttonRules = new JMenuItem("Rules");
        buttonRules.addActionListener(this);
        menuHelp.add(buttonRules);

        // shows help about the menu
        buttonMenu = new JMenuItem("Menus");
        buttonMenu.addActionListener(this);
        menuHelp.add(buttonMenu);

        // shows available difficulties
        buttonDifficulty = new JMenuItem("Difficulties");
        buttonDifficulty.addActionListener(this);
        menuHelp.add(buttonDifficulty);


        // GUI Layout

        // gives use four regions and a center
        Container pane = getContentPane();
        pane.setLayout(new BorderLayout());


        // new game with same dimensions
        buttonNewGame = new JButton("New game");
        buttonNewGame.addActionListener(this);

        // remaining mines display
        mines = new JLabel("Mines", SwingConstants.CENTER);
        updateMines();

        // top row of the board
        Container top = new Container();
        top.setLayout(new GridLayout(1, 3));
        top.add(mines);
        top.add(buttonNewGame);


        // cheating, skip if 0 cheats to start
        if(board.canCheat()) {
            buttonCheat = new JButton();
            updateCheat();
            buttonCheat.addActionListener(this);
            top.add(buttonCheat);
        } else {
            top.add(new JLabel(""));
        }

        top.setPreferredSize(new Dimension(20, top.getFontMetrics(buttonNewGame.getFont()).getHeight() * 2));

        pane.add(top, BorderLayout.NORTH);


        // main button grid
        Container minesContainer = new Container();
        int width2 = board.getWidth();
        int height2 = board.getHeight();
        minesContainer.setLayout(new GridLayout(height2, width2));
        buttons = new MineButton[height2][width2];

        // and add them all
        for(int y = 0; y < height2; y++) {
            for(int x = 0; x < width2; x++) {
                // add buttons, and store them
                buttons[y][x] = new MineButton(this, board, new Space(x, y));
                minesContainer.add(buttons[y][x]);
            }
        }

        pane.add(minesContainer, BorderLayout.CENTER);


        // sizes, we need them for the top bar
        int width = board.getWidth() * 40;
        int height = board.getHeight() * 40 + 100;

        setSize(width, height);
        setVisible(true);

        // eventually I will replace this with an event that fires a prompt
        // basically, allow the user to save their game before quitting
        setDefaultCloseOperation(EXIT_ON_CLOSE);
    }

    /**
     * Gets a MineButton at the specified location
     * @param space  Location of the button
     * @return  the button at the location
     */
    
    public MineButton getButton(Space space) {
        if(!board.isValid(space)) {
            return null;
        }
        return buttons[space.getY()][space.getX()];
    }

    /**
     * Updates all spaces pending update to display their current value
     */
    
    public void updateSpaces() {
        Queue<Space> queue = board.getUpdates();
        while(!queue.isEmpty()) {
            Space space = queue.poll();
            MineButton update = getButton(space);
            if(update != null) {
                update.updatePiece();
            }
        }

        updateMines();
    }

    /**
     * Updates the mines display
     */
    
    public void updateMines() {
        mines.setText(String.format("Mines: %d", board.getRemainingMines()));
    }

    /**
     * Sets the cheat status
     * @param cheat  Whether the user is in cheat mode
     */
    
    private void setCheating(boolean cheat) {
        // and change the button text
        if(cheat) {
            buttonCheat.setText("Cancel cheat");
            isCheating = true;
        }
        // otherwise, run general cheating code
        else {
            updateCheat();
        }
    }

    /**
     * Sets the cheat button to used
     */
    
    public void updateCheat() {
    	if(buttonCheat != null) {
    		// if we can cheat, set the label
            if(board.canCheat()) {
                buttonCheat.setText("Cheats: " + board.getCheats());
                buttonCheat.setEnabled(true);
            }
            // otherwise, set the out of cheats label
            else {
                buttonCheat.setText("Out of cheats");
                buttonCheat.setEnabled(false);
            }
            isCheating = false;
    	}   
    }

    /**
     * Sets the cheat button to used
     */
    
    public void resetButtons() {
        buttonNewGame.setText("New game");

        updateCheat();        
        updateSpaces();
    }

    /**
     * Sets the winning text
     * @param victory  Whether the player won
     */
    
    public void gameOver(boolean victory) {
        if(victory) {
            buttonNewGame.setText("You Win!");
        }
        else {
            buttonNewGame.setText("You Lose");
        }
    }

    /**
     * Checks if the cheat button is active
     * @return  true if the cheat button is active
     */
    
    public boolean isCheating() {
        return isCheating;
    }

    /**
     * Called when the 'X' button is pressed on the window
     * @param e  Event the button is called with
     */
    
    public void windowClosing(WindowEvent e) {
        // simply run the menu
        //this.menu();
    }

    /**
     * Handles all single instance buttons
     * @param e  Calling event
     */
    
    @Override
    public void actionPerformed(ActionEvent e) {
        Object button = e.getSource();

        // restart the current game
        if(button == buttonNewGame) {
            // make the board new
            board.newGame();

            // and clear game data
            resetButtons();
            return;
        }

        // restart the current game
        if(button == buttonRestart) {
            // make the board new
            board.restart();

            // and clear game data
            resetButtons();
            return;
        }

        // saves the game
        if(button == buttonSave) {
            String filename = JOptionPane.showInputDialog(this,
                    "Enter filename to save game",
                    "MineSweeper - Save game",
                    JOptionPane.QUESTION_MESSAGE
                    );

            // user canceled
            if(filename == null || filename.equals("")) {
                return;
            }

            // if it exists, prompt to continue
            if(new File(filename + ".bin").exists()) {
                int result = JOptionPane.showConfirmDialog(this,
                        "Save game " + filename + " already exists, overwrite?",
                        "MineSweeper - Save game",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.ERROR_MESSAGE
                        );

                if(result != JOptionPane.YES_OPTION) {
                    return;
                }
            }

            board.saveGame(filename);
        }

        // loads the game
        if(button == buttonLoad) {
            String filename = JOptionPane.showInputDialog(this,
                    "Enter filename to load game",
                    "MineSweeper - Load game",
                    JOptionPane.QUESTION_MESSAGE
                    );

            // user canceled
            if(filename == null || filename.equals("")) {
                return;
            }

            // if it exists, prompt to continue
            if(new File(filename + ".bin").exists()) {
                MineSweeperBoard board = MineSweeperBoard.loadGame(filename);
                if(board != null) {
                    MineSweeper.startGame(board);
                }
                // did not load right
                else {
                    JOptionPane.showMessageDialog(this,
                            "Error reading save game " + filename,
                            "MineSweeper - Load game",
                            JOptionPane.ERROR_MESSAGE
                            );
                }
            }
            else {
                // file does not exist
                JOptionPane.showMessageDialog(this,
                        "Saved game " + filename + " does not exist",
                        "MineSweeper - Load game",
                        JOptionPane.ERROR_MESSAGE
                        );
            }
        }

        // cheat button
        if(button == buttonCheat) {
            // no cheating too many times
            if(!board.canCheat()) {
                return;
            }

            // toggle cheating
            setCheating(!isCheating);
            return;
        }

        // cheat button
        if(button == buttonExit) {
            this.dispose();
            return;
        }


        /* Help */

        // rules
        if(button == buttonRules) {
            Help.showRules(this);
        }

        // menus
        if(button == buttonMenu) {
            Help.menuHelp(this);
        }

        // rules
        if(button == buttonDifficulty) {
            Help.difficultyHelp(this);
        }
    }

    /**
     * Returns an ImageIcon, or null if the path was invalid.
     * @author  Larry Vail
     * @param  path  Icon path
     * @param  description  Basic description of the icon
     * @return  Returns the icon at the path, or null if the path is invalid
     */
    
    protected ImageIcon createImageIcon(String path, String description) {
        URL imgURL = getClass().getResource(path);
        if (imgURL != null) {
            return new ImageIcon(imgURL, description);
        } else {
            System.err.println("Couldn't find file: " + path);
            return null;
        }
    }

    /**
     * Common code for difficulty buttons
     */
    
    private class DifficultyButton extends JMenuItem implements ActionListener {
        // data
        private MineSweeper.Difficulty difficulty;

        public DifficultyButton(MineSweeper.Difficulty difficulty) {
            super(difficulty.getLabel());

            this.difficulty = difficulty;
            this.addActionListener(this);
        }

        /**
         * Called when the button is clicked
         */
        
        @Override
        public void actionPerformed(ActionEvent e) {
            MineSweeper.newGame(difficulty);
        }
    }
}
]]></snapshot>
  </Command>
  <Command __id="2" _type="FileOpenCommand" docASTNodeCount="260" docActiveCodeLength="2374" docExpressionCount="151" docLength="3861" projectName="MineSweeper" timestamp="13699">
    <filePath><![CDATA[C:\Users\Eye-tracking\git\MineSweeper-Experiment\src\logic\MineSweeper.java]]></filePath>
    <snapshot><![CDATA[/*
BUG REPORT #2
MineSweeper has 3 difficulty levels. The size of the board and the number of the mines are different for each level. 
Sometimes, we end up having a smaller number of mines in the game. 
For an easy game, we want to have 10 mines, but sometimes it is 9, 8, or even less.
*/

package logic;
import javax.swing.JOptionPane;
import javax.swing.UIManager;

import presentation.CustomMenu;
import presentation.MineSweeperGui;

/**
 * Main launcher class for MineSweeper, containing all the menus and general
 * prompts
 *
 * @author  KnightMiner
 */

public class MineSweeper {
    // currently running instance of the game
    private static MineSweeperGui gui;

    /**
     * Primary way to boot the game
     * @param args  Default args (unused)
     */
    
    public static void main(String[] args) {
        // High DPI stuff
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        }
        catch(Exception e) {
            e.printStackTrace();
        }

        // load the help panels
        // this has a side effect of loading the icons for the pieces
        Help.load();

        // start the game on easy
        newGame(Difficulty.EASY);
    }

    /**
     * Creates a new MineSweeper game with one of three default sizes or custom
     * @param difficulty Game difficulty
     */
    
    public static void newGame(Difficulty difficulty) {
        // difficulty switch
        MineSweeperBoard board = null;
        switch(difficulty) {
            case EASY:
                board = new MineSweeperBoard(9, 9, 10, 0);
                break;
            case NORMAL:
                board = new MineSweeperBoard(16, 16, 40, 1);
                break;
            case HARD:
                board = new MineSweeperBoard(30, 16, 99, 3);
                break;
            case CUSTOM:
                board = customGame();
                break;
        }

        startGame(board);
    }

    /**
     * Creates a new game with the custom size
     * @return  A board of the custom size
     */
    
    public static MineSweeperBoard customGame() {
        CustomMenu menu = new CustomMenu();

        int result = JOptionPane.showConfirmDialog(null, menu,
                "Custom", JOptionPane.OK_CANCEL_OPTION,
                JOptionPane.PLAIN_MESSAGE);

        // if they pressed OK
        if(result == JOptionPane.OK_OPTION) {
            return menu.createBoard();
        }
        else {
            return null;
        }
    }

    /**
     * Starts a new game with the specified board
     * @param board  Game board to start
     */
    
    public static void startGame(MineSweeperBoard board) {
        // must be a valid board
        if(board != null) {
            // remove the current gui and define the new one
            if(gui != null) {
                gui.dispose();
            }

            // create a new instance
            gui = new MineSweeperGui(board);
        }
    }

    /**
     * List of buttons for the GUI
     */
    
    public enum Difficulty {
        /** Easy game */
        EASY("Easy"),
        /** Normal game */
        NORMAL("Normal"),
        /** Hard game */
        HARD("Expert"),
        /** Custom size and mines from the GUI */
        CUSTOM("Custom");

        // data
        private String label;

        /**
         * Default constructor
         * @param  Button label
         */
        
        Difficulty(String label) {
            this.label = label;
        }

        /**
         * Gets the label for the difficulty
         * @return  Difficulty name
         */
        
        public String getLabel() {
            return label;
        }
    }
}
]]></snapshot>
  </Command>
  <Command __id="3" _type="MoveCaretCommand" caretOffset="187" docOffset="622" timestamp="13838" />
  <Command __id="4" _type="ShellBoundsCommand" bounds="[0, 0, 0, 0]" timestamp="18524" />
  <Command __id="5" _type="ShellBoundsCommand" bounds="[-8, -8, 1936, 1056]" timestamp="124833" />
  <Command __id="6" _type="FileOpenCommand" docASTNodeCount="260" docActiveCodeLength="2374" docExpressionCount="151" docLength="3861" projectName="MineSweeper" timestamp="135632">
    <filePath><![CDATA[C:\Users\Eye-tracking\git\MineSweeper-Experiment\src\logic\MineSweeper.java]]></filePath>
  </Command>
  <Command __id="7" _type="MoveCaretCommand" caretOffset="187" docOffset="622" timestamp="135672" />
  <Command __id="8" _type="SelectTextCommand" caretOffset="184" docEnd="184" docOffset="184" docStart="62" end="184" start="62" timestamp="138872" />
  <Command __id="9" _type="MoveCaretCommand" caretOffset="294" docOffset="294" timestamp="139831" />
  <Command __id="10" _type="MoveCaretCommand" caretOffset="1357" docOffset="1632" timestamp="164249" />
  <Command __id="11" _type="FileOpenCommand" docASTNodeCount="1769" docActiveCodeLength="10590" docExpressionCount="1040" docLength="19616" projectName="MineSweeper" timestamp="173812">
    <filePath><![CDATA[C:\Users\Eye-tracking\git\MineSweeper-Experiment\src\logic\MineSweeperBoard.java]]></filePath>
    <snapshot><![CDATA[package logic;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.*;

import util.Piece;
import util.Space;

/**
 * Contains all the visible pieces in the MineSweeper game
 * 
 * @author KnightMiner
 */

public class MineSweeperBoard implements Serializable {

	/**
	 * Random number generator used to create game seeds Minefields use a sepparate
	 * object created using a specific seed
	 */
	
	public static final Random RANDOM = new Random();

	// resizable
	private transient Queue<Space> update;

	// board dimensions
	private int width, height;
	private MineGenerator data = new MineGenerator();

	private int flagCount;

	// board data
	private Piece[][] pieces;
	private boolean[][] mines;
	private boolean gameOver;
	private boolean victory;

	// determines if the first click happened yet
	private boolean firstClick;

	// determines if we have used our one cheat
	private int cheatsAllowed;
	private int cheats = 0;

	// board seed
	private long seed;

	/**
	 * Creates a new minesweaper board with the specified dimensions
	 * 
	 * @param width     Width of the board
	 * @param height    Height of the board
	 * @param mineCount Total mines
	 * @param cheats    Cheats allowed
	 */
	
	public MineSweeperBoard(int width, int height, int mineCount, int cheats) {
		this.width = width;
		this.height = height;

		this.pieces = new Piece[height][width];
		this.mines = new boolean[height][width];

		// sanity check in case the GUI fails to correct the number
		this.data.mineCount = Math.min(mineCount, width * height - 9);
		this.cheatsAllowed = this.cheats = cheats;

		update = new LinkedList<>();
	}

	/**
	 * Creates a new minesweaper board with the specified dimensions
	 * 
	 * @param width     Width of the board
	 * @param height    Height of the board
	 * @param mineCount Total mines
	 */
	
	public MineSweeperBoard(int width, int height, int mineCount) {
		this(width, height, mineCount, 1);
	}

	/* Main logic */

	/**
	 * Populates the board with mines with a random seed
	 * 
	 * @param space Space clicked
	 */
	
	public void generateMines(Space space) {
		generateMines(RANDOM.nextLong(), space);
	}

	/**
	 * Populates the board with mines
	 * 
	 * @param seed    Seed to generate mines. Two fields with the same size and seed
	 *                will have the same mines locations
	 * @param clicked space clicked when generating the mines
	 */
	
	protected void generateMines(long seed, Space clicked) {
		// store the current seed for saving games
		this.seed = seed;

		// no mines? no work
		if (data.mineCount == 0) {
			return;
		}

		// list of spaces we can still place a mine at
		List<Space> remainingSpaces = new ArrayList<>(Arrays.asList(getAllSpaces()));

		// if we clicked somewhere, remove all nearby spaces
		if (clicked != null) {
			// remove all unclickable spaces
			final int x = clicked.getX(), y = clicked.getY();
			remainingSpaces.removeIf((space) -> {
				return (y - 1) <= space.getY() && space.getY() <= (y + 1) && (x - 1) <= space.getX()
						&& space.getX() <= (x + 1);
			});
		}

		// random object seeded so results can be controlled
		Random random = new Random(seed);

		// place mines
		this.mines = new boolean[height][width];
		for (int i = 0; i < data.mineCount; i++) {
			// just get the linear location of the next mine and place it
			int mine = random.nextInt(remainingSpaces.size());
			Space space = remainingSpaces.get(mine);
			mines[space.getY()][space.getX()] = true;

		}
	}

	/**
	 * Creates a new game with the same dimensions
	 */
	
	public void newGame() {
		// first, regenerate the mines
		this.mines = new boolean[height][width];

		// next, clear game specific data
		resetData();

		// then mark all spaces for a rendering update
		for (Space space : getAllSpaces()) {
			markUpdate(space);
		}
	}

	/**
	 * Restarts the current game
	 */
	
	public void restart() {
		// if we have not clicked yet, do nothing
		// we don't have a seed to restart from
		if (!firstClick) {
			return;
		}

		// reset any relevant data
		resetData();

		// but assume we already clicked so the mines don't change
		firstClick = true;

		// and mark all spaces for an update
		for (Space space : getAllSpaces()) {
			markUpdate(space);
		}
	}

	/**
	 * Saves the board to a binary file
	 * 
	 * @param filename Location of the game
	 */
	
	public void saveGame(String filename) {
		// TODO: better saving logic
		try {
			FileOutputStream file = new FileOutputStream(filename + ".bin");
			ObjectOutputStream stream = new ObjectOutputStream(file);
			stream.writeObject(this);
			stream.flush();
			stream.close();
		} catch (IOException e) {
		}
	}

	/**
	 * Load the board from a binary file
	 * 
	 * @param filename Location of the game
	 * @return The board, or null if invalid
	 */
	
	public static MineSweeperBoard loadGame(String filename) {
		try {
			FileInputStream file = new FileInputStream(filename + ".bin");
			ObjectInputStream stream = new ObjectInputStream(file);
			MineSweeperBoard board = (MineSweeperBoard) stream.readObject();
			stream.close();
			return board;
		} catch (IOException | ClassNotFoundException e) {
			e.printStackTrace();
			return null;
		}
	}

	/**
	 * Resets generic data
	 */
	
	private void resetData() {
		this.pieces = new Piece[height][width];
		gameOver = false;
		firstClick = false;
		cheats = cheatsAllowed;
		flagCount = 0;
		victory = false;
	}

	/**
	 * Ends the game with a loss
	 * 
	 * @param clicked Location clicked causing the loss
	 * @return Mine clicked
	 */
	
	public void loseGame(Space clicked) {
		// set the game to over
		gameOver = true;

		showMines(clicked, false);
	}

	/**
	 * Checks if the game has been won, and sets the appropiate statuses
	 */
	
	public void checkVictory() {
		// check all spaces
		for (Space space : getAllSpaces()) {

			// only spaces without mines need to be checked, we don't care about
			// flags or marks on mine spaces
			if (!isMine(space)) {
				// if the piece is unclicked or not a number, we failed
				Piece piece = getPiece(space);
				if (piece == null || !piece.isNumber()) {
					return;
				}
			}
		}

		// made it through that? we won
		victory = true;
		gameOver = true;

		showMines(null, true);
	}

	/**
	 * Shows all the mines on the board
	 * 
	 * @param space   Space that was clicked
	 * @param victory Determines if the game was won or lost
	 */
	
	private void showMines(Space clicked, boolean victory) {
		// set the mine color based on victory
		Piece mine = victory ? Piece.MINE_GREEN : Piece.MINE;

		// set the clicked space to red
		if (clicked != null && isMine(clicked)) {
			setPiece(clicked, Piece.MINE_RED);
		}

		// show mines on the board
		for (Space space : getAllSpaces()) {
			if (space.equals(clicked)) {
				continue;
			}
			Piece piece = getPiece(space);
			if (isMine(space)) {
				// but only on empty or marks
				if (piece == null || piece.isMark()) {
					setPiece(space, mine);
				}
			} else {
				// if the space has a flag but no mine, mark it as such
				if (piece == Piece.FLAG) {
					setPiece(space, Piece.FLAG_NOT);
				}
			}
		}
	}

	/* Clicking */

	/**
	 * Handle standard game clicks
	 * 
	 * @param space  Space clicked
	 * @param action Type of click
	 */
	
	public void handleClick(Space space, ClickAction action) {
		// stop playing when the game is over
		if (gameOver) {
			return;
		}
		// simply passes it along to the dedicated function
		switch (action) {
		case DEFAULT:
			handleDefaultClick(space);
			break;
		case FLAG:
			handleFlagClick(space);
			break;
		case MARK:
			handleMarkClick(space);
			break;
		case CHEAT:
			handleCheatClick(space);
			break;
		}
	}

	/**
	 * Space clicking core, does the actual clicking action
	 * 
	 * @param space Space clicked
	 */
	
	private void clickSpace(Space space) {
		// if the space is not replaceable, stop now
		// called here so we don't click flags as they are mines
		if (!isReplaceable(space)) {
			return;
		}

		// if the space is a mine, we lose
		if (isMine(space)) {
			loseGame(space);
		}

		// otherwise do a normal click
		else {
			// sets the piece to the number of surrounding mines
			Piece newPiece = getNumber(space);
			setPiece(space, newPiece);

			// if the piece is 0, update surrounding pieces as none of them are mines
			// this won't eternally recur since this space is no longer clickable
			if (newPiece == Piece.N0) {
				for (Space neighbor : getNeighbors(space)) {
					clickSpace(neighbor);
				}
			}
		}
	}

	/**
	 * Default clicks, clicks a space and displays a number or loses the game
	 * 
	 * @param space Space clicked
	 */
	
	private void handleDefaultClick(Space space) {
		// first click should generate the minefield
		if (!firstClick) {
			firstClick(space);
		}

		// if the space cannot be replaced then stop here
		// as we run this function on every click
		if (isNumber(space)) {
			// if the number of flags around this space is the same as the number
			Space[] neighbors = getNeighbors(space);

			// count the flags around the piece
			int flags = 0;
			for (Space neighbor : neighbors) {
				if (getPiece(neighbor) == Piece.FLAG) {
					flags++;
				}
			}

			// same number of flags as the piece number?
			if (flags == getPiece(space).getNumber()) {
				// click all the spaces. This is a risky move if a flag is wrong
				for (Space neighbor : neighbors) {
					clickSpace(neighbor);
				}
			}
		}
		// otherwise if not a number, just click the space
		else {
			clickSpace(space);
		}

		// check just once at the end of clicking
		checkVictory();
	}

	/**
	 * Handle the first click in the game. This click will generate the minefield as
	 * it cannot be on a mine
	 * 
	 * @param space Space clicked
	 */
	
	private void firstClick(Space space) {
		generateMines(space);
		firstClick = true;
	}

	/**
	 * Flag clicks, essentially click once to add
	 * 
	 * @param space Space clicked
	 */
	
	private void handleFlagClick(Space space) {
		// if already a flag, set a mark
		Piece piece = getPiece(space);
		if (piece == Piece.FLAG) {
			setPiece(space, Piece.MARK_RED);
			flagCount--;
		}
		// remove marks
		else if (piece != null && piece.isMark()) {
			setPiece(space, null);
		}
		// otherwise if we can add one
		else if (isReplaceable(space)) {
			if(flagCount < data.mineCount) {
				setPiece(space, Piece.FLAG);
				flagCount++;
			}
		}
	}

	/**
	 * Mark clicks, changes the color of a mark
	 * 
	 * @param space Space clicked
	 */
	
	private void handleMarkClick(Space space) {
		// tobble the mark
		Piece piece = getPiece(space);
		if (piece == Piece.MARK_RED) {
			setPiece(space, Piece.MARK_GREEN);
		}
		// remove marks
		else if (piece == Piece.MARK_GREEN) {
			setPiece(space, Piece.MARK_BLUE);
		}
		// otherwise if we can add one
		else if (piece == Piece.MARK_BLUE) {
			setPiece(space, Piece.MARK_RED);
		}

		// if its a flag, remove it
		else if (piece == Piece.FLAG) {
			setPiece(space, Piece.MARK_RED);
			flagCount--;
		}

		// essentially all that is left here is null, but still
		else if (isReplaceable(space)) {
			setPiece(space, Piece.MARK_RED);
		}
	}

	/**
	 * Cheat clicks, click a space and it will show a "ghost" bomb if one exists
	 * 
	 * @param space Space clicked
	 */
	
	private void handleCheatClick(Space space) {
		// already ran, don't run again
		if (!canCheat()) {
			return;
		}

		// no mines if we have not clicked
		if (!firstClick) {
			// you cheated for the first click, useless move as now we don't care
			// about click protection
			firstClick(null);
		}

		// only marks and empty spaces can be cheated, to save accidental clicks
		Piece piece = getPiece(space);
		if (piece != null && !piece.isMark()) {
			return;
		}

		// if its a mine, show that
		if (isMine(space)) {
			setPiece(space, Piece.MINE_GREEN);
		}
		// otherwise click the space as we know its safe
		else {
			clickSpace(space);
		}

		// use a cheat
		cheats--;

		// need to check, since it could be the last click
		checkVictory();
	}

	/* Helper functions */

	/**
	 * Gets a list of all spaces
	 * 
	 * @return a list of all spaces
	 */
	
	public Space[] getAllSpaces() {
		Space[] spaces = new Space[width * height];

		// loop through all spaces, adding them to an array
		int i = 0;
		for (int y = 0; y < height; y++) {
			for (int x = 0; x < width; x++) {
				spaces[i] = new Space(x, y);
				i++;
			}
		}

		return spaces;
	}

	/**
	 * Helper function to get the coordinates of all 8 neighbors to the space Note
	 * that some may be invalid spaces
	 * 
	 * @param space Space around which to get neighbors
	 * @return an array of spaces of the 8 neighbors, or less on edges
	 */
	
	public Space[] getNeighbors(Space space) {
		// if not valid, return no neighbors
		if (!isValid(space)) {
			return new Space[0];
		}

		// array cannot be bigger than 8
		Space[] neighbors = new Space[8];
		int x = space.getX();
		int y = space.getY();

		// 2D loop from x - 1, y - 1 up to x + 1, y + 1
		int neighborCount = 0;
		for (int i = -1; i <= 1; i++) {
			for (int j = -1; j <= 1; j++) {
				// skip offset of 0,0 as that is the input space
				if (i == 0 && j == 0) {
					continue;
				}

				// make sure the space is valid before returning it
				Space neighbor = new Space(x + i, y + j);
				if (isValid(neighbor)) {
					neighbors[neighborCount] = neighbor;
					neighborCount++;
				}
			}
		}

		return neighbors;
	}

	/**
	 * Marks a space as needing update by the graphics display
	 * 
	 * @param space space needing an update
	 */
	
	public void markUpdate(Space space) {
		if (!update.contains(space)) {
			update.add(space);
		}
	}

	/**
	 * Returns the number to display on the space after clicking it Does not take
	 * bombs on this space into account, check isMine() first
	 * 
	 * @param space Space to check
	 * @return The number of bombs around this space
	 */
	
	public Piece getNumber(Space space) {
		// no space? no return
		if (!isValid(space)) {
			return null;
		}

		int count = 0;
		// check all the neighbors for a bomb
		for (Space neighbor : getNeighbors(space)) {
			// if they have one, add to the running total
			if (isMine(neighbor)) {
				count++;
			}
		}

		// return the specific piece
		return Piece.fromNumber(count);
	}

	/* Getters, setters, and basic return logic */

	/**
	 * Gets the piece on the specified space
	 * 
	 * @param space Space to check for a piece
	 * @return the piece on the specified space
	 */
	
	public Piece getPiece(Space space) {
		// invalid gets null
		if (!isValid(space)) {
			return null;
		}

		// otherwise go with the contained piece
		return pieces[space.getY()][space.getX()];
	}

	/**
	 * Placed a piece on a space
	 * 
	 * @param space Space to place the piece
	 * @param piece Piece to place on the space
	 */
	
	public void setPiece(Space space, Piece piece) {
		// must be valid
		if (isValid(space)) {
			pieces[space.getY()][space.getX()] = piece;
			markUpdate(space);
		}
	}

	/**
	 * Determines if a space contains a bomb
	 * 
	 * @param space Space to check
	 * @return True if the space contains a bomb
	 */
	
	public boolean isMine(Space space) {
		// not a valid space?
		if (!isValid(space)) {
			return false;
		}

		return mines[space.getY()][space.getX()];
	}

	/**
	 * Determines if a space appears enabled, or pressed up
	 * 
	 * @param space Space to check
	 * @return True if the space appears enabled
	 */
	
	public boolean isEnabled(Space space) {
		if (!isValid(space)) {
			return false;
		}

		Piece piece = getPiece(space);

		// if the space is empty, it pops up
		if (piece == null) {
			return true;
		}

		// otherwise go based on the contained value
		return piece.isEnabled();
	}

	/**
	 * Determines if the contents of a space can be replaced
	 * 
	 * @param space Space clicked
	 */
	
	private boolean isReplaceable(Space space) {
		// invalid spaces are always false
		if (!isValid(space)) {
			return false;
		}

		Piece piece = getPiece(space);

		// if the space is empty, it can be clicked
		if (piece == null) {
			return true;
		}

		// otherwise go based on the contained value
		return piece.isReplaceable();
	}

	/**
	 * Determines if the space is a number
	 * 
	 * @param space Space clicked
	 */
	
	private boolean isNumber(Space space) {
		// invalid spaces are always false
		if (!isValid(space)) {
			return false;
		}

		Piece piece = getPiece(space);

		// if the space is empty, it is not a number
		if (piece == null) {
			return false;
		}

		// otherwise go based on the contained value
		return piece.isNumber();
	}

	/* Data */

	/**
	 * Gets the width of the board
	 * 
	 * @return The width of the board
	 */
	
	public int getWidth() {
		return width;
	}

	/**
	 * Gets the height of the board
	 * 
	 * @return The height of the board
	 */
	
	public int getHeight() {
		return height;
	}

	/**
	 * Gets the number of mines left on the board
	 * 
	 * @return number of mines remaining
	 */
	
	public int getRemainingMines() {
		return data.mineCount - flagCount;
	}

	/**
	 * Checks if the player has used their cheat
	 * 
	 * @return if the player has used their cheat
	 */
	
	public boolean canCheat() {
		return cheats > 0;
	}

	/**
	 * Checks how many cheats the player has left
	 * 
	 * @return remaining cheats
	 */
	
	public int getCheats() {
		return cheats;
	}

	/**
	 * Checks if the game ended
	 * 
	 * @return true if the game ended
	 */
	
	public boolean gameOver() {
		return gameOver;
	}

	/**
	 * Checks if the player won the game
	 * 
	 * @return true if the player won the game
	 */
	
	public boolean hasWon() {
		return victory;
	}

	/**
	 * Checks if a space is within the bounds of this board
	 * 
	 * @param space Space to check
	 * @return true if the space is within this board
	 */
	
	public boolean isValid(Space space) {
		// no space?
		if (space == null) {
			return false;
		}

		// first, check if the space is entirely invalid
		if (space.getX() < 0 || space.getY() < 0) {
			return false;
		}

		// next, check if this is outside of this board
		if (space.getY() >= height || space.getX() >= width) {
			return false;
		}

		// fits in both? return true then
		return true;
	}

	/**
	 * Gets a list of spaces pending updates to update the button displays
	 * 
	 * @return a list of spaces needing an update
	 */
	
	public Queue<Space> getUpdates() {
		return update;
	}

	/**
	 * Actions that can be performed on click. Used by buttons to pass along a
	 * constant rather than a list of modifiers.
	 */
	
	public enum ClickAction {
		/** Normal click */
		DEFAULT,
		/** Placing a flag or mark */
		FLAG,
		/** Placing a mark of different colors */
		MARK,
		/** Safely clicking a mine */
		CHEAT;
	}
}
]]></snapshot>
  </Command>
  <Command __id="12" _type="MoveCaretCommand" caretOffset="0" docOffset="0" timestamp="174014" />
  <Command __id="13" _type="FileOpenCommand" docASTNodeCount="260" docActiveCodeLength="2374" docExpressionCount="151" docLength="3861" projectName="MineSweeper" timestamp="181030">
    <filePath><![CDATA[C:\Users\Eye-tracking\git\MineSweeper-Experiment\src\logic\MineSweeper.java]]></filePath>
  </Command>
  <Command __id="14" _type="MoveCaretCommand" caretOffset="1357" docOffset="1632" timestamp="181071" />
  <Command __id="15" _type="FileOpenCommand" docASTNodeCount="1769" docActiveCodeLength="10590" docExpressionCount="1040" docLength="19616" projectName="MineSweeper" timestamp="184677">
    <filePath><![CDATA[C:\Users\Eye-tracking\git\MineSweeper-Experiment\src\logic\MineSweeperBoard.java]]></filePath>
  </Command>
  <Command __id="16" _type="MoveCaretCommand" caretOffset="0" docOffset="0" timestamp="184713" />
  <Command __id="17" _type="MoveCaretCommand" caretOffset="980" docOffset="1472" timestamp="186399" />
  <Command __id="18" _type="SelectTextCommand" caretOffset="986" docEnd="1478" docOffset="1478" docStart="1469" end="986" start="977" timestamp="186591" />
  <Command __id="20" _type="FindCommand" caseSensitive="false" forward="true" matchWord="false" offset="1478" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="189490" wrapSearch="true">
    <searchString><![CDATA[mineCount]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="21" _type="MoveCaretCommand" caretOffset="1203" docOffset="1695" timestamp="219288" />
  <Command __id="22" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" timestamp="232508" />
  <Command __id="23" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineEnd" timestamp="232931" />
  <DocumentChange __id="24" _type="Insert" docASTNodeCount="1769" docActiveCodeLength="10594" docExpressionCount="1040" docLength="19620" length="4" offset="1761" timestamp="233483">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <Command __id="25" _type="InsertStringCommand" timestamp="233490">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="26" _type="Insert" docASTNodeCount="1771" docActiveCodeLength="10598" docExpressionCount="1041" docLength="19624" length="4" offset="1765" repeat="4" timestamp="234217" timestamp2="234906">
    <text><![CDATA[Syys]]></text>
  </DocumentChange>
  <Command __id="27" _type="InsertStringCommand" repeat="4" timestamp="234220" timestamp2="234908">
    <data><![CDATA[Syys]]></data>
  </Command>
  <DocumentChange __id="34" _type="Delete" docASTNodeCount="1771" docActiveCodeLength="10596" docExpressionCount="1041" docLength="19622" endLine="71" length="2" offset="1767" repeat="2" startLine="71" timestamp="235301" timestamp2="235452">
    <text><![CDATA[ys]]></text>
  </DocumentChange>
  <Command __id="35" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" repeat="2" timestamp="235303" timestamp2="235454" />
  <DocumentChange __id="38" _type="Insert" docASTNodeCount="1775" docActiveCodeLength="10612" docExpressionCount="1045" docLength="19638" length="19" offset="1767" repeat="17" timestamp="235509" timestamp2="239095">
    <text><![CDATA[stem.out.println();]]></text>
  </DocumentChange>
  <Command __id="39" _type="InsertStringCommand" repeat="5" timestamp="235513" timestamp2="236072">
    <data><![CDATA[stem.]]></data>
  </Command>
  <Command __id="48" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" start_end="START" timestamp="236108" />
  <Command __id="52" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" start_end="END" timestamp="237237" />
  <Command __id="54" _type="InsertStringCommand" timestamp="237246">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="55" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" start_end="START" timestamp="237248" />
  <Command __id="63" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" start_end="END" timestamp="239092" />
  <Command __id="65" _type="InsertStringCommand" timestamp="239109">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="66" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" repeat="2" timestamp="240330" timestamp2="240480" />
  <DocumentChange __id="68" _type="Insert" docASTNodeCount="1776" docActiveCodeLength="10626" docExpressionCount="1046" docLength="19652" length="11" offset="1784" repeat="10" timestamp="242561" timestamp2="244605">
    <text><![CDATA["got count"]]></text>
  </DocumentChange>
  <Command __id="69" _type="InsertStringCommand" repeat="10" timestamp="242564" timestamp2="244606">
    <data><![CDATA["got count]]></data>
  </Command>
  <DocumentChange __id="88" _type="Insert" docASTNodeCount="1776" docActiveCodeLength="10629" docExpressionCount="1046" docLength="19655" length="3" offset="1794" repeat="3" timestamp="248276" timestamp2="249933">
    <text><![CDATA[ %x]]></text>
  </DocumentChange>
  <Command __id="89" _type="InsertStringCommand" repeat="3" timestamp="248277" timestamp2="249934">
    <data><![CDATA[ %x]]></data>
  </Command>
  <Command __id="94" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" timestamp="250978" />
  <DocumentChange __id="95" _type="Insert" docASTNodeCount="1781" docActiveCodeLength="10644" docExpressionCount="1051" docLength="19670" length="21" offset="1798" repeat="16" timestamp="252315" timestamp2="256692">
    <text><![CDATA[, this.data.mineCount]]></text>
  </DocumentChange>
  <Command __id="96" _type="InsertStringCommand" repeat="7" timestamp="252318" timestamp2="253423">
    <data><![CDATA[, this.]]></data>
  </Command>
  <Command __id="109" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" start_end="START" timestamp="253424" />
  <Command __id="114" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" start_end="END" timestamp="255586" />
  <Command __id="116" _type="InsertStringCommand" timestamp="255593">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="117" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" start_end="START" timestamp="255597" />
  <Command __id="121" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" start_end="END" timestamp="256689" />
  <Command __id="123" _type="InsertStringCommand" timestamp="256697">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="124" _type="MoveCaretCommand" caretOffset="1375" docOffset="1867" timestamp="257911" />
  <Command __id="125" _type="MoveCaretCommand" caretOffset="1287" docOffset="1779" timestamp="263311" />
  <Command __id="126" _type="MoveCaretCommand" caretOffset="1304" docOffset="1796" timestamp="269295" />
  <DocumentChange __id="127" _type="Delete" docASTNodeCount="1781" docActiveCodeLength="10649" docExpressionCount="1051" docLength="19675" endLine="71" length="1" offset="1796" startLine="71" timestamp="283320">
    <text><![CDATA[x]]></text>
  </DocumentChange>
  <Command __id="128" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" timestamp="283323" />
  <DocumentChange __id="129" _type="Insert" docASTNodeCount="1781" docActiveCodeLength="10650" docExpressionCount="1051" docLength="19676" length="1" offset="1796" timestamp="283476">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <Command __id="130" _type="InsertStringCommand" timestamp="283478">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="131" _type="MoveCaretCommand" caretOffset="1409" docOffset="1901" timestamp="284815" />
  <Command __id="132" _type="MoveCaretCommand" caretOffset="1304" docOffset="1796" timestamp="287984" />
  <Command __id="133" _type="AssistCommand" assist_type="QUICK_ASSIST" auto_activated="false" start_end="START" timestamp="290082" />
  <Command __id="134" _type="EclipseCommand" commandID="AUTOGEN:::org.eclipse.jdt.internal.ui.CompilationUnitEditor.ruler.actions/org.eclipse.jdt.internal.ui.javaeditor.JavaSelectRulerAction" timestamp="290136" />
  <Command __id="135" _type="AssistCommand" assist_type="QUICK_ASSIST" auto_activated="false" start_end="END" timestamp="297395" />
  <DocumentChange __id="136" _type="Delete" docASTNodeCount="1780" docActiveCodeLength="10634" docExpressionCount="1050" docLength="19660" endLine="71" length="16" offset="1784" repeat="2" startLine="71" timestamp="297405" timestamp2="297407">
    <text><![CDATA["got count %d", ]]></text>
  </DocumentChange>
  <Command __id="138" _type="MoveCaretCommand" caretOffset="1485" docOffset="1805" timestamp="299784" />
  <Command __id="139" _type="RunCommand" kind="Create" projectName="MineSweeper" timestamp="306763" type="Run" />
  <Command __id="140" _type="RunCommand" exitValue="0" kind="Terminate" projectName="MineSweeper" timestamp="319408" type="Run" />
  <Command __id="141" _type="MoveCaretCommand" caretOffset="1514" docOffset="1834" timestamp="320816" />
  <Command __id="142" _type="MoveCaretCommand" caretOffset="1471" docOffset="1791" timestamp="321272" />
  <DocumentChange __id="143" _type="Insert" docASTNodeCount="1769" docActiveCodeLength="10592" docExpressionCount="1040" docLength="19662" length="2" offset="1763" timestamp="322934">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="144" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" timestamp="322961" />
  <Command __id="145" _type="MoveCaretCommand" caretOffset="1485" docOffset="1805" timestamp="324807" />
  <Command __id="146" _type="MoveCaretCommand" caretOffset="1470" docOffset="1790" timestamp="325855" />
  <Command __id="147" _type="SelectTextCommand" caretOffset="1485" docEnd="1805" docOffset="1805" docStart="1796" end="1485" start="1476" timestamp="330471" />
  <Command __id="149" _type="MoveCaretCommand" caretOffset="1635" docOffset="1961" timestamp="333096" />
  <Command __id="150" _type="MoveCaretCommand" caretOffset="1481" docOffset="1801" timestamp="333680" />
  <Command __id="151" _type="SelectTextCommand" caretOffset="1485" docEnd="1805" docOffset="1805" docStart="1796" end="1485" start="1476" timestamp="333839" />
  <Command __id="152" _type="MoveCaretCommand" caretOffset="1414" docOffset="1734" timestamp="334399" />
  <Command __id="153" _type="SelectTextCommand" caretOffset="1419" docEnd="1739" docOffset="1739" docStart="1730" end="1419" start="1410" timestamp="334591" />
  <Command __id="154" _type="MoveCaretCommand" caretOffset="1487" docOffset="1807" timestamp="335136" />
  <Command __id="155" _type="MoveCaretCommand" caretOffset="1416" docOffset="1736" timestamp="335823" />
  <Command __id="156" _type="SelectTextCommand" caretOffset="1419" docEnd="1739" docOffset="1739" docStart="1730" end="1419" start="1410" timestamp="336023" />
  <Command __id="158" _type="FindCommand" caseSensitive="false" forward="true" matchWord="false" offset="1739" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="338424" wrapSearch="true">
    <searchString><![CDATA[mineCount]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="159" _type="MoveCaretCommand" caretOffset="3020" docOffset="3789" timestamp="437048" />
  <Command __id="160" _type="MoveCaretCommand" caretOffset="2957" docOffset="3726" timestamp="459585" />
  <Command __id="161" _type="MoveCaretCommand" caretOffset="2808" docOffset="3577" timestamp="462496" />
  <Command __id="162" _type="MoveCaretCommand" caretOffset="3020" docOffset="3789" timestamp="475408" />
  <Command __id="163" _type="MoveCaretCommand" caretOffset="2974" docOffset="3743" timestamp="487103" />
  <Command __id="164" _type="MoveCaretCommand" caretOffset="3020" docOffset="3789" timestamp="488087" />
  <DocumentChange __id="165" _type="Insert" docASTNodeCount="1769" docActiveCodeLength="10597" docExpressionCount="1040" docLength="19667" length="5" offset="3789" timestamp="500602">
    <text><![CDATA[
			]]></text>
  </DocumentChange>
  <Command __id="166" _type="InsertStringCommand" timestamp="500609">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="167" _type="Delete" docASTNodeCount="1769" docActiveCodeLength="10592" docExpressionCount="1040" docLength="19662" endLine="141" length="5" offset="3789" repeat="4" startLine="140" timestamp="501626" timestamp2="502634">
    <text><![CDATA[
			]]></text>
  </DocumentChange>
  <Command __id="168" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" repeat="4" timestamp="501627" timestamp2="502637" />
  <Command __id="175" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" timestamp="503345" />
  <DocumentChange __id="176" _type="Insert" docASTNodeCount="1769" docActiveCodeLength="10597" docExpressionCount="1040" docLength="19667" length="5" offset="3743" timestamp="503843">
    <text><![CDATA[
			]]></text>
  </DocumentChange>
  <Command __id="177" _type="InsertStringCommand" timestamp="503850">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="178" _type="Insert" docASTNodeCount="1769" docActiveCodeLength="10599" docExpressionCount="1040" docLength="19669" length="2" offset="3748" repeat="2" timestamp="504476" timestamp2="504588">
    <text><![CDATA[if]]></text>
  </DocumentChange>
  <Command __id="179" _type="InsertStringCommand" repeat="2" timestamp="504478" timestamp2="504592">
    <data><![CDATA[if]]></data>
  </Command>
  <DocumentChange __id="182" _type="Insert" docASTNodeCount="1771" docActiveCodeLength="10601" docExpressionCount="1041" docLength="19671" length="2" offset="3750" timestamp="506844">
    <text><![CDATA[()]]></text>
  </DocumentChange>
  <Command __id="183" _type="InsertStringCommand" timestamp="506848">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="184" _type="SelectTextCommand" caretOffset="3029" docEnd="3798" docOffset="3798" docStart="3757" end="3029" start="2988" timestamp="509417" />
  <Command __id="185" _type="CopyCommand" timestamp="510046" />
  <Command __id="186" _type="MoveCaretCommand" caretOffset="2981" docOffset="3750" timestamp="511319" />
  <Command __id="187" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" timestamp="512145" />
  <DocumentChange __id="188" _type="Insert" docASTNodeCount="1781" docActiveCodeLength="10642" docExpressionCount="1051" docLength="19712" length="41" offset="3751" timestamp="512533">
    <text><![CDATA[mines[space.getY()][space.getX()] = true;]]></text>
  </DocumentChange>
  <Command __id="189" _type="PasteCommand" timestamp="512537" />
  <DocumentChange __id="190" _type="Delete" docASTNodeCount="1781" docActiveCodeLength="10641" docExpressionCount="1051" docLength="19711" endLine="140" length="1" offset="3791" startLine="140" timestamp="513906">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <Command __id="191" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" timestamp="513908" />
  <Command __id="192" _type="MoveCaretCommand" caretOffset="3017" docOffset="3786" timestamp="515575" />
  <DocumentChange __id="193" _type="Insert" docASTNodeCount="1781" docActiveCodeLength="10642" docExpressionCount="1051" docLength="19712" length="1" offset="3786" timestamp="516275">
    <text><![CDATA[=]]></text>
  </DocumentChange>
  <Command __id="194" _type="InsertStringCommand" timestamp="516276">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="195" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" repeat="6" timestamp="516880" timestamp2="517770" />
  <DocumentChange __id="201" _type="Insert" docASTNodeCount="1783" docActiveCodeLength="10644" docExpressionCount="1051" docLength="19714" length="2" offset="3793" timestamp="518547">
    <text><![CDATA[ {]]></text>
  </DocumentChange>
  <Command __id="202" _type="InsertStringCommand" timestamp="518551">
    <data><![CDATA[{]]></data>
  </Command>
  <DocumentChange __id="203" _type="Insert" docASTNodeCount="1782" docActiveCodeLength="10656" docExpressionCount="1051" docLength="19726" length="12" offset="3795" timestamp="518897">
    <text><![CDATA[
				
			}]]></text>
  </DocumentChange>
  <Command __id="204" _type="InsertStringCommand" timestamp="518900">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="205" _type="Insert" docASTNodeCount="1788" docActiveCodeLength="10674" docExpressionCount="1056" docLength="19744" length="21" offset="3801" repeat="19" timestamp="519755" timestamp2="525623">
    <text><![CDATA[System.out.println();]]></text>
  </DocumentChange>
  <Command __id="206" _type="InsertStringCommand" repeat="7" timestamp="519757" timestamp2="521120">
    <data><![CDATA[System.]]></data>
  </Command>
  <Command __id="219" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" start_end="START" timestamp="521121" />
  <Command __id="223" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" start_end="END" timestamp="521940" />
  <Command __id="224" _type="InsertStringCommand" timestamp="521942">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="226" _type="InsertStringCommand" timestamp="522646">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="227" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" start_end="START" timestamp="522647" />
  <Command __id="235" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" start_end="END" timestamp="525620" />
  <Command __id="237" _type="InsertStringCommand" timestamp="525627">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="238" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" repeat="2" timestamp="526898" timestamp2="527056" />
  <DocumentChange __id="240" _type="Insert" docASTNodeCount="1789" docActiveCodeLength="10685" docExpressionCount="1057" docLength="19755" length="8" offset="3820" repeat="7" timestamp="528043" timestamp2="530130">
    <text><![CDATA["Error,"]]></text>
  </DocumentChange>
  <Command __id="241" _type="InsertStringCommand" repeat="7" timestamp="528046" timestamp2="530131">
    <data><![CDATA["Error,]]></data>
  </Command>
  <DocumentChange __id="254" _type="Delete" docASTNodeCount="1789" docActiveCodeLength="10684" docExpressionCount="1057" docLength="19754" endLine="141" length="1" offset="3826" startLine="141" timestamp="533250">
    <text><![CDATA[,]]></text>
  </DocumentChange>
  <Command __id="255" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" timestamp="533251" />
  <DocumentChange __id="256" _type="Insert" docASTNodeCount="1789" docActiveCodeLength="10690" docExpressionCount="1057" docLength="19760" length="6" offset="3826" repeat="6" timestamp="533980" timestamp2="534684">
    <text><![CDATA[- same]]></text>
  </DocumentChange>
  <Command __id="257" _type="InsertStringCommand" repeat="6" timestamp="533980" timestamp2="534685">
    <data><![CDATA[- same]]></data>
  </Command>
  <DocumentChange __id="268" _type="Insert" docASTNodeCount="1789" docActiveCodeLength="10691" docExpressionCount="1057" docLength="19761" length="1" offset="3832" timestamp="539597">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="269" _type="InsertStringCommand" timestamp="539598">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="270" _type="Delete" docASTNodeCount="1789" docActiveCodeLength="10686" docExpressionCount="1057" docLength="19756" endLine="141" length="5" offset="3828" repeat="5" startLine="141" timestamp="540378" timestamp2="540995">
    <text><![CDATA[same ]]></text>
  </DocumentChange>
  <Command __id="271" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" repeat="5" timestamp="540379" timestamp2="540996" />
  <DocumentChange __id="280" _type="Insert" docASTNodeCount="1789" docActiveCodeLength="10688" docExpressionCount="1057" docLength="19758" length="2" offset="3828" repeat="2" timestamp="541628" timestamp2="541817">
    <text><![CDATA[su]]></text>
  </DocumentChange>
  <Command __id="281" _type="InsertStringCommand" repeat="2" timestamp="541629" timestamp2="541817">
    <data><![CDATA[su]]></data>
  </Command>
  <DocumentChange __id="284" _type="Delete" docASTNodeCount="1789" docActiveCodeLength="10686" docExpressionCount="1057" docLength="19756" endLine="141" length="2" offset="3828" repeat="2" startLine="141" timestamp="542162" timestamp2="542314">
    <text><![CDATA[su]]></text>
  </DocumentChange>
  <Command __id="285" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" repeat="2" timestamp="542164" timestamp2="542316" />
  <DocumentChange __id="288" _type="Insert" docASTNodeCount="1789" docActiveCodeLength="10696" docExpressionCount="1057" docLength="19766" length="10" offset="3828" repeat="10" timestamp="542564" timestamp2="543756">
    <text><![CDATA[used space]]></text>
  </DocumentChange>
  <Command __id="289" _type="InsertStringCommand" repeat="10" timestamp="542565" timestamp2="543757">
    <data><![CDATA[used space]]></data>
  </Command>
  <Command __id="308" _type="RunCommand" kind="Create" projectName="MineSweeper" timestamp="546910" type="Run" />
  <Command __id="309" _type="RunCommand" exitValue="0" kind="Terminate" projectName="MineSweeper" timestamp="583187" type="Run" />
  <Command __id="310" _type="MoveCaretCommand" caretOffset="3078" docOffset="3847" timestamp="585055" />
  <Command __id="311" _type="MoveCaretCommand" caretOffset="2762" docOffset="3531" timestamp="586224" />
  <DocumentChange __id="312" _type="Insert" docASTNodeCount="1789" docActiveCodeLength="10700" docExpressionCount="1057" docLength="19770" length="4" offset="3531" timestamp="590941">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <Command __id="313" _type="InsertStringCommand" timestamp="590945">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="314" _type="Insert" docASTNodeCount="1794" docActiveCodeLength="10721" docExpressionCount="1059" docLength="19791" length="21" offset="3535" repeat="21" timestamp="593099" timestamp2="599034">
    <text><![CDATA[int placed_mines = 0;]]></text>
  </DocumentChange>
  <Command __id="315" _type="InsertStringCommand" repeat="21" timestamp="593101" timestamp2="599036">
    <data><![CDATA[int placed_mines = 0;]]></data>
  </Command>
  <DocumentChange __id="356" _type="Insert" docASTNodeCount="1794" docActiveCodeLength="10725" docExpressionCount="1059" docLength="19795" length="4" offset="3556" timestamp="604003">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <Command __id="357" _type="InsertStringCommand" timestamp="604009">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="358" _type="Insert" docASTNodeCount="1796" docActiveCodeLength="10745" docExpressionCount="1060" docLength="19815" length="20" offset="3560" repeat="19" timestamp="604910" timestamp2="609852">
    <text><![CDATA[while(placed_mines )]]></text>
  </DocumentChange>
  <Command __id="359" _type="InsertStringCommand" repeat="19" timestamp="604913" timestamp2="609853">
    <data><![CDATA[while(placed_mines ]]></data>
  </Command>
  <DocumentChange __id="396" _type="Insert" docASTNodeCount="1729" docActiveCodeLength="10746" docExpressionCount="1008" docLength="19816" length="1" offset="3579" timestamp="612965">
    <text><![CDATA[<]]></text>
  </DocumentChange>
  <Command __id="397" _type="InsertStringCommand" timestamp="612967">
    <data><![CDATA[<]]></data>
  </Command>
  <DocumentChange __id="398" _type="Insert" docASTNodeCount="1729" docActiveCodeLength="10747" docExpressionCount="1008" docLength="19817" length="1" offset="3580" timestamp="616101">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="399" _type="InsertStringCommand" timestamp="616103">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="400" _type="Insert" docASTNodeCount="1800" docActiveCodeLength="10756" docExpressionCount="1064" docLength="19826" length="14" offset="3581" repeat="10" timestamp="618916" timestamp2="620315">
    <text><![CDATA[data.mineCount]]></text>
  </DocumentChange>
  <Command __id="401" _type="InsertStringCommand" repeat="5" timestamp="618917" timestamp2="619454">
    <data><![CDATA[data.]]></data>
  </Command>
  <Command __id="410" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" start_end="START" timestamp="619455" />
  <Command __id="415" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" start_end="END" timestamp="620313" />
  <Command __id="417" _type="InsertStringCommand" timestamp="620319">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="418" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" timestamp="621464" />
  <DocumentChange __id="419" _type="Insert" docASTNodeCount="1801" docActiveCodeLength="10763" docExpressionCount="1064" docLength="19833" length="2" offset="3596" timestamp="622350">
    <text><![CDATA[ {]]></text>
  </DocumentChange>
  <Command __id="420" _type="InsertStringCommand" timestamp="622353">
    <data><![CDATA[{]]></data>
  </Command>
  <DocumentChange __id="421" _type="Insert" docASTNodeCount="1801" docActiveCodeLength="10773" docExpressionCount="1064" docLength="19843" length="10" offset="3598" timestamp="622913">
    <text><![CDATA[
			
		}]]></text>
  </DocumentChange>
  <Command __id="422" _type="InsertStringCommand" timestamp="622916">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="423" _type="SelectTextCommand" caretOffset="2836" docEnd="3608" docOffset="3605" docStart="3605" end="2839" start="2836" timestamp="626032" />
  <DocumentChange __id="424" _type="Delete" docASTNodeCount="1801" docActiveCodeLength="10763" docExpressionCount="1064" docLength="19833" endLine="139" length="10" offset="3598" repeat="6" startLine="137" timestamp="626675" timestamp2="629466">
    <text><![CDATA[
			
		}]]></text>
  </DocumentChange>
  <Command __id="425" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" repeat="6" timestamp="626677" timestamp2="629470" />
  <Command __id="436" _type="MoveCaretCommand" caretOffset="2884" docOffset="3653" timestamp="630855" />
  <Command __id="437" _type="MoveCaretCommand" caretOffset="2840" docOffset="3609" timestamp="631303" />
  <Command __id="438" _type="SelectTextCommand" caretOffset="2841" docEnd="3610" docOffset="3610" docStart="3607" end="2841" start="2838" timestamp="631488" />
  <Command __id="439" _type="SelectTextCommand" caretOffset="2877" docEnd="3646" docOffset="3646" docStart="3600" end="2877" start="2831" timestamp="631672" />
  <DocumentChange __id="440" _type="Insert" docASTNodeCount="1787" docActiveCodeLength="10719" docExpressionCount="1054" docLength="19835" length="2" offset="3600" timestamp="633122">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="441" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" timestamp="633133" />
  <Command __id="442" _type="MoveCaretCommand" caretOffset="2885" docOffset="3654" timestamp="634719" />
  <Command __id="443" _type="MoveCaretCommand" caretOffset="2965" docOffset="3734" timestamp="635367" />
  <Command __id="444" _type="SelectTextCommand" caretOffset="3101" docEnd="3910" docOffset="3870" docStart="3870" end="3141" start="3101" timestamp="640751" />
  <Command __id="445" _type="MoveCaretCommand" caretOffset="3089" docOffset="3858" timestamp="645728" />
  <Command __id="446" _type="SelectTextCommand" caretOffset="3092" docEnd="3861" docOffset="3861" docStart="3857" end="3092" start="3088" timestamp="645903" />
  <DocumentChange __id="447" _type="Replace" docASTNodeCount="1787" docActiveCodeLength="10720" docExpressionCount="1054" docLength="19836" endLine="142" insertionLength="5" int_docASTNodeCount="1748" int_docActiveCodeLength="10715" int_docExpressionCount="1021" int_docLength="19831" length="4" offset="3857" repeat="5" startLine="142" timestamp="646244" timestamp2="646767">
    <deletedText><![CDATA[true]]></deletedText>
    <insertedText><![CDATA[false]]></insertedText>
  </DocumentChange>
  <Command __id="448" _type="InsertStringCommand" repeat="5" timestamp="646249" timestamp2="646769">
    <data><![CDATA[false]]></data>
  </Command>
  <Command __id="457" _type="SelectTextCommand" caretOffset="3098" docEnd="3911" docOffset="3867" docStart="3867" end="3142" start="3098" timestamp="649360" />
  <DocumentChange __id="458" _type="Delete" docASTNodeCount="1780" docActiveCodeLength="10676" docExpressionCount="1048" docLength="19792" endLine="143" length="44" offset="3867" startLine="143" timestamp="650082">
    <text><![CDATA[				System.out.println("Error- used space");]]></text>
  </DocumentChange>
  <Command __id="459" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" timestamp="650085" />
  <Command __id="460" _type="MoveCaretCommand" caretOffset="3104" docOffset="3873" timestamp="651263" />
  <DocumentChange __id="461" _type="Delete" docASTNodeCount="1781" docActiveCodeLength="10668" docExpressionCount="1048" docLength="19784" endLine="144" length="8" offset="3865" repeat="6" startLine="142" timestamp="651839" timestamp2="653132">
    <text><![CDATA[

			}]]></text>
  </DocumentChange>
  <Command __id="462" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" repeat="6" timestamp="651841" timestamp2="653135" />
  <Command __id="473" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" timestamp="654044" />
  <DocumentChange __id="474" _type="Insert" docASTNodeCount="1781" docActiveCodeLength="10673" docExpressionCount="1048" docLength="19789" length="5" offset="3911" timestamp="654635">
    <text><![CDATA[
			]]></text>
  </DocumentChange>
  <Command __id="475" _type="InsertStringCommand" timestamp="654644">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="476" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" timestamp="655632" />
  <DocumentChange __id="477" _type="Insert" docASTNodeCount="1781" docActiveCodeLength="10673" docExpressionCount="1048" docLength="19789" length="1" offset="3870" timestamp="655915">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <Command __id="478" _type="InsertStringCommand" timestamp="655919">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="479" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" timestamp="656457" />
  <DocumentChange __id="480" _type="Insert" docASTNodeCount="1784" docActiveCodeLength="10690" docExpressionCount="1050" docLength="19806" length="16" offset="3917" repeat="16" timestamp="656826" timestamp2="661482">
    <text><![CDATA[	placed_mines++;]]></text>
  </DocumentChange>
  <Command __id="481" _type="InsertStringCommand" repeat="16" timestamp="656829" timestamp2="661484">
    <data><![CDATA[	placed_mines++;]]></data>
  </Command>
  <DocumentChange __id="512" _type="Insert" docASTNodeCount="1784" docActiveCodeLength="10696" docExpressionCount="1050" docLength="19812" length="6" offset="3933" timestamp="661954">
    <text><![CDATA[
				]]></text>
  </DocumentChange>
  <Command __id="513" _type="InsertStringCommand" timestamp="661961">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="514" _type="Replace" docASTNodeCount="1783" docActiveCodeLength="10696" docExpressionCount="1050" docLength="19812" endLine="145" insertionLength="1" int_docASTNodeCount="1784" int_docActiveCodeLength="10695" int_docExpressionCount="1050" int_docLength="19811" length="1" offset="3938" startLine="145" timestamp="662588">
    <deletedText><![CDATA[	]]></deletedText>
    <insertedText><![CDATA[}]]></insertedText>
  </DocumentChange>
  <Command __id="515" _type="InsertStringCommand" timestamp="662592">
    <data><![CDATA[}]]></data>
  </Command>
  <Command __id="516" _type="MoveCaretCommand" caretOffset="3177" docOffset="3946" timestamp="663855" />
  <Command __id="517" _type="RunCommand" kind="Create" projectName="MineSweeper" timestamp="667931" type="Run" />
  <Command __id="518" _type="RunCommand" exitValue="0" kind="Terminate" projectName="MineSweeper" timestamp="737404" type="Run" />
  <Command __id="519" _type="FileOpenCommand" docASTNodeCount="260" docActiveCodeLength="2374" docExpressionCount="151" docLength="3861" projectName="MineSweeper" timestamp="749428">
    <filePath><![CDATA[C:\Users\Eye-tracking\git\MineSweeper-Experiment\src\logic\MineSweeper.java]]></filePath>
  </Command>
  <Command __id="520" _type="MoveCaretCommand" caretOffset="1357" docOffset="1632" timestamp="749462" />
  <Command __id="521" _type="SelectTextCommand" caretOffset="266" docEnd="266" docOffset="266" docStart="230" end="266" start="230" timestamp="761895" />
  <Command __id="522" _type="FileOpenCommand" docASTNodeCount="1783" docActiveCodeLength="10696" docExpressionCount="1050" docLength="19812" projectName="MineSweeper" timestamp="763419">
    <filePath><![CDATA[C:\Users\Eye-tracking\git\MineSweeper-Experiment\src\logic\MineSweeperBoard.java]]></filePath>
  </Command>
  <Command __id="523" _type="MoveCaretCommand" caretOffset="3177" docOffset="3946" timestamp="763467" />
  <Command __id="524" _type="RunCommand" kind="Create" projectName="MineSweeper" timestamp="783095" type="Run" />
  <Command __id="525" _type="RunCommand" exitValue="0" kind="Terminate" projectName="MineSweeper" timestamp="790624" type="Run" />
  <Command __id="526" _type="ShellBoundsCommand" bounds="[-8, -8, 1936, 1056]" timestamp="815444" />
</Events>
